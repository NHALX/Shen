(defun print (V6570) (let W6571 (shen.insert V6570 "~S") (let W6572 (pr W6571 (stoutput)) V6570)))

(defun pr (V6573 V6574) (if (value *hush*) V6573 (if (shen.char-stoutput? V6574) (shen.write-string V6573 V6574) (shen.write-chars V6573 V6574 (shen.string->byte V6573 0) 1))))

(defun shen.string->byte (V6575 V6576) (trap-error (string->n (pos V6575 V6576)) (lambda Z6577 shen.eos)))

(defun shen.write-chars (V6578 V6579 V6580 V6581) (cond ((= shen.eos V6580) V6578) (true (shen.write-chars V6578 V6579 (do (write-byte V6580 V6579) (shen.string->byte V6578 V6581)) (+ V6581 1)))))

(defun shen.mkstr (V6582 V6583) (cond ((string? V6582) (shen.mkstr-l (shen.proc-nl V6582) V6583)) (true (shen.mkstr-r (cons shen.proc-nl (cons V6582 ())) V6583))))

(defun shen.mkstr-l (V6588 V6589) (cond ((= () V6589) V6588) ((cons? V6589) (shen.mkstr-l (shen.insert-l (hd V6589) V6588) (tl V6589))) (true (simple-error "implementation error in shen.mkstr-l"))))

(defun shen.insert-l (V6596 V6597) (cond ((= "" V6597) "") ((and (shen.+string? V6597) (and (= "~" (hdstr V6597)) (and (shen.+string? (tlstr V6597)) (= "A" (hdstr (tlstr V6597)))))) (cons shen.app (cons V6596 (cons (tlstr (tlstr V6597)) (cons shen.a ()))))) ((and (shen.+string? V6597) (and (= "~" (hdstr V6597)) (and (shen.+string? (tlstr V6597)) (= "R" (hdstr (tlstr V6597)))))) (cons shen.app (cons V6596 (cons (tlstr (tlstr V6597)) (cons shen.r ()))))) ((and (shen.+string? V6597) (and (= "~" (hdstr V6597)) (and (shen.+string? (tlstr V6597)) (= "S" (hdstr (tlstr V6597)))))) (cons shen.app (cons V6596 (cons (tlstr (tlstr V6597)) (cons shen.s ()))))) ((shen.+string? V6597) (shen.factor-cn (cons cn (cons (hdstr V6597) (cons (shen.insert-l V6596 (tlstr V6597)) ()))))) ((and (cons? V6597) (and (= cn (hd V6597)) (and (cons? (tl V6597)) (and (cons? (tl (tl V6597))) (= () (tl (tl (tl V6597)))))))) (cons cn (cons (hd (tl V6597)) (cons (shen.insert-l V6596 (hd (tl (tl V6597)))) ())))) ((and (cons? V6597) (and (= shen.app (hd V6597)) (and (cons? (tl V6597)) (and (cons? (tl (tl V6597))) (and (cons? (tl (tl (tl V6597)))) (= () (tl (tl (tl (tl V6597)))))))))) (cons shen.app (cons (hd (tl V6597)) (cons (shen.insert-l V6596 (hd (tl (tl V6597)))) (tl (tl (tl V6597))))))) (true (simple-error "implementation error in shen.insert-l"))))

(defun shen.factor-cn (V6598) (cond ((and (cons? V6598) (and (= cn (hd V6598)) (and (cons? (tl V6598)) (and (cons? (tl (tl V6598))) (and (cons? (hd (tl (tl V6598)))) (and (= cn (hd (hd (tl (tl V6598))))) (and (cons? (tl (hd (tl (tl V6598))))) (and (cons? (tl (tl (hd (tl (tl V6598)))))) (and (= () (tl (tl (tl (hd (tl (tl V6598))))))) (and (= () (tl (tl (tl V6598)))) (and (string? (hd (tl V6598))) (string? (hd (tl (hd (tl (tl V6598))))))))))))))))) (cons cn (cons (cn (hd (tl V6598)) (hd (tl (hd (tl (tl V6598)))))) (tl (tl (hd (tl (tl V6598)))))))) (true V6598)))

(defun shen.proc-nl (V6601) (cond ((= "" V6601) "") ((and (shen.+string? V6601) (and (= "~" (hdstr V6601)) (and (shen.+string? (tlstr V6601)) (= "%" (hdstr (tlstr V6601)))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V6601))))) ((shen.+string? V6601) (cn (hdstr V6601) (shen.proc-nl (tlstr V6601)))) (true (simple-error "implementation error in shen.proc-nl"))))

(defun shen.mkstr-r (V6606 V6607) (cond ((= () V6607) V6606) ((cons? V6607) (shen.mkstr-r (cons shen.insert (cons (hd V6607) (cons V6606 ()))) (tl V6607))) (true (simple-error "implementation error in shen.mkstr-r"))))

(defun shen.insert (V6608 V6609) (shen.insert-h V6608 V6609 ""))

(defun shen.insert-h (V6618 V6619 V6620) (cond ((= "" V6619) V6620) ((and (shen.+string? V6619) (and (= "~" (hdstr V6619)) (and (shen.+string? (tlstr V6619)) (= "A" (hdstr (tlstr V6619)))))) (cn V6620 (shen.app V6618 (tlstr (tlstr V6619)) shen.a))) ((and (shen.+string? V6619) (and (= "~" (hdstr V6619)) (and (shen.+string? (tlstr V6619)) (= "R" (hdstr (tlstr V6619)))))) (cn V6620 (shen.app V6618 (tlstr (tlstr V6619)) shen.r))) ((and (shen.+string? V6619) (and (= "~" (hdstr V6619)) (and (shen.+string? (tlstr V6619)) (= "S" (hdstr (tlstr V6619)))))) (cn V6620 (shen.app V6618 (tlstr (tlstr V6619)) shen.s))) ((shen.+string? V6619) (shen.insert-h V6618 (tlstr V6619) (cn V6620 (hdstr V6619)))) (true (simple-error "implementation error in shen.insert-h"))))

(defun shen.app (V6621 V6622 V6623) (cn (shen.arg->str V6621 V6623) V6622))

(defun shen.arg->str (V6627 V6628) (cond ((= V6627 (fail)) "...") ((shen.list? V6627) (shen.list->str V6627 V6628)) ((string? V6627) (shen.str->str V6627 V6628)) ((absvector? V6627) (shen.vector->str V6627 V6628)) (true (shen.atom->str V6627))))

(defun shen.list->str (V6629 V6630) (cond ((= shen.r V6630) (@s "(" (@s (shen.iter-list V6629 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V6629 V6630 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V6641 V6642 V6643) (cond ((= () V6641) "") ((= 0 V6643) "... etc") ((and (cons? V6641) (= () (tl V6641))) (shen.arg->str (hd V6641) V6642)) ((cons? V6641) (@s (shen.arg->str (hd V6641) V6642) (@s " " (shen.iter-list (tl V6641) V6642 (- V6643 1))))) (true (@s "|" (@s " " (shen.arg->str V6641 V6642))))))

(defun shen.str->str (V6646 V6647) (cond ((= shen.a V6647) V6646) (true (@s (n->string 34) (@s V6646 (n->string 34))))))

(defun shen.vector->str (V6648 V6649) (if (shen.print-vector? V6648) ((fn (<-address V6648 0)) V6648) (if (vector? V6648) (@s "<" (@s (shen.iter-vector V6648 1 V6649 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V6648 0 V6649 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V6650) (let W6651 (<-address V6650 0) (if (= W6651 shen.tuple) true (if (= W6651 shen.pvar) true (if (not (number? W6651)) (shen.fbound? W6651) false)))))

(defun shen.fbound? (V6652) (not (= (arity V6652) -1)))

(defun shen.tuple (V6653) (cn "(@p " (shen.app (<-address V6653 1) (cn " " (shen.app (<-address V6653 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V6660 V6661 V6662 V6663) (cond ((= 0 V6663) "... etc") (true (let W6664 (trap-error (<-address V6660 V6661) (lambda Z6665 shen.out-of-bounds)) (let W6666 (trap-error (<-address V6660 (+ V6661 1)) (lambda Z6667 shen.out-of-bounds)) (if (= W6664 shen.out-of-bounds) "" (if (= W6666 shen.out-of-bounds) (shen.arg->str W6664 V6662) (@s (shen.arg->str W6664 V6662) (@s " " (shen.iter-vector V6660 (+ V6661 1) V6662 (- V6663 1)))))))))))

(defun shen.atom->str (V6668) (trap-error (str V6668) (lambda Z6669 (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V6670) (or (empty? V6670) (cons? V6670)))

