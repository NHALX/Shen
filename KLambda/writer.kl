(defun print (V12181) (let W12182 (shen.insert V12181 "~S") (let W12183 (pr W12182 (stoutput)) V12181)))

(defun pr (V12184 V12185) (if (value *hush*) V12184 (if (shen.char-stoutput? V12185) (shen.write-string V12184 V12185) (shen.write-chars V12184 V12185 (shen.string->byte V12184 0) 1))))

(defun shen.string->byte (V12186 V12187) (trap-error (string->n (pos V12186 V12187)) (lambda Z12188 shen.eos)))

(defun shen.write-chars (V12189 V12190 V12191 V12192) (cond ((= shen.eos V12191) V12189) (true (shen.write-chars V12189 V12190 (do (write-byte V12191 V12190) (shen.string->byte V12189 V12192)) (+ V12192 1)))))

(defun shen.mkstr (V12193 V12194) (cond ((string? V12193) (shen.mkstr-l (shen.proc-nl V12193) V12194)) (true (shen.mkstr-r (cons shen.proc-nl (cons V12193 ())) V12194))))

(defun shen.mkstr-l (V12199 V12200) (cond ((= () V12200) V12199) ((cons? V12200) (shen.mkstr-l (shen.insert-l (hd V12200) V12199) (tl V12200))) (true (simple-error "implementation error in shen.mkstr-l"))))

(defun shen.insert-l (V12207 V12208) (cond ((= "" V12208) "") ((and (shen.+string? V12208) (and (= "~" (hdstr V12208)) (and (shen.+string? (tlstr V12208)) (= "A" (hdstr (tlstr V12208)))))) (cons shen.app (cons V12207 (cons (tlstr (tlstr V12208)) (cons shen.a ()))))) ((and (shen.+string? V12208) (and (= "~" (hdstr V12208)) (and (shen.+string? (tlstr V12208)) (= "R" (hdstr (tlstr V12208)))))) (cons shen.app (cons V12207 (cons (tlstr (tlstr V12208)) (cons shen.r ()))))) ((and (shen.+string? V12208) (and (= "~" (hdstr V12208)) (and (shen.+string? (tlstr V12208)) (= "S" (hdstr (tlstr V12208)))))) (cons shen.app (cons V12207 (cons (tlstr (tlstr V12208)) (cons shen.s ()))))) ((shen.+string? V12208) (shen.factor-cn (cons cn (cons (hdstr V12208) (cons (shen.insert-l V12207 (tlstr V12208)) ()))))) ((and (cons? V12208) (and (= cn (hd V12208)) (and (cons? (tl V12208)) (and (cons? (tl (tl V12208))) (= () (tl (tl (tl V12208)))))))) (cons cn (cons (hd (tl V12208)) (cons (shen.insert-l V12207 (hd (tl (tl V12208)))) ())))) ((and (cons? V12208) (and (= shen.app (hd V12208)) (and (cons? (tl V12208)) (and (cons? (tl (tl V12208))) (and (cons? (tl (tl (tl V12208)))) (= () (tl (tl (tl (tl V12208)))))))))) (cons shen.app (cons (hd (tl V12208)) (cons (shen.insert-l V12207 (hd (tl (tl V12208)))) (tl (tl (tl V12208))))))) (true (simple-error "implementation error in shen.insert-l"))))

(defun shen.factor-cn (V12209) (cond ((and (cons? V12209) (and (= cn (hd V12209)) (and (cons? (tl V12209)) (and (cons? (tl (tl V12209))) (and (cons? (hd (tl (tl V12209)))) (and (= cn (hd (hd (tl (tl V12209))))) (and (cons? (tl (hd (tl (tl V12209))))) (and (cons? (tl (tl (hd (tl (tl V12209)))))) (and (= () (tl (tl (tl (hd (tl (tl V12209))))))) (and (= () (tl (tl (tl V12209)))) (and (string? (hd (tl V12209))) (string? (hd (tl (hd (tl (tl V12209))))))))))))))))) (cons cn (cons (cn (hd (tl V12209)) (hd (tl (hd (tl (tl V12209)))))) (tl (tl (hd (tl (tl V12209)))))))) (true V12209)))

(defun shen.proc-nl (V12212) (cond ((= "" V12212) "") ((and (shen.+string? V12212) (and (= "~" (hdstr V12212)) (and (shen.+string? (tlstr V12212)) (= "%" (hdstr (tlstr V12212)))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V12212))))) ((shen.+string? V12212) (cn (hdstr V12212) (shen.proc-nl (tlstr V12212)))) (true (simple-error "implementation error in shen.proc-nl"))))

(defun shen.mkstr-r (V12217 V12218) (cond ((= () V12218) V12217) ((cons? V12218) (shen.mkstr-r (cons shen.insert (cons (hd V12218) (cons V12217 ()))) (tl V12218))) (true (simple-error "implementation error in shen.mkstr-r"))))

(defun shen.insert (V12219 V12220) (shen.insert-h V12219 V12220 ""))

(defun shen.insert-h (V12229 V12230 V12231) (cond ((= "" V12230) V12231) ((and (shen.+string? V12230) (and (= "~" (hdstr V12230)) (and (shen.+string? (tlstr V12230)) (= "A" (hdstr (tlstr V12230)))))) (cn V12231 (shen.app V12229 (tlstr (tlstr V12230)) shen.a))) ((and (shen.+string? V12230) (and (= "~" (hdstr V12230)) (and (shen.+string? (tlstr V12230)) (= "R" (hdstr (tlstr V12230)))))) (cn V12231 (shen.app V12229 (tlstr (tlstr V12230)) shen.r))) ((and (shen.+string? V12230) (and (= "~" (hdstr V12230)) (and (shen.+string? (tlstr V12230)) (= "S" (hdstr (tlstr V12230)))))) (cn V12231 (shen.app V12229 (tlstr (tlstr V12230)) shen.s))) ((shen.+string? V12230) (shen.insert-h V12229 (tlstr V12230) (cn V12231 (hdstr V12230)))) (true (simple-error "implementation error in shen.insert-h"))))

(defun shen.app (V12232 V12233 V12234) (cn (shen.arg->str V12232 V12234) V12233))

(defun shen.arg->str (V12238 V12239) (cond ((= V12238 (fail)) "...") ((shen.list? V12238) (shen.list->str V12238 V12239)) ((string? V12238) (shen.str->str V12238 V12239)) ((absvector? V12238) (shen.vector->str V12238 V12239)) (true (shen.atom->str V12238))))

(defun shen.list->str (V12240 V12241) (cond ((= shen.r V12241) (@s "(" (@s (shen.iter-list V12240 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V12240 V12241 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V12252 V12253 V12254) (cond ((= () V12252) "") ((= 0 V12254) "... etc") ((and (cons? V12252) (= () (tl V12252))) (shen.arg->str (hd V12252) V12253)) ((cons? V12252) (@s (shen.arg->str (hd V12252) V12253) (@s " " (shen.iter-list (tl V12252) V12253 (- V12254 1))))) (true (@s "|" (@s " " (shen.arg->str V12252 V12253))))))

(defun shen.str->str (V12257 V12258) (cond ((= shen.a V12258) V12257) (true (@s (n->string 34) (@s V12257 (n->string 34))))))

(defun shen.vector->str (V12259 V12260) (if (shen.print-vector? V12259) ((fn (<-address V12259 0)) V12259) (if (vector? V12259) (@s "<" (@s (shen.iter-vector V12259 1 V12260 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V12259 0 V12260 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V12261) (let W12262 (<-address V12261 0) (if (= W12262 shen.tuple) true (if (= W12262 shen.pvar) true (if (not (number? W12262)) (shen.fbound? W12262) false)))))

(defun shen.fbound? (V12263) (not (= (arity V12263) -1)))

(defun shen.tuple (V12264) (cn "(@p " (shen.app (<-address V12264 1) (cn " " (shen.app (<-address V12264 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V12271 V12272 V12273 V12274) (cond ((= 0 V12274) "... etc") (true (let W12275 (trap-error (<-address V12271 V12272) (lambda Z12276 shen.out-of-bounds)) (let W12277 (trap-error (<-address V12271 (+ V12272 1)) (lambda Z12278 shen.out-of-bounds)) (if (= W12275 shen.out-of-bounds) "" (if (= W12277 shen.out-of-bounds) (shen.arg->str W12275 V12273) (@s (shen.arg->str W12275 V12273) (@s " " (shen.iter-vector V12271 (+ V12272 1) V12273 (- V12274 1)))))))))))

(defun shen.atom->str (V12279) (trap-error (str V12279) (lambda Z12280 (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V12281) (or (empty? V12281) (cons? V12281)))

