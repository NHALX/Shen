(defun shen.compile-prolog (V7255 V7256) (compile (lambda X (shen.<defprolog> X)) (cons V7255 V7256)))

(defun dynamic (V7257) (set shen.*dynamic* (cons V7257 (value shen.*dynamic*))))

(defun shen.<defprolog> (V7258) (let Result (if (shen.non-empty-stream? V7258) (let F (shen.hds V7258) (let News6997 (shen.tls V7258) (let Parseshen.<clauses> (shen.<clauses> News6997) (if (shen.parse-failure? Parseshen.<clauses>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<clauses>) (let Arity (shen.prolog-arity-check F (shen.<-out Parseshen.<clauses>)) (let LeftLinear (map (lambda X (shen.linearise-clause X)) (shen.<-out Parseshen.<clauses>)) (let Parameters (shen.parameters Arity) (let Insert (if (shen.dynamic? F) (append (shen.clauseA F Parameters) (append LeftLinear (shen.clauseZ F Parameters))) LeftLinear) (shen.horn-clause-procedure F Insert)))))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.dynamic? (V7259) (element? V7259 (value shen.*dynamic*)))

(defun shen.clauseA (V7260 V7261) (let FA (concat V7260 A) (let Body (cons (cons when (cons (cons shen.defined? (cons FA ())) ())) (cons (cons FA V7261) ())) (let Clause (cons V7261 (cons Body ())) (cons Clause ())))))

(defun shen.clauseZ (V7262 V7263) (let FZ (concat V7262 Z) (let Body (cons (cons when (cons (cons shen.defined? (cons FZ ())) ())) (cons (cons FZ V7263) ())) (let Clause (cons V7263 (cons Body ())) (cons Clause ())))))

(defun shen.defined? (V7264) (not (= (arity V7264) -1)))

(defun asserta (V7265 V7266 V7267 V7268 V7269) (if (shen.unlocked? V7267) (do (shen.incinfs) (shen.execute (shen.asserta-h (shen.deref V7265 V7266) (shen.deref V7265 V7266)) V7266 V7267 V7268 V7269)) false))

(defun shen.asserta-h (V7272 V7273) (cond ((and (cons? V7272) (and (cons? (hd V7272)) (and (cons? (tl V7272)) (and (= <-- (hd (tl V7272))) (not (shen.defined? (hd (hd V7272)))))))) (shen.dynamically-assert V7272 V7273)) ((and (cons? V7273) (and (cons? (hd V7273)) (and (cons? (tl V7273)) (= <-- (hd (tl V7273)))))) (let FA (concat (hd (hd V7273)) A) (if (shen.defined? (hd (hd V7273))) (shen.asserta-h V7272 (cons (cons FA (tl (hd V7273))) (tl V7273))) (shen.dynamically-assert V7272 V7273)))) (true (simple-error (cn "
non-clause " (shen.app V7272 " given to asserta
" shen.r))))))

(defun shen.dynamically-assert (V7274 V7275) (cond ((and (cons? V7275) (and (cons? (hd V7275)) (and (cons? (tl V7275)) (= <-- (hd (tl V7275)))))) (let MakeFDynamic (dynamic (hd (hd V7275))) (let UnretractedF (shen.flag-unretracted (hd (hd V7275))) (let AssociateClause (put V7274 shen.procedure-name (hd (hd V7275)) (value *property-vector*)) (eval (cons defprolog (cons (hd (hd V7275)) (append (tl (hd V7275)) (append (cons <-- ()) (append (cons (cons when (cons (cons shen.unretracted? (cons (hd (hd V7275)) ())) ())) ()) (tl (tl V7275)))))))))))) (true (shen.f-error shen.dynamically-assert))))

(defun assertz (V7276 V7277 V7278 V7279 V7280) (if (shen.unlocked? V7278) (do (shen.incinfs) (shen.execute (shen.assertz-h (shen.deref V7276 V7277) (shen.deref V7276 V7277)) V7277 V7278 V7279 V7280)) false))

(defun shen.execute (V7281 V7282 V7283 V7284 V7285) (if (shen.unlocked? V7283) (do (shen.incinfs) (thaw V7285)) false))

(defun shen.assertz-h (V7288 V7289) (cond ((and (cons? V7288) (and (cons? (hd V7288)) (and (cons? (tl V7288)) (and (= <-- (hd (tl V7288))) (not (shen.defined? (hd (hd V7288)))))))) (shen.dynamically-assert V7288 V7289)) ((and (cons? V7289) (and (cons? (hd V7289)) (and (cons? (tl V7289)) (= <-- (hd (tl V7289)))))) (let FZ (concat (hd (hd V7289)) Z) (if (shen.defined? (hd (hd V7289))) (shen.assertz-h V7288 (cons (cons FZ (tl (hd V7289))) (tl V7289))) (shen.dynamically-assert V7288 V7289)))) (true (simple-error (cn "
non-clause " (shen.app V7288 " given to assertz
" shen.r))))))

(defun shen.flag-unretracted (V7290) (put V7290 shen.retracted false (value *property-vector*)))

(defun shen.flag-retracted (V7291) (put V7291 shen.retracted true (value *property-vector*)))

(defun shen.unretracted? (V7292) (trap-error (not (get V7292 shen.retracted (value *property-vector*))) (lambda E true)))

(defun retract (V7293 V7294 V7295 V7296 V7297) (if (shen.unlocked? V7295) (do (shen.incinfs) (shen.execute (shen.retract-h (shen.deref V7293 V7294)) V7294 V7295 V7296 V7297)) false))

(defun shen.retract-h (V7298) (let F (trap-error (get V7298 shen.procedure-name (value *property-vector*)) (lambda E shen.skip)) (if (= F shen.skip) shen.skip (shen.flag-retracted F))))

(defun shen.prolog-arity-check (V7301 V7302) (cond ((and (cons? V7302) (and (cons? (hd V7302)) (and (cons? (tl (hd V7302))) (and (= () (tl (tl (hd V7302)))) (= () (tl V7302)))))) (length (hd (hd V7302)))) ((and (cons? V7302) (and (cons? (hd V7302)) (and (cons? (tl (hd V7302))) (= () (tl (tl (hd V7302))))))) (shen.pac-h V7301 (length (hd (hd V7302))) (tl V7302))) (true (shen.f-error shen.prolog-arity-check))))

(defun shen.pac-h (V7307 V7308 V7309) (cond ((= () V7309) V7308) ((and (cons? V7309) (cons? (hd V7309))) (if (= V7308 (length (hd (hd V7309)))) (shen.pac-h V7307 V7308 (tl V7309)) (simple-error (cn "arity error in prolog procedure " (shen.app V7307 "
" shen.a))))) (true (shen.f-error shen.pac-h))))

(defun shen.<clauses> (V7310) (let Result (let Parseshen.<clause> (shen.<clause> V7310) (if (shen.parse-failure? Parseshen.<clause>) (shen.parse-failure) (let Parseshen.<clauses> (shen.<clauses> Parseshen.<clause>) (if (shen.parse-failure? Parseshen.<clauses>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<clauses>) (cons (shen.<-out Parseshen.<clause>) (shen.<-out Parseshen.<clauses>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<!> (<!> V7310) (if (shen.parse-failure? Parse<!>) (shen.parse-failure) (shen.comb (shen.in-> Parse<!>) (if (empty? (shen.<-out Parse<!>)) () (simple-error (cn "Prolog syntax error here:
 " (shen.app (shen.<-out Parse<!>) "
 ..." shen.r))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.linearise-clause (V7311) (cond ((and (cons? V7311) (and (cons? (tl V7311)) (= () (tl (tl V7311))))) (shen.lch (shen.linearise (@p (hd V7311) (hd (tl V7311)))))) (true (shen.f-error shen.linearise-clause))))

(defun shen.lch (V7312) (cond ((tuple? V7312) (cons (fst V7312) (cons (shen.lchh (snd V7312)) ()))) (true (shen.f-error shen.lch))))

(defun shen.lchh (V7313) (cond ((and (cons? V7313) (and (= where (hd V7313)) (and (cons? (tl V7313)) (and (cons? (hd (tl V7313))) (and (= = (hd (hd (tl V7313)))) (and (cons? (tl (hd (tl V7313)))) (and (cons? (tl (tl (hd (tl V7313))))) (and (= () (tl (tl (tl (hd (tl V7313)))))) (and (cons? (tl (tl V7313))) (= () (tl (tl (tl V7313))))))))))))) (cons (cons (if (value shen.*occurs*) is! is) (tl (hd (tl V7313)))) (shen.lchh (hd (tl (tl V7313)))))) (true V7313)))

(defun shen.<clause> (V7314) (let Result (let Parseshen.<head> (shen.<head> V7314) (if (shen.parse-failure? Parseshen.<head>) (shen.parse-failure) (if (shen.=hd? Parseshen.<head> <--) (let News7024 (shen.tls Parseshen.<head>) (let Parseshen.<body> (shen.<body> News7024) (if (shen.parse-failure? Parseshen.<body>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<body>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (cons (shen.<-out Parseshen.<head>) (cons (shen.<-out Parseshen.<body>) ())))))))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<head> (V7315) (let Result (let Parseshen.<hterm> (shen.<hterm> V7315) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (let Parseshen.<head> (shen.<head> Parseshen.<hterm>) (if (shen.parse-failure? Parseshen.<head>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<head>) (cons (shen.<-out Parseshen.<hterm>) (shen.<-out Parseshen.<head>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V7315) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<hterm> (V7316) (let Result (if (shen.non-empty-stream? V7316) (let X (shen.hds V7316) (let News7027 (shen.tls V7316) (if (and (atom? X) (not (shen.prolog-keyword? X))) (shen.comb (shen.in-> News7027) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.non-empty-stream? V7316) (let X (shen.hds V7316) (let News7028 (shen.tls V7316) (if (= X (intern ":")) (shen.comb (shen.in-> News7028) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7316) (let SynCons (shen.comb (shen.hds V7316) (shen.<-out V7316)) (if (shen.=hd? SynCons cons) (let News7029 (shen.tls SynCons) (let Parseshen.<hterm1> (shen.<hterm1> News7029) (if (shen.parse-failure? Parseshen.<hterm1>) (shen.parse-failure) (let Parseshen.<hterm2> (shen.<hterm2> Parseshen.<hterm1>) (if (shen.parse-failure? Parseshen.<hterm2>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<hterm2>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7316)) (cons cons (cons (shen.<-out Parseshen.<hterm1>) (cons (shen.<-out Parseshen.<hterm2>) ()))))))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7316) (let SynCons (shen.comb (shen.hds V7316) (shen.<-out V7316)) (if (shen.=hd? SynCons +) (let News7030 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News7030) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<hterm>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7316)) (cons shen.+m (cons (shen.<-out Parseshen.<hterm>) ())))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7316) (let SynCons (shen.comb (shen.hds V7316) (shen.<-out V7316)) (if (shen.=hd? SynCons -) (let News7031 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News7031) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<hterm>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7316)) (cons shen.-m (cons (shen.<-out Parseshen.<hterm>) ())))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7316) (let SynCons (shen.comb (shen.hds V7316) (shen.<-out V7316)) (if (shen.=hd? SynCons mode) (let News7032 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News7032) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (if (shen.=hd? Parseshen.<hterm> +) (let News7033 (shen.tls Parseshen.<hterm>) (let Parseshen.<end> (shen.<end> News7033) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7316)) (cons shen.+m (cons (shen.<-out Parseshen.<hterm>) ())))))) (shen.parse-failure))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7316) (let SynCons (shen.comb (shen.hds V7316) (shen.<-out V7316)) (if (shen.=hd? SynCons mode) (let News7034 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News7034) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (if (shen.=hd? Parseshen.<hterm> -) (let News7035 (shen.tls Parseshen.<hterm>) (let Parseshen.<end> (shen.<end> News7035) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7316)) (cons shen.-m (cons (shen.<-out Parseshen.<hterm>) ())))))) (shen.parse-failure))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)) Result)) Result)) Result)) Result)))

(defun shen.prolog-keyword? (V7317) (element? V7317 (cons (intern ";") (cons <-- ()))))

(defun atom? (V7318) (or (symbol? V7318) (or (string? V7318) (or (boolean? V7318) (or (number? V7318) (empty? V7318))))))

(defun shen.<hterm1> (V7319) (let Result (let Parseshen.<hterm> (shen.<hterm> V7319) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<hterm>) (shen.<-out Parseshen.<hterm>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<hterm2> (V7320) (let Result (let Parseshen.<hterm> (shen.<hterm> V7320) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<hterm>) (shen.<-out Parseshen.<hterm>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<body> (V7321) (let Result (let Parseshen.<literal> (shen.<literal> V7321) (if (shen.parse-failure? Parseshen.<literal>) (shen.parse-failure) (let Parseshen.<body> (shen.<body> Parseshen.<literal>) (if (shen.parse-failure? Parseshen.<body>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<body>) (cons (shen.<-out Parseshen.<literal>) (shen.<-out Parseshen.<body>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V7321) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<literal> (V7322) (let Result (if (shen.=hd? V7322 !) (let News7040 (shen.tls V7322) (shen.comb (shen.in-> News7040) !)) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7322) (let SynCons (shen.comb (shen.hds V7322) (shen.<-out V7322)) (let Parseshen.<bterms> (shen.<bterms> SynCons) (if (shen.parse-failure? Parseshen.<bterms>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<bterms>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7322)) (shen.<-out Parseshen.<bterms>))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<bterms> (V7323) (let Result (let Parseshen.<bterm> (shen.<bterm> V7323) (if (shen.parse-failure? Parseshen.<bterm>) (shen.parse-failure) (let Parseshen.<bterms> (shen.<bterms> Parseshen.<bterm>) (if (shen.parse-failure? Parseshen.<bterms>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<bterms>) (cons (shen.<-out Parseshen.<bterm>) (shen.<-out Parseshen.<bterms>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V7323) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<bterm> (V7324) (let Result (let Parseshen.<wildcard> (shen.<wildcard> V7324) (if (shen.parse-failure? Parseshen.<wildcard>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<wildcard>) (shen.<-out Parseshen.<wildcard>)))) (if (shen.parse-failure? Result) (let Result (if (shen.non-empty-stream? V7324) (let X (shen.hds V7324) (let News7043 (shen.tls V7324) (if (atom? X) (shen.comb (shen.in-> News7043) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V7324) (let SynCons (shen.comb (shen.hds V7324) (shen.<-out V7324)) (let Parseshen.<bterms> (shen.<bterms> SynCons) (if (shen.parse-failure? Parseshen.<bterms>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<bterms>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7324)) (shen.<-out Parseshen.<bterms>))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)))

(defun shen.<wildcard> (V7325) (let Result (if (shen.non-empty-stream? V7325) (let X (shen.hds V7325) (let News7045 (shen.tls V7325) (if (= X _) (shen.comb (shen.in-> News7045) (gensym Y)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<sc> (V7326) (let Result (if (shen.non-empty-stream? V7326) (let X (shen.hds V7326) (let News7047 (shen.tls V7326) (if (shen.semicolon? X) (shen.comb (shen.in-> News7047) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.semicolon? (V7327) (= V7327 (intern ";")))

(defun shen.horn-clause-procedure (V7328 V7329) (let Bindings (gensym B) (let Lock (gensym L) (let Key (gensym K) (let Continuation (gensym C) (let Parameters (shen.prolog-parameters V7329) (let HasCut? (shen.hascut? V7329) (let FBody (shen.prolog-fbody V7329 Parameters Bindings Lock Key Continuation HasCut?) (let CutFBody (if HasCut? (cons let (cons Key (cons (cons + (cons Key (cons 1 ()))) (cons FBody ())))) FBody) (let Shen (cons define (cons V7328 (append Parameters (append (cons Bindings (cons Lock (cons Key (cons Continuation (cons -> ()))))) (cons CutFBody ()))))) Shen))))))))))

(defun shen.hascut? (V7332) (cond ((= ! V7332) true) ((cons? V7332) (or (shen.hascut? (hd V7332)) (shen.hascut? (tl V7332)))) (true false)))

(defun shen.prolog-parameters (V7337) (cond ((and (cons? V7337) (cons? (hd V7337))) (shen.parameters (length (hd (hd V7337))))) (true (shen.f-error shen.prolog-parameters))))

(defun shen.prolog-fbody (V7358 V7359 V7360 V7361 V7362 V7363 V7364) (cond ((and (= () V7358) (= true V7364)) (cons shen.unlock (cons V7361 (cons V7362 ())))) ((and (cons? V7358) (and (cons? (hd V7358)) (and (cons? (tl (hd V7358))) (and (= () (tl (tl (hd V7358)))) (and (= () (tl V7358)) (= false V7364)))))) (let Continue (shen.continue (hd (hd V7358)) (hd (tl (hd V7358))) V7360 V7361 V7362 V7363) (cons if (cons (cons shen.unlocked? (cons V7361 ())) (cons (shen.compile-head shen.+m (hd (hd V7358)) V7359 V7360 Continue) (cons false ())))))) ((and (cons? V7358) (and (cons? (hd V7358)) (and (cons? (tl (hd V7358))) (= () (tl (tl (hd V7358))))))) (let Case (gensym C) (let Continue (shen.continue (hd (hd V7358)) (hd (tl (hd V7358))) V7360 V7361 V7362 V7363) (cons let (cons Case (cons (cons if (cons (cons shen.unlocked? (cons V7361 ())) (cons (shen.compile-head shen.+m (hd (hd V7358)) V7359 V7360 Continue) (cons false ())))) (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons (shen.prolog-fbody (tl V7358) V7359 V7360 V7361 V7362 V7363 V7364) (cons Case ())))) ()))))))) (true (simple-error "implementation error in shen.prolog-fbody"))))

(defun shen.unlock (V7365 V7366) (if (and (shen.locked? V7365) (shen.fits? V7366 V7365)) (shen.openlock V7365) false))

(defun shen.locked? (V7367) (not (shen.unlocked? V7367)))

(defun shen.unlocked? (V7368) (<-address V7368 1))

(defun shen.openlock (V7369) (do (address-> V7369 1 true) false))

(defun shen.fits? (V7370 V7371) (= V7370 (<-address V7371 2)))

(defun shen.cut (V7374 V7375 V7376 V7377) (let Compute (thaw V7377) (if (and (= Compute false) (shen.unlocked? V7375)) (shen.lock V7376 V7375) Compute)))

(defun shen.lock (V7378 V7379) (let SetLock (address-> V7379 1 false) (let SetKey (address-> V7379 2 V7378) false)))

(defun shen.continue (V7380 V7381 V7382 V7383 V7384 V7385) (let HVs (shen.extract-vars V7380) (let BVs (shen.extract-free-vars V7381) (let Free (difference BVs HVs) (let ContinuationCode (cons do (cons (cons shen.incinfs ()) (cons (shen.compile-body V7381 V7382 V7383 V7384 V7385) ()))) (shen.stpart Free ContinuationCode V7382))))))

(defun shen.extract-free-vars (V7388) (cond ((and (cons? V7388) (and (= lambda (hd V7388)) (and (cons? (tl V7388)) (and (cons? (tl (tl V7388))) (= () (tl (tl (tl V7388)))))))) (remove (hd (tl V7388)) (shen.extract-free-vars (hd (tl (tl V7388)))))) ((cons? V7388) (union (shen.extract-free-vars (hd V7388)) (shen.extract-free-vars (tl V7388)))) ((variable? V7388) (cons V7388 ())) (true ())))

(defun shen.compile-body (V7405 V7406 V7407 V7408 V7409) (cond ((= () V7405) (cons thaw (cons V7409 ()))) ((and (cons? V7405) (= ! (hd V7405))) (shen.compile-body (cons (cons shen.cut ()) (tl V7405)) V7406 V7407 V7408 V7409)) ((and (cons? V7405) (= () (tl V7405))) (append (shen.deref-calls (hd V7405) V7406) (cons V7406 (cons V7407 (cons V7408 (cons V7409 ())))))) ((cons? V7405) (let P* (shen.deref-calls (hd V7405) V7406) (append P* (cons V7406 (cons V7407 (cons V7408 (cons (shen.freeze-literals (tl V7405) V7406 V7407 V7408 V7409) ()))))))) (true (simple-error "implementation error in shen.compile-fbody"))))

(defun shen.freeze-literals (V7426 V7427 V7428 V7429 V7430) (cond ((= () V7426) V7430) ((and (cons? V7426) (= ! (hd V7426))) (shen.freeze-literals (cons (cons shen.cut ()) (tl V7426)) V7427 V7428 V7429 V7430)) ((cons? V7426) (let P* (shen.deref-calls (hd V7426) V7427) (cons freeze (cons (append P* (cons V7427 (cons V7428 (cons V7429 (cons (shen.freeze-literals (tl V7426) V7427 V7428 V7429 V7430) ()))))) ())))) (true (simple-error "implementation error in shen.freeze-literals"))))

(defun shen.deref-calls (V7435 V7436) (cond ((and (cons? V7435) (= fork (hd V7435))) (cons fork (cons (shen.deref-forked-literals (tl V7435) V7436) ()))) ((cons? V7435) (cons (hd V7435) (map (lambda Y (shen.function-calls Y V7436)) (tl V7435)))) (true (simple-error "implementation error in shen.deref-calls"))))

(defun shen.deref-forked-literals (V7443 V7444) (cond ((= () V7443) ()) ((cons? V7443) (cons cons (cons (shen.deref-calls (hd V7443) V7444) (cons (shen.deref-forked-literals (tl V7443) V7444) ())))) (true (simple-error "fork requires a list of literals
"))))

(defun shen.function-calls (V7447 V7448) (cond ((and (cons? V7447) (and (= cons (hd V7447)) (and (cons? (tl V7447)) (and (cons? (tl (tl V7447))) (= () (tl (tl (tl V7447)))))))) (cons cons (cons (shen.function-calls (hd (tl V7447)) V7448) (cons (shen.function-calls (hd (tl (tl V7447))) V7448) ())))) ((cons? V7447) (shen.deref-terms V7447 V7448 ())) (true V7447)))

(defun shen.deref-terms (V7457 V7458 V7459) (cond ((and (cons? V7457) (and (= 0 (hd V7457)) (and (cons? (tl V7457)) (= () (tl (tl V7457)))))) (if (variable? (hd (tl V7457))) (hd (tl V7457)) (simple-error (cn "attempt to optimise a non-variable " (shen.app (hd (tl V7457)) "
" shen.s))))) ((and (cons? V7457) (and (= 1 (hd V7457)) (and (cons? (tl V7457)) (= () (tl (tl V7457)))))) (if (variable? (hd (tl V7457))) (cons shen.lazyderef (cons (hd (tl V7457)) (cons V7458 ()))) (simple-error (cn "attempt to optimise a non-variable " (shen.app (hd (tl V7457)) "
" shen.s))))) ((and (not (element? V7457 V7459)) (variable? V7457)) (cons shen.deref (cons V7457 (cons V7458 ())))) ((and (cons? V7457) (and (= lambda (hd V7457)) (and (cons? (tl V7457)) (and (cons? (tl (tl V7457))) (= () (tl (tl (tl V7457)))))))) (cons lambda (cons (hd (tl V7457)) (cons (shen.deref-terms (hd (tl (tl V7457))) V7458 (cons (hd (tl V7457)) V7459)) ())))) ((cons? V7457) (map (lambda Z (shen.deref-terms Z V7458 V7459)) V7457)) (true V7457)))

(defun shen.compile-head (V7477 V7478 V7479 V7480 V7481) (cond ((and (= () V7478) (= () V7479)) V7481) ((and (cons? V7478) (and (cons? (hd V7478)) (and (= shen.+m (hd (hd V7478))) (and (cons? (tl (hd V7478))) (= () (tl (tl (hd V7478)))))))) (shen.compile-head V7477 (cons shen.+m (cons (hd (tl (hd V7478))) (cons V7477 (tl V7478)))) V7479 V7480 V7481)) ((and (cons? V7478) (and (cons? (hd V7478)) (and (= shen.-m (hd (hd V7478))) (and (cons? (tl (hd V7478))) (= () (tl (tl (hd V7478)))))))) (shen.compile-head V7477 (cons shen.-m (cons (hd (tl (hd V7478))) (cons V7477 (tl V7478)))) V7479 V7480 V7481)) ((and (cons? V7478) (= shen.-m (hd V7478))) (shen.compile-head shen.-m (tl V7478) V7479 V7480 V7481)) ((and (cons? V7478) (= shen.+m (hd V7478))) (shen.compile-head shen.+m (tl V7478) V7479 V7480 V7481)) ((and (cons? V7478) (and (cons? V7479) (shen.wildcard? (hd V7478)))) (shen.compile-head V7477 (tl V7478) (tl V7479) V7480 V7481)) ((and (cons? V7478) (variable? (hd V7478))) (shen.variable-case V7477 V7478 V7479 V7480 V7481)) ((and (= shen.-m V7477) (and (cons? V7478) (atom? (hd V7478)))) (shen.atom-case-minus V7478 V7479 V7480 V7481)) ((and (= shen.-m V7477) (and (cons? V7478) (and (cons? (hd V7478)) (and (= cons (hd (hd V7478))) (and (cons? (tl (hd V7478))) (and (cons? (tl (tl (hd V7478)))) (= () (tl (tl (tl (hd V7478))))))))))) (shen.cons-case-minus V7478 V7479 V7480 V7481)) ((and (= shen.+m V7477) (and (cons? V7478) (atom? (hd V7478)))) (shen.atom-case-plus V7478 V7479 V7480 V7481)) ((and (= shen.+m V7477) (and (cons? V7478) (and (cons? (hd V7478)) (and (= cons (hd (hd V7478))) (and (cons? (tl (hd V7478))) (and (cons? (tl (tl (hd V7478)))) (= () (tl (tl (tl (hd V7478))))))))))) (shen.cons-case-plus V7478 V7479 V7480 V7481)) (true (simple-error "implementation error in shen.compile-head"))))

(defun shen.variable-case (V7492 V7493 V7494 V7495 V7496) (cond ((and (cons? V7493) (cons? V7494)) (if (variable? (hd V7494)) (shen.compile-head V7492 (tl V7493) (tl V7494) V7495 (subst (hd V7494) (hd V7493) V7496)) (cons let (cons (hd V7493) (cons (hd V7494) (cons (shen.compile-head V7492 (tl V7493) (tl V7494) V7495 V7496) ())))))) (true (simple-error "implementation error in shen.variable-case"))))

(defun shen.atom-case-minus (V7505 V7506 V7507 V7508) (cond ((and (cons? V7505) (cons? V7506)) (let Tm (gensym Tm) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V7506) (cons V7507 ()))) (cons (cons if (cons (cons = (cons Tm (cons (hd V7505) ()))) (cons (shen.compile-head shen.-m (tl V7505) (tl V7506) V7507 V7508) (cons false ())))) ())))))) (true (simple-error "implementation error in shen.atom-case-minus"))))

(defun shen.cons-case-minus (V7517 V7518 V7519 V7520) (cond ((and (cons? V7517) (and (cons? (hd V7517)) (and (= cons (hd (hd V7517))) (and (cons? (tl (hd V7517))) (and (cons? (tl (tl (hd V7517)))) (and (= () (tl (tl (tl (hd V7517))))) (cons? V7518))))))) (let Tm (gensym Tm) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V7518) (cons V7519 ()))) (cons (cons if (cons (cons cons? (cons Tm ())) (cons (shen.compile-head shen.-m (cons (hd (tl (hd V7517))) (cons (hd (tl (tl (hd V7517)))) (tl V7517))) (cons (cons hd (cons Tm ())) (cons (cons tl (cons Tm ())) (tl V7518))) V7519 V7520) (cons false ())))) ())))))) (true (simple-error "implementation error in shen.cons-case-minus"))))

(defun shen.atom-case-plus (V7529 V7530 V7531 V7532) (cond ((and (cons? V7529) (cons? V7530)) (let Tm (gensym Tm) (let GoTo (gensym GoTo) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V7530) (cons V7531 ()))) (cons GoTo (cons (cons freeze (cons (shen.compile-head shen.+m (tl V7529) (tl V7530) V7531 V7532) ())) (cons (cons if (cons (cons = (cons Tm (cons (hd V7529) ()))) (cons (cons thaw (cons GoTo ())) (cons (cons if (cons (cons shen.pvar? (cons Tm ())) (cons (cons shen.bind! (cons Tm (cons (shen.demode (hd V7529)) (cons V7531 (cons GoTo ()))))) (cons false ())))) ())))) ()))))))))) (true (simple-error "implementation error in shen.atom-case-plus"))))

(defun shen.cons-case-plus (V7541 V7542 V7543 V7544) (cond ((and (cons? V7541) (and (cons? (hd V7541)) (and (= cons (hd (hd V7541))) (and (cons? (tl (hd V7541))) (and (cons? (tl (tl (hd V7541)))) (and (= () (tl (tl (tl (hd V7541))))) (cons? V7542))))))) (let Tm (gensym Tm) (let GoTo (gensym GoTo) (let Vars (shen.extract-vars (cons (hd (tl (hd V7541))) (hd (tl (tl (hd V7541)))))) (let Tame (shen.tame (hd V7541)) (let TVars (shen.extract-vars Tame) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V7542) (cons V7543 ()))) (cons GoTo (cons (shen.goto Vars (shen.compile-head shen.+m (tl V7541) (tl V7542) V7543 V7544)) (cons (cons if (cons (cons cons? (cons Tm ())) (cons (shen.compile-head shen.+m (tl (hd V7541)) (cons (cons hd (cons Tm ())) (cons (cons tl (cons Tm ())) ())) V7543 (shen.invoke GoTo Vars)) (cons (cons if (cons (cons shen.pvar? (cons Tm ())) (cons (shen.stpart TVars (cons shen.bind! (cons Tm (cons (shen.demode Tame) (cons V7543 (cons (cons freeze (cons (shen.invoke GoTo Vars) ())) ()))))) V7543) (cons false ())))) ())))) ())))))))))))) (true (simple-error "implementation error in shen.cons-case-plus"))))

(defun shen.demode (V7545) (cond ((and (cons? V7545) (and (= shen.+m (hd V7545)) (and (cons? (tl V7545)) (= () (tl (tl V7545)))))) (shen.demode (hd (tl V7545)))) ((and (cons? V7545) (and (= shen.-m (hd V7545)) (and (cons? (tl V7545)) (= () (tl (tl V7545)))))) (shen.demode (hd (tl V7545)))) ((cons? V7545) (map (lambda Z (shen.demode Z)) V7545)) (true V7545)))

(defun shen.tame (V7546) (cond ((shen.wildcard? V7546) (gensym Y)) ((cons? V7546) (map (lambda Z (shen.tame Z)) V7546)) (true V7546)))

(defun shen.goto (V7547 V7548) (cond ((= () V7547) (cons freeze (cons V7548 ()))) (true (shen.goto-h V7547 V7548))))

(defun shen.goto-h (V7549 V7550) (cond ((= () V7549) V7550) ((cons? V7549) (cons lambda (cons (hd V7549) (cons (shen.goto-h (tl V7549) V7550) ())))) (true (shen.f-error shen.goto-h))))

(defun shen.invoke (V7551 V7552) (cond ((= () V7552) (cons thaw (cons V7551 ()))) (true (cons V7551 V7552))))

(defun shen.wildcard? (V7553) (= V7553 _))

(defun shen.pvar? (V7554) (trap-error (and (absvector? V7554) (= (<-address V7554 0) shen.pvar)) (lambda E false)))

(defun shen.lazyderef (V7555 V7556) (if (shen.pvar? V7555) (let Value (<-address V7556 (<-address V7555 1)) (if (= Value shen.-null-) V7555 (shen.lazyderef Value V7556))) V7555))

(defun shen.deref (V7557 V7558) (cond ((cons? V7557) (cons (shen.deref (hd V7557) V7558) (shen.deref (tl V7557) V7558))) (true (if (shen.pvar? V7557) (let Value (<-address V7558 (<-address V7557 1)) (if (= Value shen.-null-) V7557 (shen.deref Value V7558))) V7557))))

(defun shen.bind! (V7559 V7560 V7561 V7562) (let Bind (shen.bindv V7559 V7560 V7561) (let Compute (thaw V7562) (if (= Compute false) (shen.unwind V7559 V7561 Compute) Compute))))

(defun shen.bindv (V7563 V7564 V7565) (address-> V7565 (<-address V7563 1) V7564))

(defun shen.unwind (V7566 V7567 V7568) (do (address-> V7567 (<-address V7566 1) shen.-null-) V7568))

(defun shen.stpart (V7577 V7578 V7579) (cond ((= () V7577) V7578) ((cons? V7577) (cons let (cons (hd V7577) (cons (cons shen.newpv (cons V7579 ())) (cons (cons shen.gc (cons V7579 (cons (shen.stpart (tl V7577) V7578 V7579) ()))) ()))))) (true (simple-error "implementation error in shen.stpart"))))

(defun shen.gc (V7580 V7581) (if (= V7581 false) (let N (shen.ticket-number V7580) (do (shen.decrement-ticket N V7580) V7581)) V7581))

(defun shen.decrement-ticket (V7582 V7583) (address-> V7583 1 (- V7582 1)))

(defun shen.newpv (V7584) (let N (shen.ticket-number V7584) (let NewBindings (shen.make-prolog-variable N) (let NextTicket (shen.nextticket V7584 N) NewBindings))))

(defun shen.ticket-number (V7585) (<-address V7585 1))

(defun shen.nextticket (V7586 V7587) (let NewVector (address-> V7586 V7587 shen.-null-) (address-> NewVector 1 (+ V7587 1))))

(defun shen.make-prolog-variable (V7588) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V7588))

(defun shen.pvar (V7589) (cn "Var" (shen.app (<-address V7589 1) "" shen.a)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.prolog-vector-size (V7590) (if (and (integer? V7590) (> V7590 0)) (set shen.*size-prolog-vector* V7590) (simple-error (cn "prolog vector size: size should be a positive integer; not " (shen.app V7590 "" shen.a)))))

(defun shen.lzy=! (V7602 V7603 V7604 V7605) (cond ((= V7602 V7603) (thaw V7605)) ((and (shen.pvar? V7602) (not (shen.occurs? V7602 (shen.deref V7603 V7604)))) (shen.bind! V7602 V7603 V7604 V7605)) ((and (shen.pvar? V7603) (not (shen.occurs? V7603 (shen.deref V7602 V7604)))) (shen.bind! V7603 V7602 V7604 V7605)) ((and (cons? V7602) (cons? V7603)) (shen.lzy=! (shen.lazyderef (hd V7602) V7604) (shen.lazyderef (hd V7603) V7604) V7604 (freeze (shen.lzy=! (shen.lazyderef (tl V7602) V7604) (shen.lazyderef (tl V7603) V7604) V7604 V7605)))) (true false)))

(defun shen.lzy= (V7617 V7618 V7619 V7620) (cond ((= V7617 V7618) (thaw V7620)) ((shen.pvar? V7617) (shen.bind! V7617 V7618 V7619 V7620)) ((shen.pvar? V7618) (shen.bind! V7618 V7617 V7619 V7620)) ((and (cons? V7617) (cons? V7618)) (shen.lzy= (shen.lazyderef (hd V7617) V7619) (shen.lazyderef (hd V7618) V7619) V7619 (freeze (shen.lzy= (shen.lazyderef (tl V7617) V7619) (shen.lazyderef (tl V7618) V7619) V7619 V7620)))) (true false)))

(defun shen.occurs? (V7626 V7627) (cond ((= V7626 V7627) true) ((cons? V7627) (or (shen.occurs? V7626 (hd V7627)) (shen.occurs? V7626 (tl V7627)))) (true false)))

(defun call (V7628 V7629 V7630 V7631 V7632) ((((V7628 V7629) V7630) V7631) V7632))

(defun return (V7639 V7640 V7641 V7642 V7643) (shen.deref V7639 V7640))

(defun when (V7650 V7651 V7652 V7653 V7654) (if V7650 (thaw V7654) false))

(defun is (V7655 V7656 V7657 V7658 V7659 V7660) (shen.lzy= (shen.lazyderef V7655 V7657) (shen.lazyderef V7656 V7657) V7657 V7660))

(defun is! (V7661 V7662 V7663 V7664 V7665 V7666) (shen.lzy=! (shen.lazyderef V7661 V7663) (shen.lazyderef V7662 V7663) V7663 V7666))

(defun bind (V7671 V7672 V7673 V7674 V7675 V7676) (shen.bind! V7671 V7672 V7673 V7676))

(defun var? (V7677 V7678 V7679 V7680 V7681) (if (shen.pvar? (shen.lazyderef V7677 V7678)) (thaw V7681) false))

(defun shen.print-prolog-vector (V7684) "|prolog vector|")

(defun fork (V7703 V7704 V7705 V7706 V7707) (cond ((= () V7703) false) ((cons? V7703) (let Case (((((hd V7703) V7704) V7705) V7706) V7707) (if (= Case false) (fork (tl V7703) V7704 V7705 V7706 V7707) Case))) (true (simple-error "fork expects a list of literals
"))))

(defun findall (V7708 V7709 V7710 V7711 V7712 V7713 V7714) (if (shen.unlocked? V7712) (let Store (shen.newpv V7711) (shen.gc V7711 (do (shen.incinfs) (is Store () V7711 V7712 V7713 (freeze (shen.findall-h V7708 V7709 V7710 Store V7711 V7712 V7713 V7714)))))) false))

(defun shen.findall-h (V7715 V7716 V7717 V7718 V7719 V7720 V7721 V7722) (let C7071 (if (shen.unlocked? V7720) (do (shen.incinfs) (call V7716 V7719 V7720 V7721 (freeze (shen.overbind V7715 V7718 V7719 V7720 V7721 V7722)))) false) (if (= C7071 false) (if (shen.unlocked? V7720) (do (shen.incinfs) (is! V7717 V7718 V7719 V7720 V7721 V7722)) false) C7071)))

(defun shen.overbind (V7729 V7730 V7731 V7732 V7733 V7734) (do (shen.bindv V7730 (cons (shen.deref V7729 V7731) (shen.lazyderef V7730 V7731)) V7731) false))

(defun occurs-check (V7737) (cond ((= + V7737) (set shen.*occurs* true)) ((= - V7737) (set shen.*occurs* false)) (true (simple-error "occurs-check expects a + or a -.
"))))

