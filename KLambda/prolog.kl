(defun shen.compile-prolog (V8043 V8044) (compile (lambda Z8045 (shen.<defprolog> Z8045)) (cons V8043 V8044)))

(defun dynamic (V8046) (set shen.*dynamic* (cons V8046 (value shen.*dynamic*))))

(defun shen.<defprolog> (V8047) (let W8048 (if (shen.non-empty-stream? V8047) (let W8049 (shen.hds V8047) (let W8050 (shen.tls V8047) (let W8051 (shen.<clauses> W8050) (if (shen.parse-failure? W8051) (shen.parse-failure) (shen.comb (shen.in-> W8051) (let W8052 (shen.prolog-arity-check W8049 (shen.<-out W8051)) (let W8053 (map (lambda Z8054 (shen.linearise-clause Z8054)) (shen.<-out W8051)) (let W8055 (shen.parameters W8052) (let W8056 (if (shen.dynamic? W8049) (append (shen.clauseA W8049 W8055) (append W8053 (shen.clauseZ W8049 W8055))) W8053) (shen.horn-clause-procedure W8049 W8056)))))))))) (shen.parse-failure)) (if (shen.parse-failure? W8048) (shen.parse-failure) W8048)))

(defun shen.dynamic? (V8057) (element? V8057 (value shen.*dynamic*)))

(defun shen.clauseA (V8058 V8059) (let W8060 (concat V8058 A) (let W8061 (cons (cons when (cons (cons shen.defined? (cons W8060 ())) ())) (cons (cons W8060 V8059) ())) (let W8062 (cons V8059 (cons W8061 ())) (cons W8062 ())))))

(defun shen.clauseZ (V8063 V8064) (let W8065 (concat V8063 Z) (let W8066 (cons (cons when (cons (cons shen.defined? (cons W8065 ())) ())) (cons (cons W8065 V8064) ())) (let W8067 (cons V8064 (cons W8066 ())) (cons W8067 ())))))

(defun shen.defined? (V8068) (not (= (arity V8068) -1)))

(defun asserta (V8069 V8070 V8071 V8072 V8073) (if (shen.unlocked? V8071) (do (shen.incinfs) (shen.execute (shen.asserta-h (shen.deref V8069 V8070) (shen.deref V8069 V8070)) V8070 V8071 V8072 V8073)) false))

(defun shen.asserta-h (V8076 V8077) (cond ((and (cons? V8076) (and (cons? (hd V8076)) (and (cons? (tl V8076)) (and (= <-- (hd (tl V8076))) (not (shen.defined? (hd (hd V8076)))))))) (shen.dynamically-assert V8076 V8077)) ((and (cons? V8077) (and (cons? (hd V8077)) (and (cons? (tl V8077)) (= <-- (hd (tl V8077)))))) (let W8078 (concat (hd (hd V8077)) A) (if (shen.defined? (hd (hd V8077))) (shen.asserta-h V8076 (cons (cons W8078 (tl (hd V8077))) (tl V8077))) (shen.dynamically-assert V8076 V8077)))) (true (simple-error (cn "
non-clause " (shen.app V8076 " given to asserta
" shen.r))))))

(defun shen.dynamically-assert (V8079 V8080) (cond ((and (cons? V8080) (and (cons? (hd V8080)) (and (cons? (tl V8080)) (= <-- (hd (tl V8080)))))) (let W8081 (dynamic (hd (hd V8080))) (let W8082 (shen.flag-unretracted (hd (hd V8080))) (let W8083 (put V8079 shen.procedure-name (hd (hd V8080)) (value *property-vector*)) (eval (cons defprolog (cons (hd (hd V8080)) (append (tl (hd V8080)) (append (cons <-- ()) (append (cons (cons when (cons (cons shen.unretracted? (cons (hd (hd V8080)) ())) ())) ()) (tl (tl V8080)))))))))))) (true (shen.f-error shen.dynamically-assert))))

(defun assertz (V8084 V8085 V8086 V8087 V8088) (if (shen.unlocked? V8086) (do (shen.incinfs) (shen.execute (shen.assertz-h (shen.deref V8084 V8085) (shen.deref V8084 V8085)) V8085 V8086 V8087 V8088)) false))

(defun shen.execute (V8089 V8090 V8091 V8092 V8093) (if (shen.unlocked? V8091) (do (shen.incinfs) (thaw V8093)) false))

(defun shen.assertz-h (V8096 V8097) (cond ((and (cons? V8096) (and (cons? (hd V8096)) (and (cons? (tl V8096)) (and (= <-- (hd (tl V8096))) (not (shen.defined? (hd (hd V8096)))))))) (shen.dynamically-assert V8096 V8097)) ((and (cons? V8097) (and (cons? (hd V8097)) (and (cons? (tl V8097)) (= <-- (hd (tl V8097)))))) (let W8098 (concat (hd (hd V8097)) Z) (if (shen.defined? (hd (hd V8097))) (shen.assertz-h V8096 (cons (cons W8098 (tl (hd V8097))) (tl V8097))) (shen.dynamically-assert V8096 V8097)))) (true (simple-error (cn "
non-clause " (shen.app V8096 " given to assertz
" shen.r))))))

(defun shen.flag-unretracted (V8099) (put V8099 shen.retracted false (value *property-vector*)))

(defun shen.flag-retracted (V8100) (put V8100 shen.retracted true (value *property-vector*)))

(defun shen.unretracted? (V8101) (trap-error (not (get V8101 shen.retracted (value *property-vector*))) (lambda Z8102 true)))

(defun retract (V8103 V8104 V8105 V8106 V8107) (if (shen.unlocked? V8105) (do (shen.incinfs) (shen.execute (shen.retract-h (shen.deref V8103 V8104)) V8104 V8105 V8106 V8107)) false))

(defun shen.retract-h (V8108) (let W8109 (trap-error (get V8108 shen.procedure-name (value *property-vector*)) (lambda Z8110 shen.skip)) (if (= W8109 shen.skip) shen.skip (shen.flag-retracted W8109))))

(defun shen.prolog-arity-check (V8113 V8114) (cond ((and (cons? V8114) (and (cons? (hd V8114)) (and (cons? (tl (hd V8114))) (and (= () (tl (tl (hd V8114)))) (= () (tl V8114)))))) (length (hd (hd V8114)))) ((and (cons? V8114) (and (cons? (hd V8114)) (and (cons? (tl (hd V8114))) (= () (tl (tl (hd V8114))))))) (shen.pac-h V8113 (length (hd (hd V8114))) (tl V8114))) (true (shen.f-error shen.prolog-arity-check))))

(defun shen.pac-h (V8119 V8120 V8121) (cond ((= () V8121) V8120) ((and (cons? V8121) (cons? (hd V8121))) (if (= V8120 (length (hd (hd V8121)))) (shen.pac-h V8119 V8120 (tl V8121)) (simple-error (cn "arity error in prolog procedure " (shen.app V8119 "
" shen.a))))) (true (shen.f-error shen.pac-h))))

(defun shen.<clauses> (V8122) (let W8123 (let W8124 (shen.<clause> V8122) (if (shen.parse-failure? W8124) (shen.parse-failure) (let W8125 (shen.<clauses> W8124) (if (shen.parse-failure? W8125) (shen.parse-failure) (shen.comb (shen.in-> W8125) (cons (shen.<-out W8124) (shen.<-out W8125))))))) (if (shen.parse-failure? W8123) (let W8126 (let W8127 (<!> V8122) (if (shen.parse-failure? W8127) (shen.parse-failure) (shen.comb (shen.in-> W8127) (if (empty? (shen.<-out W8127)) () (simple-error (cn "Prolog syntax error here:
 " (shen.app (shen.<-out W8127) "
 ..." shen.r))))))) (if (shen.parse-failure? W8126) (shen.parse-failure) W8126)) W8123)))

(defun shen.linearise-clause (V8128) (cond ((and (cons? V8128) (and (cons? (tl V8128)) (= () (tl (tl V8128))))) (shen.lch (shen.linearise (@p (hd V8128) (hd (tl V8128)))))) (true (shen.f-error shen.linearise-clause))))

(defun shen.lch (V8129) (cond ((tuple? V8129) (cons (fst V8129) (cons (shen.lchh (snd V8129)) ()))) (true (shen.f-error shen.lch))))

(defun shen.lchh (V8130) (cond ((and (cons? V8130) (and (= where (hd V8130)) (and (cons? (tl V8130)) (and (cons? (hd (tl V8130))) (and (= = (hd (hd (tl V8130)))) (and (cons? (tl (hd (tl V8130)))) (and (cons? (tl (tl (hd (tl V8130))))) (and (= () (tl (tl (tl (hd (tl V8130)))))) (and (cons? (tl (tl V8130))) (= () (tl (tl (tl V8130))))))))))))) (cons (cons (if (value shen.*occurs*) is! is) (tl (hd (tl V8130)))) (shen.lchh (hd (tl (tl V8130)))))) (true V8130)))

(defun shen.<clause> (V8131) (let W8132 (let W8133 (shen.<head> V8131) (if (shen.parse-failure? W8133) (shen.parse-failure) (if (shen.=hd? W8133 <--) (let W8134 (shen.tls W8133) (let W8135 (shen.<body> W8134) (if (shen.parse-failure? W8135) (shen.parse-failure) (let W8136 (shen.<sc> W8135) (if (shen.parse-failure? W8136) (shen.parse-failure) (shen.comb (shen.in-> W8136) (cons (shen.<-out W8133) (cons (shen.<-out W8135) ())))))))) (shen.parse-failure)))) (if (shen.parse-failure? W8132) (shen.parse-failure) W8132)))

(defun shen.<head> (V8137) (let W8138 (let W8139 (shen.<hterm> V8137) (if (shen.parse-failure? W8139) (shen.parse-failure) (let W8140 (shen.<head> W8139) (if (shen.parse-failure? W8140) (shen.parse-failure) (shen.comb (shen.in-> W8140) (cons (shen.<-out W8139) (shen.<-out W8140))))))) (if (shen.parse-failure? W8138) (let W8141 (let W8142 (<e> V8137) (if (shen.parse-failure? W8142) (shen.parse-failure) (shen.comb (shen.in-> W8142) ()))) (if (shen.parse-failure? W8141) (shen.parse-failure) W8141)) W8138)))

(defun shen.<hterm> (V8143) (let W8144 (if (shen.non-empty-stream? V8143) (let W8145 (shen.hds V8143) (let W8146 (shen.tls V8143) (if (and (atom? W8145) (not (shen.prolog-keyword? W8145))) (shen.comb (shen.in-> W8146) W8145) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W8144) (let W8147 (if (shen.non-empty-stream? V8143) (let W8148 (shen.hds V8143) (let W8149 (shen.tls V8143) (if (= W8148 (intern ":")) (shen.comb (shen.in-> W8149) W8148) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W8147) (let W8150 (if (shen.ccons? V8143) (let W8151 (shen.comb (shen.hds V8143) (shen.<-out V8143)) (if (shen.=hd? W8151 cons) (let W8152 (shen.tls W8151) (let W8153 (shen.<hterm1> W8152) (if (shen.parse-failure? W8153) (shen.parse-failure) (let W8154 (shen.<hterm2> W8153) (if (shen.parse-failure? W8154) (shen.parse-failure) (let W8155 (shen.<end> W8154) (if (shen.parse-failure? W8155) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V8143)) (cons cons (cons (shen.<-out W8153) (cons (shen.<-out W8154) ()))))))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W8150) (let W8156 (if (shen.ccons? V8143) (let W8157 (shen.comb (shen.hds V8143) (shen.<-out V8143)) (if (shen.=hd? W8157 +) (let W8158 (shen.tls W8157) (let W8159 (shen.<hterm> W8158) (if (shen.parse-failure? W8159) (shen.parse-failure) (let W8160 (shen.<end> W8159) (if (shen.parse-failure? W8160) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V8143)) (cons shen.+m (cons (shen.<-out W8159) ())))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W8156) (let W8161 (if (shen.ccons? V8143) (let W8162 (shen.comb (shen.hds V8143) (shen.<-out V8143)) (if (shen.=hd? W8162 -) (let W8163 (shen.tls W8162) (let W8164 (shen.<hterm> W8163) (if (shen.parse-failure? W8164) (shen.parse-failure) (let W8165 (shen.<end> W8164) (if (shen.parse-failure? W8165) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V8143)) (cons shen.-m (cons (shen.<-out W8164) ())))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W8161) (let W8166 (if (shen.ccons? V8143) (let W8167 (shen.comb (shen.hds V8143) (shen.<-out V8143)) (if (shen.=hd? W8167 mode) (let W8168 (shen.tls W8167) (let W8169 (shen.<hterm> W8168) (if (shen.parse-failure? W8169) (shen.parse-failure) (if (shen.=hd? W8169 +) (let W8170 (shen.tls W8169) (let W8171 (shen.<end> W8170) (if (shen.parse-failure? W8171) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V8143)) (cons shen.+m (cons (shen.<-out W8169) ())))))) (shen.parse-failure))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W8166) (let W8172 (if (shen.ccons? V8143) (let W8173 (shen.comb (shen.hds V8143) (shen.<-out V8143)) (if (shen.=hd? W8173 mode) (let W8174 (shen.tls W8173) (let W8175 (shen.<hterm> W8174) (if (shen.parse-failure? W8175) (shen.parse-failure) (if (shen.=hd? W8175 -) (let W8176 (shen.tls W8175) (let W8177 (shen.<end> W8176) (if (shen.parse-failure? W8177) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V8143)) (cons shen.-m (cons (shen.<-out W8175) ())))))) (shen.parse-failure))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W8172) (shen.parse-failure) W8172)) W8166)) W8161)) W8156)) W8150)) W8147)) W8144)))

(defun shen.prolog-keyword? (V8178) (element? V8178 (cons (intern ";") (cons <-- ()))))

(defun atom? (V8179) (or (symbol? V8179) (or (string? V8179) (or (boolean? V8179) (or (number? V8179) (empty? V8179))))))

(defun shen.<hterm1> (V8180) (let W8181 (let W8182 (shen.<hterm> V8180) (if (shen.parse-failure? W8182) (shen.parse-failure) (shen.comb (shen.in-> W8182) (shen.<-out W8182)))) (if (shen.parse-failure? W8181) (shen.parse-failure) W8181)))

(defun shen.<hterm2> (V8183) (let W8184 (let W8185 (shen.<hterm> V8183) (if (shen.parse-failure? W8185) (shen.parse-failure) (shen.comb (shen.in-> W8185) (shen.<-out W8185)))) (if (shen.parse-failure? W8184) (shen.parse-failure) W8184)))

(defun shen.<body> (V8186) (let W8187 (let W8188 (shen.<literal> V8186) (if (shen.parse-failure? W8188) (shen.parse-failure) (let W8189 (shen.<body> W8188) (if (shen.parse-failure? W8189) (shen.parse-failure) (shen.comb (shen.in-> W8189) (cons (shen.<-out W8188) (shen.<-out W8189))))))) (if (shen.parse-failure? W8187) (let W8190 (let W8191 (<e> V8186) (if (shen.parse-failure? W8191) (shen.parse-failure) (shen.comb (shen.in-> W8191) ()))) (if (shen.parse-failure? W8190) (shen.parse-failure) W8190)) W8187)))

(defun shen.<literal> (V8192) (let W8193 (if (shen.=hd? V8192 !) (let W8194 (shen.tls V8192) (shen.comb (shen.in-> W8194) !)) (shen.parse-failure)) (if (shen.parse-failure? W8193) (let W8195 (if (shen.ccons? V8192) (let W8196 (shen.comb (shen.hds V8192) (shen.<-out V8192)) (let W8197 (shen.<bterms> W8196) (if (shen.parse-failure? W8197) (shen.parse-failure) (let W8198 (shen.<end> W8197) (if (shen.parse-failure? W8198) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V8192)) (shen.<-out W8197))))))) (shen.parse-failure)) (if (shen.parse-failure? W8195) (shen.parse-failure) W8195)) W8193)))

(defun shen.<bterms> (V8199) (let W8200 (let W8201 (shen.<bterm> V8199) (if (shen.parse-failure? W8201) (shen.parse-failure) (let W8202 (shen.<bterms> W8201) (if (shen.parse-failure? W8202) (shen.parse-failure) (shen.comb (shen.in-> W8202) (cons (shen.<-out W8201) (shen.<-out W8202))))))) (if (shen.parse-failure? W8200) (let W8203 (let W8204 (<e> V8199) (if (shen.parse-failure? W8204) (shen.parse-failure) (shen.comb (shen.in-> W8204) ()))) (if (shen.parse-failure? W8203) (shen.parse-failure) W8203)) W8200)))

(defun shen.<bterm> (V8205) (let W8206 (let W8207 (shen.<wildcard> V8205) (if (shen.parse-failure? W8207) (shen.parse-failure) (shen.comb (shen.in-> W8207) (shen.<-out W8207)))) (if (shen.parse-failure? W8206) (let W8208 (if (shen.non-empty-stream? V8205) (let W8209 (shen.hds V8205) (let W8210 (shen.tls V8205) (if (atom? W8209) (shen.comb (shen.in-> W8210) W8209) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W8208) (let W8211 (if (shen.ccons? V8205) (let W8212 (shen.comb (shen.hds V8205) (shen.<-out V8205)) (let W8213 (shen.<bterms> W8212) (if (shen.parse-failure? W8213) (shen.parse-failure) (let W8214 (shen.<end> W8213) (if (shen.parse-failure? W8214) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V8205)) (shen.<-out W8213))))))) (shen.parse-failure)) (if (shen.parse-failure? W8211) (shen.parse-failure) W8211)) W8208)) W8206)))

(defun shen.<wildcard> (V8215) (let W8216 (if (shen.non-empty-stream? V8215) (let W8217 (shen.hds V8215) (let W8218 (shen.tls V8215) (if (= W8217 _) (shen.comb (shen.in-> W8218) (gensym Y)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W8216) (shen.parse-failure) W8216)))

(defun shen.<sc> (V8219) (let W8220 (if (shen.non-empty-stream? V8219) (let W8221 (shen.hds V8219) (let W8222 (shen.tls V8219) (if (shen.semicolon? W8221) (shen.comb (shen.in-> W8222) W8221) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W8220) (shen.parse-failure) W8220)))

(defun shen.semicolon? (V8223) (= V8223 (intern ";")))

(defun shen.horn-clause-procedure (V8224 V8225) (let W8226 (gensym B) (let W8227 (gensym L) (let W8228 (gensym K) (let W8229 (gensym C) (let W8230 (shen.prolog-parameters V8225) (let W8231 (shen.hascut? V8225) (let W8232 (shen.prolog-fbody V8225 W8230 W8226 W8227 W8228 W8229 W8231) (let W8233 (if W8231 (cons let (cons W8228 (cons (cons + (cons W8228 (cons 1 ()))) (cons W8232 ())))) W8232) (let W8234 (cons define (cons V8224 (append W8230 (append (cons W8226 (cons W8227 (cons W8228 (cons W8229 (cons -> ()))))) (cons W8233 ()))))) W8234))))))))))

(defun shen.hascut? (V8237) (cond ((= ! V8237) true) ((cons? V8237) (or (shen.hascut? (hd V8237)) (shen.hascut? (tl V8237)))) (true false)))

(defun shen.prolog-parameters (V8242) (cond ((and (cons? V8242) (cons? (hd V8242))) (shen.parameters (length (hd (hd V8242))))) (true (shen.f-error shen.prolog-parameters))))

(defun shen.prolog-fbody (V8263 V8264 V8265 V8266 V8267 V8268 V8269) (cond ((and (= () V8263) (= true V8269)) (cons shen.unlock (cons V8266 (cons V8267 ())))) ((and (cons? V8263) (and (cons? (hd V8263)) (and (cons? (tl (hd V8263))) (and (= () (tl (tl (hd V8263)))) (and (= () (tl V8263)) (= false V8269)))))) (let W8270 (shen.continue (hd (hd V8263)) (hd (tl (hd V8263))) V8265 V8266 V8267 V8268) (cons if (cons (cons shen.unlocked? (cons V8266 ())) (cons (shen.compile-head shen.+m (hd (hd V8263)) V8264 V8265 W8270) (cons false ())))))) ((and (cons? V8263) (and (cons? (hd V8263)) (and (cons? (tl (hd V8263))) (= () (tl (tl (hd V8263))))))) (let W8271 (gensym C) (let W8272 (shen.continue (hd (hd V8263)) (hd (tl (hd V8263))) V8265 V8266 V8267 V8268) (cons let (cons W8271 (cons (cons if (cons (cons shen.unlocked? (cons V8266 ())) (cons (shen.compile-head shen.+m (hd (hd V8263)) V8264 V8265 W8272) (cons false ())))) (cons (cons if (cons (cons = (cons W8271 (cons false ()))) (cons (shen.prolog-fbody (tl V8263) V8264 V8265 V8266 V8267 V8268 V8269) (cons W8271 ())))) ()))))))) (true (simple-error "implementation error in shen.prolog-fbody"))))

(defun shen.unlock (V8273 V8274) (if (and (shen.locked? V8273) (shen.fits? V8274 V8273)) (shen.openlock V8273) false))

(defun shen.locked? (V8275) (not (shen.unlocked? V8275)))

(defun shen.unlocked? (V8276) (<-address V8276 1))

(defun shen.openlock (V8277) (do (address-> V8277 1 true) false))

(defun shen.fits? (V8278 V8279) (= V8278 (<-address V8279 2)))

(defun shen.cut (V8282 V8283 V8284 V8285) (let W8286 (thaw V8285) (if (and (= W8286 false) (shen.unlocked? V8283)) (shen.lock V8284 V8283) W8286)))

(defun shen.lock (V8287 V8288) (let W8289 (address-> V8288 1 false) (let W8290 (address-> V8288 2 V8287) false)))

(defun shen.continue (V8291 V8292 V8293 V8294 V8295 V8296) (let W8297 (shen.extract-vars V8291) (let W8298 (shen.extract-free-vars V8292) (let W8299 (difference W8298 W8297) (let W8300 (cons do (cons (cons shen.incinfs ()) (cons (shen.compile-body V8292 V8293 V8294 V8295 V8296) ()))) (shen.stpart W8299 W8300 V8293))))))

(defun shen.extract-free-vars (V8303) (cond ((and (cons? V8303) (and (= lambda (hd V8303)) (and (cons? (tl V8303)) (and (cons? (tl (tl V8303))) (= () (tl (tl (tl V8303)))))))) (remove (hd (tl V8303)) (shen.extract-free-vars (hd (tl (tl V8303)))))) ((cons? V8303) (union (shen.extract-free-vars (hd V8303)) (shen.extract-free-vars (tl V8303)))) ((variable? V8303) (cons V8303 ())) (true ())))

(defun shen.compile-body (V8320 V8321 V8322 V8323 V8324) (cond ((= () V8320) (cons thaw (cons V8324 ()))) ((and (cons? V8320) (= ! (hd V8320))) (shen.compile-body (cons (cons shen.cut ()) (tl V8320)) V8321 V8322 V8323 V8324)) ((and (cons? V8320) (= () (tl V8320))) (append (shen.deref-calls (hd V8320) V8321) (cons V8321 (cons V8322 (cons V8323 (cons V8324 ())))))) ((cons? V8320) (let W8325 (shen.deref-calls (hd V8320) V8321) (append W8325 (cons V8321 (cons V8322 (cons V8323 (cons (shen.freeze-literals (tl V8320) V8321 V8322 V8323 V8324) ()))))))) (true (simple-error "implementation error in shen.compile-fbody"))))

(defun shen.freeze-literals (V8342 V8343 V8344 V8345 V8346) (cond ((= () V8342) V8346) ((and (cons? V8342) (= ! (hd V8342))) (shen.freeze-literals (cons (cons shen.cut ()) (tl V8342)) V8343 V8344 V8345 V8346)) ((cons? V8342) (let W8347 (shen.deref-calls (hd V8342) V8343) (cons freeze (cons (append W8347 (cons V8343 (cons V8344 (cons V8345 (cons (shen.freeze-literals (tl V8342) V8343 V8344 V8345 V8346) ()))))) ())))) (true (simple-error "implementation error in shen.freeze-literals"))))

(defun shen.deref-calls (V8352 V8353) (cond ((and (cons? V8352) (= fork (hd V8352))) (cons fork (cons (shen.deref-forked-literals (tl V8352) V8353) ()))) ((cons? V8352) (cons (hd V8352) (map (lambda Z8354 (shen.function-calls Z8354 V8353)) (tl V8352)))) (true (simple-error "implementation error in shen.deref-calls"))))

(defun shen.deref-forked-literals (V8361 V8362) (cond ((= () V8361) ()) ((cons? V8361) (cons cons (cons (shen.deref-calls (hd V8361) V8362) (cons (shen.deref-forked-literals (tl V8361) V8362) ())))) (true (simple-error "fork requires a list of literals
"))))

(defun shen.function-calls (V8365 V8366) (cond ((and (cons? V8365) (and (= cons (hd V8365)) (and (cons? (tl V8365)) (and (cons? (tl (tl V8365))) (= () (tl (tl (tl V8365)))))))) (cons cons (cons (shen.function-calls (hd (tl V8365)) V8366) (cons (shen.function-calls (hd (tl (tl V8365))) V8366) ())))) ((cons? V8365) (shen.deref-terms V8365 V8366 ())) (true V8365)))

(defun shen.deref-terms (V8375 V8376 V8377) (cond ((and (cons? V8375) (and (= 0 (hd V8375)) (and (cons? (tl V8375)) (= () (tl (tl V8375)))))) (if (variable? (hd (tl V8375))) (hd (tl V8375)) (simple-error (cn "attempt to optimise a non-variable " (shen.app (hd (tl V8375)) "
" shen.s))))) ((and (cons? V8375) (and (= 1 (hd V8375)) (and (cons? (tl V8375)) (= () (tl (tl V8375)))))) (if (variable? (hd (tl V8375))) (cons shen.lazyderef (cons (hd (tl V8375)) (cons V8376 ()))) (simple-error (cn "attempt to optimise a non-variable " (shen.app (hd (tl V8375)) "
" shen.s))))) ((and (not (element? V8375 V8377)) (variable? V8375)) (cons shen.deref (cons V8375 (cons V8376 ())))) ((and (cons? V8375) (and (= lambda (hd V8375)) (and (cons? (tl V8375)) (and (cons? (tl (tl V8375))) (= () (tl (tl (tl V8375)))))))) (cons lambda (cons (hd (tl V8375)) (cons (shen.deref-terms (hd (tl (tl V8375))) V8376 (cons (hd (tl V8375)) V8377)) ())))) ((cons? V8375) (map (lambda Z8378 (shen.deref-terms Z8378 V8376 V8377)) V8375)) (true V8375)))

(defun shen.compile-head (V8396 V8397 V8398 V8399 V8400) (cond ((and (= () V8397) (= () V8398)) V8400) ((and (cons? V8397) (and (cons? (hd V8397)) (and (= shen.+m (hd (hd V8397))) (and (cons? (tl (hd V8397))) (= () (tl (tl (hd V8397)))))))) (shen.compile-head V8396 (cons shen.+m (cons (hd (tl (hd V8397))) (cons V8396 (tl V8397)))) V8398 V8399 V8400)) ((and (cons? V8397) (and (cons? (hd V8397)) (and (= shen.-m (hd (hd V8397))) (and (cons? (tl (hd V8397))) (= () (tl (tl (hd V8397)))))))) (shen.compile-head V8396 (cons shen.-m (cons (hd (tl (hd V8397))) (cons V8396 (tl V8397)))) V8398 V8399 V8400)) ((and (cons? V8397) (= shen.-m (hd V8397))) (shen.compile-head shen.-m (tl V8397) V8398 V8399 V8400)) ((and (cons? V8397) (= shen.+m (hd V8397))) (shen.compile-head shen.+m (tl V8397) V8398 V8399 V8400)) ((and (cons? V8397) (and (cons? V8398) (shen.wildcard? (hd V8397)))) (shen.compile-head V8396 (tl V8397) (tl V8398) V8399 V8400)) ((and (cons? V8397) (variable? (hd V8397))) (shen.variable-case V8396 V8397 V8398 V8399 V8400)) ((and (= shen.-m V8396) (and (cons? V8397) (atom? (hd V8397)))) (shen.atom-case-minus V8397 V8398 V8399 V8400)) ((and (= shen.-m V8396) (and (cons? V8397) (and (cons? (hd V8397)) (and (= cons (hd (hd V8397))) (and (cons? (tl (hd V8397))) (and (cons? (tl (tl (hd V8397)))) (= () (tl (tl (tl (hd V8397))))))))))) (shen.cons-case-minus V8397 V8398 V8399 V8400)) ((and (= shen.+m V8396) (and (cons? V8397) (atom? (hd V8397)))) (shen.atom-case-plus V8397 V8398 V8399 V8400)) ((and (= shen.+m V8396) (and (cons? V8397) (and (cons? (hd V8397)) (and (= cons (hd (hd V8397))) (and (cons? (tl (hd V8397))) (and (cons? (tl (tl (hd V8397)))) (= () (tl (tl (tl (hd V8397))))))))))) (shen.cons-case-plus V8397 V8398 V8399 V8400)) (true (simple-error "implementation error in shen.compile-head"))))

(defun shen.variable-case (V8411 V8412 V8413 V8414 V8415) (cond ((and (cons? V8412) (cons? V8413)) (if (variable? (hd V8413)) (shen.compile-head V8411 (tl V8412) (tl V8413) V8414 (subst (hd V8413) (hd V8412) V8415)) (cons let (cons (hd V8412) (cons (hd V8413) (cons (shen.compile-head V8411 (tl V8412) (tl V8413) V8414 V8415) ())))))) (true (simple-error "implementation error in shen.variable-case"))))

(defun shen.atom-case-minus (V8424 V8425 V8426 V8427) (cond ((and (cons? V8424) (cons? V8425)) (let W8428 (gensym Tm) (cons let (cons W8428 (cons (cons shen.lazyderef (cons (hd V8425) (cons V8426 ()))) (cons (cons if (cons (cons = (cons W8428 (cons (hd V8424) ()))) (cons (shen.compile-head shen.-m (tl V8424) (tl V8425) V8426 V8427) (cons false ())))) ())))))) (true (simple-error "implementation error in shen.atom-case-minus"))))

(defun shen.cons-case-minus (V8437 V8438 V8439 V8440) (cond ((and (cons? V8437) (and (cons? (hd V8437)) (and (= cons (hd (hd V8437))) (and (cons? (tl (hd V8437))) (and (cons? (tl (tl (hd V8437)))) (and (= () (tl (tl (tl (hd V8437))))) (cons? V8438))))))) (let W8441 (gensym Tm) (cons let (cons W8441 (cons (cons shen.lazyderef (cons (hd V8438) (cons V8439 ()))) (cons (cons if (cons (cons cons? (cons W8441 ())) (cons (shen.compile-head shen.-m (cons (hd (tl (hd V8437))) (cons (hd (tl (tl (hd V8437)))) (tl V8437))) (cons (cons hd (cons W8441 ())) (cons (cons tl (cons W8441 ())) (tl V8438))) V8439 V8440) (cons false ())))) ())))))) (true (simple-error "implementation error in shen.cons-case-minus"))))

(defun shen.atom-case-plus (V8450 V8451 V8452 V8453) (cond ((and (cons? V8450) (cons? V8451)) (let W8454 (gensym Tm) (let W8455 (gensym GoTo) (cons let (cons W8454 (cons (cons shen.lazyderef (cons (hd V8451) (cons V8452 ()))) (cons W8455 (cons (cons freeze (cons (shen.compile-head shen.+m (tl V8450) (tl V8451) V8452 V8453) ())) (cons (cons if (cons (cons = (cons W8454 (cons (hd V8450) ()))) (cons (cons thaw (cons W8455 ())) (cons (cons if (cons (cons shen.pvar? (cons W8454 ())) (cons (cons shen.bind! (cons W8454 (cons (shen.demode (hd V8450)) (cons V8452 (cons W8455 ()))))) (cons false ())))) ())))) ()))))))))) (true (simple-error "implementation error in shen.atom-case-plus"))))

(defun shen.cons-case-plus (V8464 V8465 V8466 V8467) (cond ((and (cons? V8464) (and (cons? (hd V8464)) (and (= cons (hd (hd V8464))) (and (cons? (tl (hd V8464))) (and (cons? (tl (tl (hd V8464)))) (and (= () (tl (tl (tl (hd V8464))))) (cons? V8465))))))) (let W8468 (gensym Tm) (let W8469 (gensym GoTo) (let W8470 (shen.extract-vars (cons (hd (tl (hd V8464))) (hd (tl (tl (hd V8464)))))) (let W8471 (shen.tame (hd V8464)) (let W8472 (shen.extract-vars W8471) (cons let (cons W8468 (cons (cons shen.lazyderef (cons (hd V8465) (cons V8466 ()))) (cons W8469 (cons (shen.goto W8470 (shen.compile-head shen.+m (tl V8464) (tl V8465) V8466 V8467)) (cons (cons if (cons (cons cons? (cons W8468 ())) (cons (shen.compile-head shen.+m (tl (hd V8464)) (cons (cons hd (cons W8468 ())) (cons (cons tl (cons W8468 ())) ())) V8466 (shen.invoke W8469 W8470)) (cons (cons if (cons (cons shen.pvar? (cons W8468 ())) (cons (shen.stpart W8472 (cons shen.bind! (cons W8468 (cons (shen.demode W8471) (cons V8466 (cons (cons freeze (cons (shen.invoke W8469 W8470) ())) ()))))) V8466) (cons false ())))) ())))) ())))))))))))) (true (simple-error "implementation error in shen.cons-case-plus"))))

(defun shen.demode (V8473) (cond ((and (cons? V8473) (and (= shen.+m (hd V8473)) (and (cons? (tl V8473)) (= () (tl (tl V8473)))))) (shen.demode (hd (tl V8473)))) ((and (cons? V8473) (and (= shen.-m (hd V8473)) (and (cons? (tl V8473)) (= () (tl (tl V8473)))))) (shen.demode (hd (tl V8473)))) ((cons? V8473) (map (lambda Z8474 (shen.demode Z8474)) V8473)) (true V8473)))

(defun shen.tame (V8475) (cond ((shen.wildcard? V8475) (gensym Y)) ((cons? V8475) (map (lambda Z8476 (shen.tame Z8476)) V8475)) (true V8475)))

(defun shen.goto (V8477 V8478) (cond ((= () V8477) (cons freeze (cons V8478 ()))) (true (shen.goto-h V8477 V8478))))

(defun shen.goto-h (V8479 V8480) (cond ((= () V8479) V8480) ((cons? V8479) (cons lambda (cons (hd V8479) (cons (shen.goto-h (tl V8479) V8480) ())))) (true (shen.f-error shen.goto-h))))

(defun shen.invoke (V8481 V8482) (cond ((= () V8482) (cons thaw (cons V8481 ()))) (true (cons V8481 V8482))))

(defun shen.wildcard? (V8483) (= V8483 _))

(defun shen.pvar? (V8484) (trap-error (and (absvector? V8484) (= (<-address V8484 0) shen.pvar)) (lambda Z8485 false)))

(defun shen.lazyderef (V8486 V8487) (if (shen.pvar? V8486) (let W8488 (<-address V8487 (<-address V8486 1)) (if (= W8488 shen.-null-) V8486 (shen.lazyderef W8488 V8487))) V8486))

(defun shen.deref (V8489 V8490) (cond ((cons? V8489) (cons (shen.deref (hd V8489) V8490) (shen.deref (tl V8489) V8490))) (true (if (shen.pvar? V8489) (let W8491 (<-address V8490 (<-address V8489 1)) (if (= W8491 shen.-null-) V8489 (shen.deref W8491 V8490))) V8489))))

(defun shen.bind! (V8492 V8493 V8494 V8495) (let W8496 (shen.bindv V8492 V8493 V8494) (let W8497 (thaw V8495) (if (= W8497 false) (shen.unwind V8492 V8494 W8497) W8497))))

(defun shen.bindv (V8498 V8499 V8500) (address-> V8500 (<-address V8498 1) V8499))

(defun shen.unwind (V8501 V8502 V8503) (do (address-> V8502 (<-address V8501 1) shen.-null-) V8503))

(defun shen.stpart (V8512 V8513 V8514) (cond ((= () V8512) V8513) ((cons? V8512) (cons let (cons (hd V8512) (cons (cons shen.newpv (cons V8514 ())) (cons (cons shen.gc (cons V8514 (cons (shen.stpart (tl V8512) V8513 V8514) ()))) ()))))) (true (simple-error "implementation error in shen.stpart"))))

(defun shen.gc (V8515 V8516) (if (= V8516 false) (let W8517 (shen.ticket-number V8515) (do (shen.decrement-ticket W8517 V8515) V8516)) V8516))

(defun shen.decrement-ticket (V8518 V8519) (address-> V8519 1 (- V8518 1)))

(defun shen.newpv (V8520) (let W8521 (shen.ticket-number V8520) (let W8522 (shen.make-prolog-variable W8521) (let W8523 (shen.nextticket V8520 W8521) W8522))))

(defun shen.ticket-number (V8524) (<-address V8524 1))

(defun shen.nextticket (V8525 V8526) (let W8527 (address-> V8525 V8526 shen.-null-) (address-> W8527 1 (+ V8526 1))))

(defun shen.make-prolog-variable (V8528) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V8528))

(defun shen.pvar (V8529) (cn "Var" (shen.app (<-address V8529 1) "" shen.a)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.prolog-vector-size (V8530) (if (and (integer? V8530) (> V8530 0)) (set shen.*size-prolog-vector* V8530) (simple-error (cn "prolog vector size: size should be a positive integer; not " (shen.app V8530 "" shen.a)))))

(defun shen.lzy=! (V8542 V8543 V8544 V8545) (cond ((= V8542 V8543) (thaw V8545)) ((and (shen.pvar? V8542) (not (shen.occurs? V8542 (shen.deref V8543 V8544)))) (shen.bind! V8542 V8543 V8544 V8545)) ((and (shen.pvar? V8543) (not (shen.occurs? V8543 (shen.deref V8542 V8544)))) (shen.bind! V8543 V8542 V8544 V8545)) ((and (cons? V8542) (cons? V8543)) (shen.lzy=! (shen.lazyderef (hd V8542) V8544) (shen.lazyderef (hd V8543) V8544) V8544 (freeze (shen.lzy=! (shen.lazyderef (tl V8542) V8544) (shen.lazyderef (tl V8543) V8544) V8544 V8545)))) (true false)))

(defun shen.lzy= (V8557 V8558 V8559 V8560) (cond ((= V8557 V8558) (thaw V8560)) ((shen.pvar? V8557) (shen.bind! V8557 V8558 V8559 V8560)) ((shen.pvar? V8558) (shen.bind! V8558 V8557 V8559 V8560)) ((and (cons? V8557) (cons? V8558)) (shen.lzy= (shen.lazyderef (hd V8557) V8559) (shen.lazyderef (hd V8558) V8559) V8559 (freeze (shen.lzy= (shen.lazyderef (tl V8557) V8559) (shen.lazyderef (tl V8558) V8559) V8559 V8560)))) (true false)))

(defun shen.occurs? (V8566 V8567) (cond ((= V8566 V8567) true) ((cons? V8567) (or (shen.occurs? V8566 (hd V8567)) (shen.occurs? V8566 (tl V8567)))) (true false)))

(defun call (V8568 V8569 V8570 V8571 V8572) ((((V8568 V8569) V8570) V8571) V8572))

(defun return (V8579 V8580 V8581 V8582 V8583) (shen.deref V8579 V8580))

(defun when (V8590 V8591 V8592 V8593 V8594) (if V8590 (thaw V8594) false))

(defun is (V8595 V8596 V8597 V8598 V8599 V8600) (shen.lzy= (shen.lazyderef V8595 V8597) (shen.lazyderef V8596 V8597) V8597 V8600))

(defun is! (V8601 V8602 V8603 V8604 V8605 V8606) (shen.lzy=! (shen.lazyderef V8601 V8603) (shen.lazyderef V8602 V8603) V8603 V8606))

(defun bind (V8611 V8612 V8613 V8614 V8615 V8616) (shen.bind! V8611 V8612 V8613 V8616))

(defun var? (V8617 V8618 V8619 V8620 V8621) (if (shen.pvar? (shen.lazyderef V8617 V8618)) (thaw V8621) false))

(defun shen.print-prolog-vector (V8624) "|prolog vector|")

(defun fork (V8643 V8644 V8645 V8646 V8647) (cond ((= () V8643) false) ((cons? V8643) (let W8648 (((((hd V8643) V8644) V8645) V8646) V8647) (if (= W8648 false) (fork (tl V8643) V8644 V8645 V8646 V8647) W8648))) (true (simple-error "fork expects a list of literals
"))))

(defun findall (V8649 V8650 V8651 V8652 V8653 V8654 V8655) (if (shen.unlocked? V8653) (let W8656 (shen.newpv V8652) (shen.gc V8652 (do (shen.incinfs) (is W8656 () V8652 V8653 V8654 (freeze (shen.findall-h V8649 V8650 V8651 W8656 V8652 V8653 V8654 V8655)))))) false))

(defun shen.findall-h (V8657 V8658 V8659 V8660 V8661 V8662 V8663 V8664) (let W8665 (if (shen.unlocked? V8662) (do (shen.incinfs) (call V8658 V8661 V8662 V8663 (freeze (shen.overbind V8657 V8660 V8661 V8662 V8663 V8664)))) false) (if (= W8665 false) (if (shen.unlocked? V8662) (do (shen.incinfs) (is! V8659 V8660 V8661 V8662 V8663 V8664)) false) W8665)))

(defun shen.overbind (V8672 V8673 V8674 V8675 V8676 V8677) (do (shen.bindv V8673 (cons (shen.deref V8672 V8674) (shen.lazyderef V8673 V8674)) V8674) false))

(defun occurs-check (V8680) (cond ((= + V8680) (set shen.*occurs* true)) ((= - V8680) (set shen.*occurs* false)) (true (simple-error "occurs-check expects a + or a -.
"))))

