(defun shen.typecheck (V9367 V9368) (let Vs (shen.extract-vars V9368) (let A* (shen.rectify-type V9368) (let Curried (shen.curry V9367) (((((lambda V8781 (lambda L8782 (lambda K8783 (lambda C8784 (let Out (shen.newpv V8781) (shen.gc V8781 (do (shen.incinfs) (shen.insert-prolog-variables (receive (shen.deref Vs V8781)) (receive (shen.deref A* V8781)) Out V8781 L8782 K8783 (freeze (shen.toplevel-forms (receive (shen.deref Curried V8781)) Out V8781 L8782 K8783 (freeze (return Out V8781 L8782 K8783 C8784)))))))))))) (shen.reset-prolog-vector)) (@v true (@v 0 (vector 0)))) 0) (freeze true))))))

(defun shen.insert-prolog-variables (V9369 V9370 V9371 V9372 V9373 V9374 V9375) (let C8793 (if (shen.unlocked? V9373) (let Tm8794 (shen.lazyderef V9369 V9372) (if (= Tm8794 ()) (do (shen.incinfs) (is! V9370 V9371 V9372 V9373 V9374 V9375)) false)) false) (if (= C8793 false) (if (shen.unlocked? V9373) (let Tm8795 (shen.lazyderef V9369 V9372) (if (cons? Tm8795) (let V (hd Tm8795) (let Vs (tl Tm8795) (let X (shen.newpv V9372) (shen.gc V9372 (do (shen.incinfs) (shen.insert-prolog-variables Vs (subst (shen.deref X V9372) V V9370) V9371 V9372 V9373 V9374 V9375)))))) false)) false) C8793)))

(defun shen.toplevel-forms (V9376 V9377 V9378 V9379 V9380 V9381) (let K8798 (+ V9380 1) (let C8802 (if (shen.unlocked? V9379) (let Tm8803 (shen.lazyderef V9376 V9378) (if (cons? Tm8803) (let Tm8804 (shen.lazyderef (hd Tm8803) V9378) (if (= Tm8804 define) (let Tm8805 (shen.lazyderef (tl Tm8803) V9378) (if (cons? Tm8805) (let F (hd Tm8805) (let X (tl Tm8805) (do (shen.incinfs) (when (shen.type-theory-enabled?) V9378 V9379 K8798 (freeze (shen.cut V9378 V9379 K8798 (freeze (shen.signal-def (value shen.*spy*) F V9378 V9379 K8798 (freeze (shen.t* (cons define (cons F X)) V9377 V9378 V9379 K8798 V9381)))))))))) false)) false)) false)) false) (if (= C8802 false) (let C8806 (if (shen.unlocked? V9379) (do (shen.incinfs) (shen.system-S (cons V9376 (cons (intern ":") (cons V9377 ()))) () V9378 V9379 K8798 V9381)) false) (if (= C8806 false) (shen.unlock V9379 K8798) C8806)) C8802))))

(defun shen.signal-def (V9382 V9383 V9384 V9385 V9386 V9387) (let C8813 (if (shen.unlocked? V9385) (let Tm8814 (shen.lazyderef V9382 V9384) (if (= Tm8814 false) (do (shen.incinfs) (thaw V9387)) false)) false) (if (= C8813 false) (if (shen.unlocked? V9385) (let Tm8815 (shen.lazyderef V9382 V9384) (if (= Tm8815 true) (let ShowF (shen.newpv V9384) (shen.gc V9384 (do (shen.incinfs) (is ShowF (pr (cn "
typechecking (fn " (shen.app (shen.deref V9383 V9384) ")
" shen.a)) (stoutput)) V9384 V9385 V9386 V9387)))) false)) false) C8813)))

(defun shen.rectify-type (V9388) (shen.demodulate (shen.curry-type V9388)))

(defun shen.demodulate (V9389) (trap-error (let Demod (shen.walk (lambda Y (shen.demod Y)) V9389) (if (= Demod V9389) V9389 (shen.demodulate Demod))) (lambda E V9389)))

(defun shen.curry-type (V9390) (cond ((and (cons? V9390) (and (cons? (tl V9390)) (and (= --> (hd (tl V9390))) (and (cons? (tl (tl V9390))) (and (cons? (tl (tl (tl V9390)))) (= --> (hd (tl (tl (tl V9390)))))))))) (shen.curry-type (cons (hd V9390) (cons --> (cons (tl (tl V9390)) ()))))) ((and (cons? V9390) (and (cons? (tl V9390)) (and (= ==> (hd (tl V9390))) (and (cons? (tl (tl V9390))) (= () (tl (tl (tl V9390)))))))) (shen.curry-type (cons (cons (hd V9390) (cons * (cons A ()))) (cons --> (cons (cons (cons vector (cons boolean ())) (cons --> (cons (cons (hd V9390) (cons * (tl (tl V9390)))) ()))) ()))))) ((and (cons? V9390) (and (cons? (tl V9390)) (and (= * (hd (tl V9390))) (and (cons? (tl (tl V9390))) (and (cons? (tl (tl (tl V9390)))) (= * (hd (tl (tl (tl V9390)))))))))) (shen.curry-type (cons (hd V9390) (cons * (cons (tl (tl V9390)) ()))))) ((cons? V9390) (map (lambda Z (shen.curry-type Z)) V9390)) (true V9390)))

(defun shen.curry (V9391) (cond ((and (cons? V9391) (and (= define (hd V9391)) (cons? (tl V9391)))) V9391) ((and (cons? V9391) (and (= type (hd V9391)) (and (cons? (tl V9391)) (and (cons? (tl (tl V9391))) (= () (tl (tl (tl V9391)))))))) (cons type (cons (shen.curry (hd (tl V9391))) (tl (tl V9391))))) ((and (cons? V9391) (and (= input+ (hd V9391)) (and (cons? (tl V9391)) (and (cons? (tl (tl V9391))) (= () (tl (tl (tl V9391)))))))) (cons input+ (cons (hd (tl V9391)) (cons (shen.curry (hd (tl (tl V9391)))) ())))) ((and (cons? V9391) (shen.special? (hd V9391))) (cons (hd V9391) (map (lambda Y (shen.curry Y)) (tl V9391)))) ((and (cons? V9391) (shen.extraspecial? (hd V9391))) V9391) ((and (cons? V9391) (and (cons? (tl V9391)) (cons? (tl (tl V9391))))) (shen.curry (cons (cons (hd V9391) (cons (hd (tl V9391)) ())) (tl (tl V9391))))) ((and (cons? V9391) (and (cons? (tl V9391)) (= () (tl (tl V9391))))) (cons (shen.curry (hd V9391)) (cons (shen.curry (hd (tl V9391))) ()))) (true V9391)))

(defun shen.special? (V9392) (element? V9392 (value shen.*special*)))

(defun shen.extraspecial? (V9393) (element? V9393 (value shen.*extraspecial*)))

(defun shen.system-S (V9394 V9395 V9396 V9397 V9398 V9399) (let K8818 (+ V9398 1) (let C8822 (if (shen.unlocked? V9397) (do (shen.incinfs) (when (shen.maxinfexceeded?) V9396 V9397 K8818 V9399)) false) (if (= C8822 false) (let C8823 (if (shen.unlocked? V9397) (let Tm8824 (shen.lazyderef V9394 V9396) (if (cons? Tm8824) (let X (hd Tm8824) (let Tm8825 (shen.lazyderef (tl Tm8824) V9396) (if (cons? Tm8825) (let Colon (hd Tm8825) (let Tm8826 (shen.lazyderef (tl Tm8825) V9396) (if (cons? Tm8826) (let A (hd Tm8826) (let Tm8827 (shen.lazyderef (tl Tm8826) V9396) (if (= Tm8827 ()) (do (shen.incinfs) (when (= (shen.deref Colon V9396) (intern ":")) V9396 V9397 K8818 (freeze (when (shen.type-theory-enabled?) V9396 V9397 K8818 (freeze (shen.cut V9396 V9397 K8818 (freeze (shen.system-S-h X A V9395 V9396 V9397 K8818 V9399)))))))) false))) false))) false))) false)) false) (if (= C8823 false) (let C8828 (if (shen.unlocked? V9397) (do (shen.incinfs) (when (value shen.*spy*) V9396 V9397 K8818 (freeze (shen.show V9394 V9395 V9396 V9397 K8818 V9399)))) false) (if (= C8828 false) (let C8829 (if (shen.unlocked? V9397) (do (shen.incinfs) (shen.search-user-datatypes V9394 V9395 (value shen.*datatypes*) V9396 V9397 K8818 V9399)) false) (if (= C8829 false) (shen.unlock V9397 K8818) C8829)) C8828)) C8823)) C8822))))

(defun shen.show (V9406 V9407 V9408 V9409 V9410 V9411) (do (shen.line) (do (shen.show-p (shen.deref V9406 V9408)) (do (nl 2) (do (shen.show-assumptions (shen.deref V9407 V9408) 1) (do (shen.pause-for-user) false))))))

(defun shen.line () (let Infs (inferences) (pr (cn "____________________________________________________________ " (shen.app Infs (cn " inference" (shen.app (if (= 1 Infs) "" "s") " 
?- " shen.a)) shen.a)) (stoutput))))

(defun shen.show-p (V9412) (cond ((and (cons? V9412) (and (cons? (tl V9412)) (and (cons? (tl (tl V9412))) (and (= () (tl (tl (tl V9412)))) (= (hd (tl V9412)) (intern ":")))))) (do (shen.prterm (hd V9412)) (do (pr " : " (stoutput)) (pr (shen.app (hd (tl (tl V9412))) "" shen.r) (stoutput))))) (true (shen.prterm V9412))))

(defun shen.prterm (V9413) (cond ((and (cons? V9413) (and (= cons (hd V9413)) (and (cons? (tl V9413)) (and (cons? (tl (tl V9413))) (= () (tl (tl (tl V9413)))))))) (do (pr "[" (stoutput)) (do (shen.prterm (hd (tl V9413))) (do (shen.prtl (hd (tl (tl V9413)))) (pr "]" (stoutput)))))) ((cons? V9413) (do (pr "(" (stoutput)) (do (shen.prterm (hd V9413)) (do (map (lambda Y (do (pr " " (stoutput)) (shen.prterm Y))) (tl V9413)) (pr ")" (stoutput)))))) (true (print V9413))))

(defun shen.prtl (V9414) (cond ((= () V9414) "") ((and (cons? V9414) (and (= cons (hd V9414)) (and (cons? (tl V9414)) (and (cons? (tl (tl V9414))) (= () (tl (tl (tl V9414)))))))) (do (pr " " (stoutput)) (do (shen.prterm (hd (tl V9414))) (shen.prtl (hd (tl (tl V9414))))))) (true (do (pr " | " (stoutput)) (shen.prterm V9414)))))

(defun shen.show-assumptions (V9421 V9422) (cond ((= () V9421) (pr "
> " (stoutput))) ((cons? V9421) (do (pr (shen.app V9422 ". " shen.a) (stoutput)) (do (shen.show-p (hd V9421)) (do (nl 1) (shen.show-assumptions (tl V9421) (+ V9422 1)))))) (true (simple-error "implementation error in shen.show-assumptions"))))

(defun shen.pause-for-user () (let Byte (read-byte (stinput)) (if (= Byte 94) (simple-error "input aborted
") (nl 1))))

(defun shen.type-theory-enabled? () (value shen.*shen-type-theory-enabled?*))

(defun shen.maxinfexceeded? () (if (> (inferences) (value shen.*maxinferences*)) (simple-error "maximum inferences exceeded") false))

(defun shen.system-S-h (V9423 V9424 V9425 V9426 V9427 V9428 V9429) (let K8833 (+ V9428 1) (let C8838 (if (shen.unlocked? V9427) (do (shen.incinfs) (when (value shen.*spy*) V9426 V9427 K8833 (freeze (shen.show (cons V9423 (cons (intern ":") (cons V9424 ()))) V9425 V9426 V9427 K8833 V9429)))) false) (if (= C8838 false) (let C8839 (if (shen.unlocked? V9427) (do (shen.incinfs) (when (not (cons? (shen.lazyderef V9423 V9426))) V9426 V9427 K8833 (freeze (shen.primitive V9423 V9424 V9426 V9427 K8833 V9429)))) false) (if (= C8839 false) (let C8840 (if (shen.unlocked? V9427) (do (shen.incinfs) (shen.by-hypothesis V9423 V9424 V9425 V9426 V9427 K8833 V9429)) false) (if (= C8840 false) (let C8841 (if (shen.unlocked? V9427) (let Tm8842 (shen.lazyderef V9423 V9426) (if (cons? Tm8842) (let F (hd Tm8842) (let Tm8843 (shen.lazyderef (tl Tm8842) V9426) (if (= Tm8843 ()) (do (shen.incinfs) (shen.lookupsig F (cons --> (cons V9424 ())) V9426 V9427 K8833 V9429)) false))) false)) false) (if (= C8841 false) (let C8844 (if (shen.unlocked? V9427) (let Tm8845 (shen.lazyderef V9423 V9426) (if (cons? Tm8845) (let Tm8846 (shen.lazyderef (hd Tm8845) V9426) (if (= Tm8846 fn) (let Tm8847 (shen.lazyderef (tl Tm8845) V9426) (if (cons? Tm8847) (let F (hd Tm8847) (let Tm8848 (shen.lazyderef (tl Tm8847) V9426) (if (= Tm8848 ()) (do (shen.incinfs) (shen.lookupsig F V9424 V9426 V9427 K8833 V9429)) false))) false)) false)) false)) false) (if (= C8844 false) (let C8849 (if (shen.unlocked? V9427) (let Tm8850 (shen.lazyderef V9423 V9426) (if (cons? Tm8850) (let F (hd Tm8850) (let Tm8851 (shen.lazyderef (tl Tm8850) V9426) (if (cons? Tm8851) (let X (hd Tm8851) (let Tm8852 (shen.lazyderef (tl Tm8851) V9426) (if (= Tm8852 ()) (let B (shen.newpv V9426) (shen.gc V9426 (do (shen.incinfs) (when (not (cons? (shen.lazyderef F V9426))) V9426 V9427 K8833 (freeze (shen.lookupsig F (cons B (cons --> (cons V9424 ()))) V9426 V9427 K8833 (freeze (shen.system-S-h X B V9425 V9426 V9427 K8833 V9429)))))))) false))) false))) false)) false) (if (= C8849 false) (let C8853 (if (shen.unlocked? V9427) (let Tm8854 (shen.lazyderef V9423 V9426) (if (cons? Tm8854) (let F (hd Tm8854) (let Tm8855 (shen.lazyderef (tl Tm8854) V9426) (if (cons? Tm8855) (let X (hd Tm8855) (let Tm8856 (shen.lazyderef (tl Tm8855) V9426) (if (= Tm8856 ()) (let B (shen.newpv V9426) (shen.gc V9426 (do (shen.incinfs) (shen.system-S-h F (cons B (cons --> (cons V9424 ()))) V9425 V9426 V9427 K8833 (freeze (shen.system-S-h X B V9425 V9426 V9427 K8833 V9429)))))) false))) false))) false)) false) (if (= C8853 false) (let C8857 (if (shen.unlocked? V9427) (let Tm8858 (shen.lazyderef V9423 V9426) (if (cons? Tm8858) (let Tm8859 (shen.lazyderef (hd Tm8858) V9426) (if (= Tm8859 cons) (let Tm8860 (shen.lazyderef (tl Tm8858) V9426) (if (cons? Tm8860) (let X (hd Tm8860) (let Tm8861 (shen.lazyderef (tl Tm8860) V9426) (if (cons? Tm8861) (let Y (hd Tm8861) (let Tm8862 (shen.lazyderef (tl Tm8861) V9426) (if (= Tm8862 ()) (let Tm8863 (shen.lazyderef V9424 V9426) (let GoTo8864 (lambda A (do (shen.incinfs) (shen.system-S-h X A V9425 V9426 V9427 K8833 (freeze (shen.system-S-h Y (cons list (cons A ())) V9425 V9426 V9427 K8833 V9429))))) (if (cons? Tm8863) (let Tm8865 (shen.lazyderef (hd Tm8863) V9426) (let GoTo8866 (freeze (let Tm8867 (shen.lazyderef (tl Tm8863) V9426) (let GoTo8868 (lambda A (GoTo8864 A)) (if (cons? Tm8867) (let A (hd Tm8867) (let Tm8869 (shen.lazyderef (tl Tm8867) V9426) (let GoTo8870 (freeze (GoTo8868 A)) (if (= Tm8869 ()) (thaw GoTo8870) (if (shen.pvar? Tm8869) (shen.bind! Tm8869 () V9426 GoTo8870) false))))) (if (shen.pvar? Tm8867) (let A (shen.newpv V9426) (shen.gc V9426 (shen.bind! Tm8867 (cons A ()) V9426 (freeze (GoTo8868 A))))) false))))) (if (= Tm8865 list) (thaw GoTo8866) (if (shen.pvar? Tm8865) (shen.bind! Tm8865 list V9426 GoTo8866) false)))) (if (shen.pvar? Tm8863) (let A (shen.newpv V9426) (shen.gc V9426 (shen.bind! Tm8863 (cons list (cons A ())) V9426 (freeze (GoTo8864 A))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8857 false) (let C8871 (if (shen.unlocked? V9427) (let Tm8872 (shen.lazyderef V9423 V9426) (if (cons? Tm8872) (let Tm8873 (shen.lazyderef (hd Tm8872) V9426) (if (= Tm8873 @p) (let Tm8874 (shen.lazyderef (tl Tm8872) V9426) (if (cons? Tm8874) (let X (hd Tm8874) (let Tm8875 (shen.lazyderef (tl Tm8874) V9426) (if (cons? Tm8875) (let Y (hd Tm8875) (let Tm8876 (shen.lazyderef (tl Tm8875) V9426) (if (= Tm8876 ()) (let Tm8877 (shen.lazyderef V9424 V9426) (let GoTo8878 (lambda A (lambda B (do (shen.incinfs) (shen.system-S-h X A V9425 V9426 V9427 K8833 (freeze (shen.system-S-h Y B V9425 V9426 V9427 K8833 V9429)))))) (if (cons? Tm8877) (let A (hd Tm8877) (let Tm8879 (shen.lazyderef (tl Tm8877) V9426) (let GoTo8880 (lambda B ((GoTo8878 A) B)) (if (cons? Tm8879) (let Tm8881 (shen.lazyderef (hd Tm8879) V9426) (let GoTo8882 (freeze (let Tm8883 (shen.lazyderef (tl Tm8879) V9426) (let GoTo8884 (lambda B (GoTo8880 B)) (if (cons? Tm8883) (let B (hd Tm8883) (let Tm8885 (shen.lazyderef (tl Tm8883) V9426) (let GoTo8886 (freeze (GoTo8884 B)) (if (= Tm8885 ()) (thaw GoTo8886) (if (shen.pvar? Tm8885) (shen.bind! Tm8885 () V9426 GoTo8886) false))))) (if (shen.pvar? Tm8883) (let B (shen.newpv V9426) (shen.gc V9426 (shen.bind! Tm8883 (cons B ()) V9426 (freeze (GoTo8884 B))))) false))))) (if (= Tm8881 *) (thaw GoTo8882) (if (shen.pvar? Tm8881) (shen.bind! Tm8881 * V9426 GoTo8882) false)))) (if (shen.pvar? Tm8879) (let B (shen.newpv V9426) (shen.gc V9426 (shen.bind! Tm8879 (cons * (cons B ())) V9426 (freeze (GoTo8880 B))))) false))))) (if (shen.pvar? Tm8877) (let A (shen.newpv V9426) (shen.gc V9426 (let B (shen.newpv V9426) (shen.gc V9426 (shen.bind! Tm8877 (cons A (cons * (cons B ()))) V9426 (freeze ((GoTo8878 A) B))))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8871 false) (let C8887 (if (shen.unlocked? V9427) (let Tm8888 (shen.lazyderef V9423 V9426) (if (cons? Tm8888) (let Tm8889 (shen.lazyderef (hd Tm8888) V9426) (if (= Tm8889 @v) (let Tm8890 (shen.lazyderef (tl Tm8888) V9426) (if (cons? Tm8890) (let X (hd Tm8890) (let Tm8891 (shen.lazyderef (tl Tm8890) V9426) (if (cons? Tm8891) (let Y (hd Tm8891) (let Tm8892 (shen.lazyderef (tl Tm8891) V9426) (if (= Tm8892 ()) (let Tm8893 (shen.lazyderef V9424 V9426) (let GoTo8894 (lambda A (do (shen.incinfs) (shen.system-S-h X A V9425 V9426 V9427 K8833 (freeze (shen.system-S-h Y (cons vector (cons A ())) V9425 V9426 V9427 K8833 V9429))))) (if (cons? Tm8893) (let Tm8895 (shen.lazyderef (hd Tm8893) V9426) (let GoTo8896 (freeze (let Tm8897 (shen.lazyderef (tl Tm8893) V9426) (let GoTo8898 (lambda A (GoTo8894 A)) (if (cons? Tm8897) (let A (hd Tm8897) (let Tm8899 (shen.lazyderef (tl Tm8897) V9426) (let GoTo8900 (freeze (GoTo8898 A)) (if (= Tm8899 ()) (thaw GoTo8900) (if (shen.pvar? Tm8899) (shen.bind! Tm8899 () V9426 GoTo8900) false))))) (if (shen.pvar? Tm8897) (let A (shen.newpv V9426) (shen.gc V9426 (shen.bind! Tm8897 (cons A ()) V9426 (freeze (GoTo8898 A))))) false))))) (if (= Tm8895 vector) (thaw GoTo8896) (if (shen.pvar? Tm8895) (shen.bind! Tm8895 vector V9426 GoTo8896) false)))) (if (shen.pvar? Tm8893) (let A (shen.newpv V9426) (shen.gc V9426 (shen.bind! Tm8893 (cons vector (cons A ())) V9426 (freeze (GoTo8894 A))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8887 false) (let C8901 (if (shen.unlocked? V9427) (let Tm8902 (shen.lazyderef V9423 V9426) (if (cons? Tm8902) (let Tm8903 (shen.lazyderef (hd Tm8902) V9426) (if (= Tm8903 @s) (let Tm8904 (shen.lazyderef (tl Tm8902) V9426) (if (cons? Tm8904) (let X (hd Tm8904) (let Tm8905 (shen.lazyderef (tl Tm8904) V9426) (if (cons? Tm8905) (let Y (hd Tm8905) (let Tm8906 (shen.lazyderef (tl Tm8905) V9426) (if (= Tm8906 ()) (let Tm8907 (shen.lazyderef V9424 V9426) (let GoTo8908 (freeze (do (shen.incinfs) (shen.system-S-h X string V9425 V9426 V9427 K8833 (freeze (shen.system-S-h Y string V9425 V9426 V9427 K8833 V9429))))) (if (= Tm8907 string) (thaw GoTo8908) (if (shen.pvar? Tm8907) (shen.bind! Tm8907 string V9426 GoTo8908) false)))) false))) false))) false)) false)) false)) false) (if (= C8901 false) (let C8909 (if (shen.unlocked? V9427) (let Tm8910 (shen.lazyderef V9423 V9426) (if (cons? Tm8910) (let Tm8911 (shen.lazyderef (hd Tm8910) V9426) (if (= Tm8911 lambda) (let Tm8912 (shen.lazyderef (tl Tm8910) V9426) (if (cons? Tm8912) (let X (hd Tm8912) (let Tm8913 (shen.lazyderef (tl Tm8912) V9426) (if (cons? Tm8913) (let Y (hd Tm8913) (let Tm8914 (shen.lazyderef (tl Tm8913) V9426) (if (= Tm8914 ()) (let Tm8915 (shen.lazyderef V9424 V9426) (let GoTo8916 (lambda A (lambda B (let Z (shen.newpv V9426) (shen.gc V9426 (let New (shen.newpv V9426) (shen.gc V9426 (do (shen.incinfs) (bind New (shen.freshterm (shen.lazyderef X V9426)) V9426 V9427 K8833 (freeze (bind Z (shen.beta (shen.lazyderef X V9426) (shen.deref New V9426) (shen.deref Y V9426)) V9426 V9427 K8833 (freeze (shen.system-S-h Z B (cons (cons New (cons (intern ":") (cons A ()))) V9425) V9426 V9427 K8833 V9429)))))))))))) (if (cons? Tm8915) (let A (hd Tm8915) (let Tm8917 (shen.lazyderef (tl Tm8915) V9426) (let GoTo8918 (lambda B ((GoTo8916 A) B)) (if (cons? Tm8917) (let Tm8919 (shen.lazyderef (hd Tm8917) V9426) (let GoTo8920 (freeze (let Tm8921 (shen.lazyderef (tl Tm8917) V9426) (let GoTo8922 (lambda B (GoTo8918 B)) (if (cons? Tm8921) (let B (hd Tm8921) (let Tm8923 (shen.lazyderef (tl Tm8921) V9426) (let GoTo8924 (freeze (GoTo8922 B)) (if (= Tm8923 ()) (thaw GoTo8924) (if (shen.pvar? Tm8923) (shen.bind! Tm8923 () V9426 GoTo8924) false))))) (if (shen.pvar? Tm8921) (let B (shen.newpv V9426) (shen.gc V9426 (shen.bind! Tm8921 (cons B ()) V9426 (freeze (GoTo8922 B))))) false))))) (if (= Tm8919 -->) (thaw GoTo8920) (if (shen.pvar? Tm8919) (shen.bind! Tm8919 --> V9426 GoTo8920) false)))) (if (shen.pvar? Tm8917) (let B (shen.newpv V9426) (shen.gc V9426 (shen.bind! Tm8917 (cons --> (cons B ())) V9426 (freeze (GoTo8918 B))))) false))))) (if (shen.pvar? Tm8915) (let A (shen.newpv V9426) (shen.gc V9426 (let B (shen.newpv V9426) (shen.gc V9426 (shen.bind! Tm8915 (cons A (cons --> (cons B ()))) V9426 (freeze ((GoTo8916 A) B))))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8909 false) (let C8925 (if (shen.unlocked? V9427) (let Tm8926 (shen.lazyderef V9423 V9426) (if (cons? Tm8926) (let Tm8927 (shen.lazyderef (hd Tm8926) V9426) (if (= Tm8927 let) (let Tm8928 (shen.lazyderef (tl Tm8926) V9426) (if (cons? Tm8928) (let X (hd Tm8928) (let Tm8929 (shen.lazyderef (tl Tm8928) V9426) (if (cons? Tm8929) (let Y (hd Tm8929) (let Tm8930 (shen.lazyderef (tl Tm8929) V9426) (if (cons? Tm8930) (let Z (hd Tm8930) (let Tm8931 (shen.lazyderef (tl Tm8930) V9426) (if (= Tm8931 ()) (let W (shen.newpv V9426) (shen.gc V9426 (let New (shen.newpv V9426) (shen.gc V9426 (let B (shen.newpv V9426) (shen.gc V9426 (do (shen.incinfs) (shen.system-S-h Y B V9425 V9426 V9427 K8833 (freeze (bind New (shen.freshterm (shen.lazyderef X V9426)) V9426 V9427 K8833 (freeze (bind W (shen.beta (shen.lazyderef X V9426) (shen.lazyderef New V9426) (shen.lazyderef Z V9426)) V9426 V9427 K8833 (freeze (shen.system-S-h W V9424 (cons (cons New (cons (intern ":") (cons B ()))) V9425) V9426 V9427 K8833 V9429)))))))))))))) false))) false))) false))) false)) false)) false)) false) (if (= C8925 false) (let C8932 (if (shen.unlocked? V9427) (let Tm8933 (shen.lazyderef V9423 V9426) (if (cons? Tm8933) (let Tm8934 (shen.lazyderef (hd Tm8933) V9426) (if (= Tm8934 open) (let Tm8935 (shen.lazyderef (tl Tm8933) V9426) (if (cons? Tm8935) (let File (hd Tm8935) (let Tm8936 (shen.lazyderef (tl Tm8935) V9426) (if (cons? Tm8936) (let V8830 (hd Tm8936) (let Tm8937 (shen.lazyderef (tl Tm8936) V9426) (if (= Tm8937 ()) (let Tm8938 (shen.lazyderef V9424 V9426) (let GoTo8939 (lambda D (do (shen.incinfs) (is! V8830 D V9426 V9427 K8833 (freeze (when (element? (shen.lazyderef D V9426) (cons in (cons out ()))) V9426 V9427 K8833 (freeze (shen.system-S-h File string V9425 V9426 V9427 K8833 V9429))))))) (if (cons? Tm8938) (let Tm8940 (shen.lazyderef (hd Tm8938) V9426) (let GoTo8941 (freeze (let Tm8942 (shen.lazyderef (tl Tm8938) V9426) (let GoTo8943 (lambda D (GoTo8939 D)) (if (cons? Tm8942) (let D (hd Tm8942) (let Tm8944 (shen.lazyderef (tl Tm8942) V9426) (let GoTo8945 (freeze (GoTo8943 D)) (if (= Tm8944 ()) (thaw GoTo8945) (if (shen.pvar? Tm8944) (shen.bind! Tm8944 () V9426 GoTo8945) false))))) (if (shen.pvar? Tm8942) (let D (shen.newpv V9426) (shen.gc V9426 (shen.bind! Tm8942 (cons D ()) V9426 (freeze (GoTo8943 D))))) false))))) (if (= Tm8940 stream) (thaw GoTo8941) (if (shen.pvar? Tm8940) (shen.bind! Tm8940 stream V9426 GoTo8941) false)))) (if (shen.pvar? Tm8938) (let D (shen.newpv V9426) (shen.gc V9426 (shen.bind! Tm8938 (cons stream (cons D ())) V9426 (freeze (GoTo8939 D))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8932 false) (let C8946 (if (shen.unlocked? V9427) (let Tm8947 (shen.lazyderef V9423 V9426) (if (cons? Tm8947) (let Tm8948 (shen.lazyderef (hd Tm8947) V9426) (if (= Tm8948 type) (let Tm8949 (shen.lazyderef (tl Tm8947) V9426) (if (cons? Tm8949) (let X (hd Tm8949) (let Tm8950 (shen.lazyderef (tl Tm8949) V9426) (if (cons? Tm8950) (let A (hd Tm8950) (let Tm8951 (shen.lazyderef (tl Tm8950) V9426) (if (= Tm8951 ()) (do (shen.incinfs) (shen.cut V9426 V9427 K8833 (freeze (is! (shen.rectify-type (shen.deref A V9426)) V9424 V9426 V9427 K8833 (freeze (shen.system-S-h X V9424 V9425 V9426 V9427 K8833 V9429)))))) false))) false))) false)) false)) false)) false) (if (= C8946 false) (let C8952 (if (shen.unlocked? V9427) (let Tm8953 (shen.lazyderef V9423 V9426) (if (cons? Tm8953) (let Tm8954 (shen.lazyderef (hd Tm8953) V9426) (if (= Tm8954 input+) (let Tm8955 (shen.lazyderef (tl Tm8953) V9426) (if (cons? Tm8955) (let A (hd Tm8955) (let Tm8956 (shen.lazyderef (tl Tm8955) V9426) (if (cons? Tm8956) (let Stream (hd Tm8956) (let Tm8957 (shen.lazyderef (tl Tm8956) V9426) (if (= Tm8957 ()) (do (shen.incinfs) (is! V9424 (shen.rectify-type (shen.deref A V9426)) V9426 V9427 K8833 (freeze (shen.system-S-h Stream (cons stream (cons in ())) V9425 V9426 V9427 K8833 V9429)))) false))) false))) false)) false)) false)) false) (if (= C8952 false) (let C8958 (if (shen.unlocked? V9427) (let Tm8959 (shen.lazyderef V9423 V9426) (if (cons? Tm8959) (let Tm8960 (shen.lazyderef (hd Tm8959) V9426) (if (= Tm8960 set) (let Tm8961 (shen.lazyderef (tl Tm8959) V9426) (if (cons? Tm8961) (let Var (hd Tm8961) (let Tm8962 (shen.lazyderef (tl Tm8961) V9426) (if (cons? Tm8962) (let Val (hd Tm8962) (let Tm8963 (shen.lazyderef (tl Tm8962) V9426) (if (= Tm8963 ()) (do (shen.incinfs) (shen.system-S-h Var symbol V9425 V9426 V9427 K8833 (freeze (shen.system-S-h (cons value (cons Var ())) V9424 V9425 V9426 V9427 K8833 (freeze (shen.system-S-h Val V9424 V9425 V9426 V9427 K8833 V9429)))))) false))) false))) false)) false)) false)) false) (if (= C8958 false) (let C8964 (if (shen.unlocked? V9427) (let Normalised (shen.newpv V9426) (shen.gc V9426 (do (shen.incinfs) (shen.l-rules V9425 Normalised false V9426 V9427 K8833 (freeze (shen.cut V9426 V9427 K8833 (freeze (shen.system-S-h V9423 V9424 Normalised V9426 V9427 K8833 V9429)))))))) false) (if (= C8964 false) (let C8965 (if (shen.unlocked? V9427) (do (shen.incinfs) (shen.search-user-datatypes (cons V9423 (cons (intern ":") (cons V9424 ()))) V9425 (value shen.*datatypes*) V9426 V9427 K8833 V9429)) false) (if (= C8965 false) (shen.unlock V9427 K8833) C8965)) C8964)) C8958)) C8952)) C8946)) C8932)) C8925)) C8909)) C8901)) C8887)) C8871)) C8857)) C8853)) C8849)) C8844)) C8841)) C8840)) C8839)) C8838))))

(defun shen.primitive (V9430 V9431 V9432 V9433 V9434 V9435) (let C8972 (if (shen.unlocked? V9433) (let Tm8973 (shen.lazyderef V9431 V9432) (let GoTo8974 (freeze (do (shen.incinfs) (when (number? (shen.lazyderef V9430 V9432)) V9432 V9433 V9434 V9435))) (if (= Tm8973 number) (thaw GoTo8974) (if (shen.pvar? Tm8973) (shen.bind! Tm8973 number V9432 GoTo8974) false)))) false) (if (= C8972 false) (let C8975 (if (shen.unlocked? V9433) (let Tm8976 (shen.lazyderef V9431 V9432) (let GoTo8977 (freeze (do (shen.incinfs) (when (boolean? (shen.lazyderef V9430 V9432)) V9432 V9433 V9434 V9435))) (if (= Tm8976 boolean) (thaw GoTo8977) (if (shen.pvar? Tm8976) (shen.bind! Tm8976 boolean V9432 GoTo8977) false)))) false) (if (= C8975 false) (let C8978 (if (shen.unlocked? V9433) (let Tm8979 (shen.lazyderef V9431 V9432) (let GoTo8980 (freeze (do (shen.incinfs) (when (string? (shen.lazyderef V9430 V9432)) V9432 V9433 V9434 V9435))) (if (= Tm8979 string) (thaw GoTo8980) (if (shen.pvar? Tm8979) (shen.bind! Tm8979 string V9432 GoTo8980) false)))) false) (if (= C8978 false) (let C8981 (if (shen.unlocked? V9433) (let Tm8982 (shen.lazyderef V9431 V9432) (let GoTo8983 (freeze (do (shen.incinfs) (when (symbol? (shen.lazyderef V9430 V9432)) V9432 V9433 V9434 V9435))) (if (= Tm8982 symbol) (thaw GoTo8983) (if (shen.pvar? Tm8982) (shen.bind! Tm8982 symbol V9432 GoTo8983) false)))) false) (if (= C8981 false) (if (shen.unlocked? V9433) (let Tm8984 (shen.lazyderef V9430 V9432) (if (= Tm8984 ()) (let Tm8985 (shen.lazyderef V9431 V9432) (let GoTo8986 (lambda A (do (shen.incinfs) (thaw V9435))) (if (cons? Tm8985) (let Tm8987 (shen.lazyderef (hd Tm8985) V9432) (let GoTo8988 (freeze (let Tm8989 (shen.lazyderef (tl Tm8985) V9432) (let GoTo8990 (lambda A (GoTo8986 A)) (if (cons? Tm8989) (let A (hd Tm8989) (let Tm8991 (shen.lazyderef (tl Tm8989) V9432) (let GoTo8992 (freeze (GoTo8990 A)) (if (= Tm8991 ()) (thaw GoTo8992) (if (shen.pvar? Tm8991) (shen.bind! Tm8991 () V9432 GoTo8992) false))))) (if (shen.pvar? Tm8989) (let A (shen.newpv V9432) (shen.gc V9432 (shen.bind! Tm8989 (cons A ()) V9432 (freeze (GoTo8990 A))))) false))))) (if (= Tm8987 list) (thaw GoTo8988) (if (shen.pvar? Tm8987) (shen.bind! Tm8987 list V9432 GoTo8988) false)))) (if (shen.pvar? Tm8985) (let A (shen.newpv V9432) (shen.gc V9432 (shen.bind! Tm8985 (cons list (cons A ())) V9432 (freeze (GoTo8986 A))))) false)))) false)) false) C8981)) C8978)) C8975)) C8972)))

(defun shen.by-hypothesis (V9436 V9437 V9438 V9439 V9440 V9441 V9442) (let C9000 (if (shen.unlocked? V9440) (let Tm9001 (shen.lazyderef V9438 V9439) (if (cons? Tm9001) (let Tm9002 (shen.lazyderef (hd Tm9001) V9439) (if (cons? Tm9002) (let Y (hd Tm9002) (let Tm9003 (shen.lazyderef (tl Tm9002) V9439) (if (cons? Tm9003) (let Colon (hd Tm9003) (let Tm9004 (shen.lazyderef (tl Tm9003) V9439) (if (cons? Tm9004) (let B (hd Tm9004) (let Tm9005 (shen.lazyderef (tl Tm9004) V9439) (if (= Tm9005 ()) (do (shen.incinfs) (when (= (shen.deref Colon V9439) (intern ":")) V9439 V9440 V9441 (freeze (when (= (shen.deref V9436 V9439) (shen.deref Y V9439)) V9439 V9440 V9441 (freeze (is! V9437 B V9439 V9440 V9441 V9442)))))) false))) false))) false))) false)) false)) false) (if (= C9000 false) (if (shen.unlocked? V9440) (let Tm9006 (shen.lazyderef V9438 V9439) (if (cons? Tm9006) (let Hyp (tl Tm9006) (do (shen.incinfs) (shen.by-hypothesis V9436 V9437 Hyp V9439 V9440 V9441 V9442))) false)) false) C9000)))

(defun shen.lookupsig (V9443 V9444 V9445 V9446 V9447 V9448) (if (shen.unlocked? V9446) (do (shen.incinfs) (shen.sigf (assoc V9443 (value shen.*sigf*)) V9444 V9445 V9446 V9447 V9448)) false))

(defun shen.sigf (V9463 V9464 V9465 V9466 V9467 V9468) (cond ((cons? V9463) ((((((tl V9463) V9464) V9465) V9466) V9467) V9468)) (true false)))

(defun shen.freshterm (V9469) (let V (absvector 3) (let V0 (address-> V 0 shen.print-freshterm) (let V1 (address-> V0 1 V9469) (let V2 (address-> V1 2 (set shen.*gensym* (+ 1 (value shen.*gensym*)))) V2)))))

(defun shen.print-freshterm (V9470) (cn "&&" (str (<-address V9470 1))))

(defun shen.search-user-datatypes (V9471 V9472 V9473 V9474 V9475 V9476 V9477) (let C9020 (if (shen.unlocked? V9475) (let Tm9021 (shen.lazyderef V9473 V9474) (if (cons? Tm9021) (let Tm9022 (shen.lazyderef (hd Tm9021) V9474) (if (cons? Tm9022) (let Fn (tl Tm9022) (do (shen.incinfs) (call (((shen.deref Fn V9474) (shen.deref V9471 V9474)) (shen.deref V9472 V9474)) V9474 V9475 V9476 V9477))) false)) false)) false) (if (= C9020 false) (if (shen.unlocked? V9475) (let Tm9023 (shen.lazyderef V9473 V9474) (if (cons? Tm9023) (let Ds (tl Tm9023) (do (shen.incinfs) (shen.search-user-datatypes V9471 V9472 Ds V9474 V9475 V9476 V9477))) false)) false) C9020)))

(defun shen.l-rules (V9478 V9479 V9480 V9481 V9482 V9483 V9484) (let K9026 (+ V9483 1) (let C9031 (if (shen.unlocked? V9482) (let Tm9032 (shen.lazyderef V9478 V9481) (if (= Tm9032 ()) (let Tm9033 (shen.lazyderef V9480 V9481) (if (= Tm9033 true) (do (shen.incinfs) (shen.cut V9481 V9482 K9026 (freeze (bind V9479 () V9481 V9482 K9026 V9484)))) false)) false)) false) (if (= C9031 false) (let C9034 (if (shen.unlocked? V9482) (let Tm9035 (shen.lazyderef V9478 V9481) (if (cons? Tm9035) (let Tm9036 (shen.lazyderef (hd Tm9035) V9481) (if (cons? Tm9036) (let Tm9037 (shen.lazyderef (hd Tm9036) V9481) (if (cons? Tm9037) (let Tm9038 (shen.lazyderef (hd Tm9037) V9481) (if (= Tm9038 cons) (let Tm9039 (shen.lazyderef (tl Tm9037) V9481) (if (cons? Tm9039) (let X (hd Tm9039) (let Tm9040 (shen.lazyderef (tl Tm9039) V9481) (if (cons? Tm9040) (let Y (hd Tm9040) (let Tm9041 (shen.lazyderef (tl Tm9040) V9481) (if (= Tm9041 ()) (let Tm9042 (shen.lazyderef (tl Tm9036) V9481) (if (cons? Tm9042) (let Colon (hd Tm9042) (let Tm9043 (shen.lazyderef (tl Tm9042) V9481) (if (cons? Tm9043) (let Tm9044 (shen.lazyderef (hd Tm9043) V9481) (if (cons? Tm9044) (let Tm9045 (shen.lazyderef (hd Tm9044) V9481) (if (= Tm9045 list) (let Tm9046 (shen.lazyderef (tl Tm9044) V9481) (if (cons? Tm9046) (let A (hd Tm9046) (let Tm9047 (shen.lazyderef (tl Tm9046) V9481) (if (= Tm9047 ()) (let Tm9048 (shen.lazyderef (tl Tm9043) V9481) (if (= Tm9048 ()) (let Hyp (tl Tm9035) (do (shen.incinfs) (when (= (shen.deref Colon V9481) (intern ":")) V9481 V9482 K9026 (freeze (shen.cut V9481 V9482 K9026 (freeze (shen.l-rules (cons (cons X (cons Colon (cons A ()))) (cons (cons Y (cons Colon (cons (cons list (cons A ())) ()))) Hyp)) V9479 true V9481 V9482 K9026 V9484))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= C9034 false) (let C9049 (if (shen.unlocked? V9482) (let Tm9050 (shen.lazyderef V9478 V9481) (if (cons? Tm9050) (let Tm9051 (shen.lazyderef (hd Tm9050) V9481) (if (cons? Tm9051) (let Tm9052 (shen.lazyderef (hd Tm9051) V9481) (if (cons? Tm9052) (let Tm9053 (shen.lazyderef (hd Tm9052) V9481) (if (= Tm9053 @p) (let Tm9054 (shen.lazyderef (tl Tm9052) V9481) (if (cons? Tm9054) (let X (hd Tm9054) (let Tm9055 (shen.lazyderef (tl Tm9054) V9481) (if (cons? Tm9055) (let Y (hd Tm9055) (let Tm9056 (shen.lazyderef (tl Tm9055) V9481) (if (= Tm9056 ()) (let Tm9057 (shen.lazyderef (tl Tm9051) V9481) (if (cons? Tm9057) (let Colon (hd Tm9057) (let Tm9058 (shen.lazyderef (tl Tm9057) V9481) (if (cons? Tm9058) (let Tm9059 (shen.lazyderef (hd Tm9058) V9481) (if (cons? Tm9059) (let A (hd Tm9059) (let Tm9060 (shen.lazyderef (tl Tm9059) V9481) (if (cons? Tm9060) (let Tm9061 (shen.lazyderef (hd Tm9060) V9481) (if (= Tm9061 *) (let Tm9062 (shen.lazyderef (tl Tm9060) V9481) (if (cons? Tm9062) (let B (hd Tm9062) (let Tm9063 (shen.lazyderef (tl Tm9062) V9481) (if (= Tm9063 ()) (let Tm9064 (shen.lazyderef (tl Tm9058) V9481) (if (= Tm9064 ()) (let Hyp (tl Tm9050) (do (shen.incinfs) (when (= (shen.deref Colon V9481) (intern ":")) V9481 V9482 K9026 (freeze (shen.cut V9481 V9482 K9026 (freeze (shen.l-rules (cons (cons X (cons Colon (cons A ()))) (cons (cons Y (cons Colon (cons B ()))) Hyp)) V9479 true V9481 V9482 K9026 V9484))))))) false)) false))) false)) false)) false))) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= C9049 false) (let C9065 (if (shen.unlocked? V9482) (let Tm9066 (shen.lazyderef V9478 V9481) (if (cons? Tm9066) (let Tm9067 (shen.lazyderef (hd Tm9066) V9481) (if (cons? Tm9067) (let Tm9068 (shen.lazyderef (hd Tm9067) V9481) (if (cons? Tm9068) (let Tm9069 (shen.lazyderef (hd Tm9068) V9481) (if (= Tm9069 @s) (let Tm9070 (shen.lazyderef (tl Tm9068) V9481) (if (cons? Tm9070) (let X (hd Tm9070) (let Tm9071 (shen.lazyderef (tl Tm9070) V9481) (if (cons? Tm9071) (let Y (hd Tm9071) (let Tm9072 (shen.lazyderef (tl Tm9071) V9481) (if (= Tm9072 ()) (let Tm9073 (shen.lazyderef (tl Tm9067) V9481) (if (cons? Tm9073) (let Colon (hd Tm9073) (let Tm9074 (shen.lazyderef (tl Tm9073) V9481) (if (cons? Tm9074) (let Tm9075 (shen.lazyderef (hd Tm9074) V9481) (if (= Tm9075 string) (let Tm9076 (shen.lazyderef (tl Tm9074) V9481) (if (= Tm9076 ()) (let Hyp (tl Tm9066) (do (shen.incinfs) (when (= (shen.deref Colon V9481) (intern ":")) V9481 V9482 K9026 (freeze (shen.cut V9481 V9482 K9026 (freeze (shen.l-rules (cons (cons X (cons Colon (cons string ()))) (cons (cons Y (cons Colon (cons string ()))) Hyp)) V9479 true V9481 V9482 K9026 V9484))))))) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= C9065 false) (let C9077 (if (shen.unlocked? V9482) (let Tm9078 (shen.lazyderef V9478 V9481) (if (cons? Tm9078) (let Tm9079 (shen.lazyderef (hd Tm9078) V9481) (if (cons? Tm9079) (let Tm9080 (shen.lazyderef (hd Tm9079) V9481) (if (cons? Tm9080) (let Tm9081 (shen.lazyderef (hd Tm9080) V9481) (if (= Tm9081 @v) (let Tm9082 (shen.lazyderef (tl Tm9080) V9481) (if (cons? Tm9082) (let X (hd Tm9082) (let Tm9083 (shen.lazyderef (tl Tm9082) V9481) (if (cons? Tm9083) (let Y (hd Tm9083) (let Tm9084 (shen.lazyderef (tl Tm9083) V9481) (if (= Tm9084 ()) (let Tm9085 (shen.lazyderef (tl Tm9079) V9481) (if (cons? Tm9085) (let Colon (hd Tm9085) (let Tm9086 (shen.lazyderef (tl Tm9085) V9481) (if (cons? Tm9086) (let Tm9087 (shen.lazyderef (hd Tm9086) V9481) (if (cons? Tm9087) (let Tm9088 (shen.lazyderef (hd Tm9087) V9481) (if (= Tm9088 vector) (let Tm9089 (shen.lazyderef (tl Tm9087) V9481) (if (cons? Tm9089) (let A (hd Tm9089) (let Tm9090 (shen.lazyderef (tl Tm9089) V9481) (if (= Tm9090 ()) (let Tm9091 (shen.lazyderef (tl Tm9086) V9481) (if (= Tm9091 ()) (let Hyp (tl Tm9078) (do (shen.incinfs) (when (= (shen.deref Colon V9481) (intern ":")) V9481 V9482 K9026 (freeze (shen.cut V9481 V9482 K9026 (freeze (shen.l-rules (cons (cons X (cons Colon (cons A ()))) (cons (cons Y (cons Colon (cons (cons vector (cons A ())) ()))) Hyp)) V9479 true V9481 V9482 K9026 V9484))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= C9077 false) (let C9092 (if (shen.unlocked? V9482) (let Tm9093 (shen.lazyderef V9478 V9481) (if (cons? Tm9093) (let P (hd Tm9093) (let Hyp (tl Tm9093) (let Tm9094 (shen.lazyderef V9479 V9481) (let GoTo9095 (lambda Q (lambda Normalised (do (shen.incinfs) (bind Q P V9481 V9482 K9026 (freeze (shen.l-rules Hyp Normalised V9480 V9481 V9482 K9026 V9484)))))) (if (cons? Tm9094) (let Q (hd Tm9094) (let Normalised (tl Tm9094) ((GoTo9095 Q) Normalised))) (if (shen.pvar? Tm9094) (let Q (shen.newpv V9481) (shen.gc V9481 (let Normalised (shen.newpv V9481) (shen.gc V9481 (shen.bind! Tm9094 (cons Q Normalised) V9481 (freeze ((GoTo9095 Q) Normalised))))))) false)))))) false)) false) (if (= C9092 false) (shen.unlock V9482 K9026) C9092)) C9077)) C9065)) C9049)) C9034)) C9031))))

(defun shen.t* (V9485 V9486 V9487 V9488 V9489 V9490) (let K9098 (+ V9489 1) (let C9102 (if (shen.unlocked? V9488) (let Tm9103 (shen.lazyderef V9485 V9487) (if (cons? Tm9103) (let Tm9104 (shen.lazyderef (hd Tm9103) V9487) (if (= Tm9104 define) (let Tm9105 (shen.lazyderef (tl Tm9103) V9487) (if (cons? Tm9105) (let F (hd Tm9105) (let X (tl Tm9105) (let SigxRules (shen.newpv V9487) (shen.gc V9487 (let Rules (shen.newpv V9487) (shen.gc V9487 (let FreshSig (shen.newpv V9487) (shen.gc V9487 (let Sig (shen.newpv V9487) (shen.gc V9487 (do (shen.incinfs) (shen.cut V9487 V9488 K9098 (freeze (bind SigxRules (shen.sigxrules (cons F X)) V9487 V9488 K9098 (freeze (bind Sig (fst (shen.lazyderef SigxRules V9487)) V9487 V9488 K9098 (freeze (bind Rules (snd (shen.lazyderef SigxRules V9487)) V9487 V9488 K9098 (freeze (bind FreshSig (shen.freshen-sig (shen.deref Sig V9487)) V9487 V9488 K9098 (freeze (shen.t*-rules F Rules FreshSig 1 V9487 V9488 K9098 (freeze (is Sig V9486 V9487 V9488 K9098 V9490)))))))))))))))))))))))) false)) false)) false)) false) (if (= C9102 false) (shen.unlock V9488 K9098) C9102))))

(defun shen.sigxrules (V9491) (compile (lambda X (shen.<sig*rules> X)) V9491))

(defun shen.<sig*rules> (V9492) (let Result (if (shen.non-empty-stream? V9492) (let F (shen.hds V9492) (let News9107 (shen.tls V9492) (if (shen.=hd? News9107 {) (let News9108 (shen.tls News9107) (let Parseshen.<signature> (shen.<signature> News9108) (if (shen.parse-failure? Parseshen.<signature>) (shen.parse-failure) (if (shen.=hd? Parseshen.<signature> }) (let News9109 (shen.tls Parseshen.<signature>) (let Parseshen.<rules*> (shen.<rules*> News9109) (if (shen.parse-failure? Parseshen.<rules*>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<rules*>) (let Rectified (shen.rectify-type (shen.<-out Parseshen.<signature>)) (@p Rectified (shen.<-out Parseshen.<rules*>))))))) (shen.parse-failure))))) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.freshen-sig (V9493) (let Vs (shen.extract-vars V9493) (let Assoc (map (lambda V (cons V (shen.freshterm (concat & V)))) Vs) (shen.freshen-type Assoc V9493))))

(defun shen.freshen-type (V9494 V9495) (cond ((= () V9494) V9495) ((and (cons? V9494) (cons? (hd V9494))) (shen.freshen-type (tl V9494) (subst (tl (hd V9494)) (hd (hd V9494)) V9495))) (true (shen.f-error shen.freshen-type))))

(defun shen.<rules*> (V9496) (let Result (let Parseshen.<rule*> (shen.<rule*> V9496) (if (shen.parse-failure? Parseshen.<rule*>) (shen.parse-failure) (let Parseshen.<rules*> (shen.<rules*> Parseshen.<rule*>) (if (shen.parse-failure? Parseshen.<rules*>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<rules*>) (cons (shen.<-out Parseshen.<rule*>) (shen.<-out Parseshen.<rules*>))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<rule*> (shen.<rule*> V9496) (if (shen.parse-failure? Parseshen.<rule*>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<rule*>) (cons (shen.<-out Parseshen.<rule*>) ())))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<rule*> (V9497) (let Result (let Parseshen.<patterns> (shen.<patterns> V9497) (if (shen.parse-failure? Parseshen.<patterns>) (shen.parse-failure) (if (shen.=hd? Parseshen.<patterns> ->) (let News9112 (shen.tls Parseshen.<patterns>) (if (shen.non-empty-stream? News9112) (let Action (shen.hds News9112) (let News9113 (shen.tls News9112) (if (shen.=hd? News9113 where) (let News9114 (shen.tls News9113) (if (shen.non-empty-stream? News9114) (let Guard (shen.hds News9114) (let News9115 (shen.tls News9114) (shen.comb (shen.in-> News9115) (@p (shen.<-out Parseshen.<patterns>) (cons where (cons Guard (cons Action ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<patterns> (shen.<patterns> V9497) (if (shen.parse-failure? Parseshen.<patterns>) (shen.parse-failure) (if (shen.=hd? Parseshen.<patterns> <-) (let News9116 (shen.tls Parseshen.<patterns>) (if (shen.non-empty-stream? News9116) (let Action (shen.hds News9116) (let News9117 (shen.tls News9116) (if (shen.=hd? News9117 where) (let News9118 (shen.tls News9117) (if (shen.non-empty-stream? News9118) (let Guard (shen.hds News9118) (let News9119 (shen.tls News9118) (shen.comb (shen.in-> News9119) (@p (shen.<-out Parseshen.<patterns>) (shen.correct (cons where (cons Guard (cons Action ())))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<patterns> (shen.<patterns> V9497) (if (shen.parse-failure? Parseshen.<patterns>) (shen.parse-failure) (if (shen.=hd? Parseshen.<patterns> <-) (let News9120 (shen.tls Parseshen.<patterns>) (if (shen.non-empty-stream? News9120) (let Action (shen.hds News9120) (let News9121 (shen.tls News9120) (shen.comb (shen.in-> News9121) (@p (shen.<-out Parseshen.<patterns>) (shen.correct Action))))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<patterns> (shen.<patterns> V9497) (if (shen.parse-failure? Parseshen.<patterns>) (shen.parse-failure) (if (shen.=hd? Parseshen.<patterns> ->) (let News9122 (shen.tls Parseshen.<patterns>) (if (shen.non-empty-stream? News9122) (let Action (shen.hds News9122) (let News9123 (shen.tls News9122) (shen.comb (shen.in-> News9123) (@p (shen.<-out Parseshen.<patterns>) Action)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)) Result)))

(defun shen.correct (V9498) (cond ((and (cons? V9498) (and (= where (hd V9498)) (and (cons? (tl V9498)) (and (cons? (tl (tl V9498))) (and (cons? (hd (tl (tl V9498)))) (and (= fail-if (hd (hd (tl (tl V9498))))) (and (cons? (tl (hd (tl (tl V9498))))) (and (cons? (tl (tl (hd (tl (tl V9498)))))) (and (= () (tl (tl (tl (hd (tl (tl V9498))))))) (= () (tl (tl (tl V9498))))))))))))) (cons where (cons (cons and (cons (hd (tl V9498)) (cons (cons not (cons (tl (hd (tl (tl V9498)))) ())) ()))) (tl (tl (hd (tl (tl V9498)))))))) ((and (cons? V9498) (and (= where (hd V9498)) (and (cons? (tl V9498)) (and (cons? (tl (tl V9498))) (= () (tl (tl (tl V9498)))))))) (cons where (cons (cons and (cons (hd (tl V9498)) (cons (cons not (cons (cons = (cons (hd (tl (tl V9498))) (cons (cons fail ()) ()))) ())) ()))) (tl (tl V9498))))) ((and (cons? V9498) (and (= fail-if (hd V9498)) (and (cons? (tl V9498)) (and (cons? (tl (tl V9498))) (= () (tl (tl (tl V9498)))))))) (cons where (cons (cons not (cons (tl V9498) ())) (tl (tl V9498))))) (true (cons where (cons (cons not (cons (cons = (cons V9498 (cons (cons fail ()) ()))) ())) (cons V9498 ()))))))

(defun shen.t*-rules (V9499 V9500 V9501 V9502 V9503 V9504 V9505 V9506) (let K9126 (+ V9505 1) (let C9132 (if (shen.unlocked? V9504) (let Tm9133 (shen.lazyderef V9500 V9503) (if (= Tm9133 ()) (do (shen.incinfs) (thaw V9506)) false)) false) (if (= C9132 false) (let C9134 (if (shen.unlocked? V9504) (let Tm9135 (shen.lazyderef V9500 V9503) (if (cons? Tm9135) (let Rule (hd Tm9135) (let Rules (tl Tm9135) (let Fresh (shen.newpv V9503) (shen.gc V9503 (do (shen.incinfs) (bind Fresh (shen.freshen-rule (shen.deref Rule V9503)) V9503 V9504 K9126 (freeze (shen.t*-rule V9499 V9502 (fst (shen.lazyderef Fresh V9503)) (snd (shen.lazyderef Fresh V9503)) V9501 V9503 V9504 K9126 (freeze (shen.cut V9503 V9504 K9126 (freeze (shen.t*-rules V9499 Rules V9501 (+ V9502 1) V9503 V9504 K9126 V9506)))))))))))) false)) false) (if (= C9134 false) (shen.unlock V9504 K9126) C9134)) C9132))))

(defun shen.freshen-rule (V9507) (cond ((tuple? V9507) (let Vs (shen.extract-vars (fst V9507)) (let Assoc (map (lambda V (cons V (shen.freshterm V))) Vs) (@p (shen.freshen Assoc (fst V9507)) (shen.freshen Assoc (snd V9507)))))) (true (shen.f-error shen.freshen-rule))))

(defun shen.freshen (V9508 V9509) (cond ((= () V9508) V9509) ((and (cons? V9508) (cons? (hd V9508))) (shen.freshen (tl V9508) (shen.beta (hd (hd V9508)) (tl (hd V9508)) V9509))) (true (shen.f-error shen.freshen))))

(defun shen.t*-rule (V9510 V9511 V9512 V9513 V9514 V9515 V9516 V9517 V9518) (let C9145 (if (shen.unlocked? V9516) (do (shen.incinfs) (shen.t*-rule-h V9512 V9513 V9514 V9515 V9516 V9517 V9518)) false) (if (= C9145 false) (if (shen.unlocked? V9516) (let Err (shen.newpv V9515) (shen.gc V9515 (do (shen.incinfs) (bind Err (simple-error (cn "type error in rule " (shen.app V9511 (cn " of " (shen.app V9510 "
" shen.a)) shen.a))) V9515 V9516 V9517 V9518)))) false) C9145)))

(defun shen.t*-rule-h (V9519 V9520 V9521 V9522 V9523 V9524 V9525) (let K9148 (+ V9524 1) (let C9153 (if (shen.unlocked? V9523) (let Tm9154 (shen.lazyderef V9519 V9522) (if (= Tm9154 ()) (let Tm9155 (shen.lazyderef V9521 V9522) (if (cons? Tm9155) (let Tm9156 (shen.lazyderef (hd Tm9155) V9522) (if (= Tm9156 -->) (let Tm9157 (shen.lazyderef (tl Tm9155) V9522) (if (cons? Tm9157) (let A (hd Tm9157) (let Tm9158 (shen.lazyderef (tl Tm9157) V9522) (if (= Tm9158 ()) (do (shen.incinfs) (shen.cut V9522 V9523 K9148 (freeze (shen.t*-correct V9520 A () V9522 V9523 K9148 V9525)))) false))) false)) false)) false)) false)) false) (if (= C9153 false) (let C9159 (if (shen.unlocked? V9523) (let B (shen.newpv V9522) (shen.gc V9522 (let Hyps (shen.newpv V9522) (shen.gc V9522 (do (shen.incinfs) (shen.p-hyps (shen.freshterms V9519) Hyps V9522 V9523 K9148 (freeze (shen.t*-integrity V9519 V9521 Hyps B V9522 V9523 K9148 (freeze (shen.cut V9522 V9523 K9148 (freeze (shen.t*-correct V9520 B Hyps V9522 V9523 K9148 V9525)))))))))))) false) (if (= C9159 false) (shen.unlock V9523 K9148) C9159)) C9153))))

(defun shen.freshterms (V9528) (cond ((= () V9528) ()) ((and (cons? V9528) (cons? (hd V9528))) (shen.freshterms (append (hd V9528) (tl V9528)))) ((and (cons? V9528) (shen.freshterm? (hd V9528))) (adjoin (hd V9528) (shen.freshterms (tl V9528)))) ((cons? V9528) (shen.freshterms (tl V9528))) (true (shen.f-error shen.freshterms))))

(defun shen.p-hyps (V9529 V9530 V9531 V9532 V9533 V9534) (let C9166 (if (shen.unlocked? V9532) (let Tm9167 (shen.lazyderef V9529 V9531) (if (= Tm9167 ()) (let Tm9168 (shen.lazyderef V9530 V9531) (let GoTo9169 (freeze (do (shen.incinfs) (thaw V9534))) (if (= Tm9168 ()) (thaw GoTo9169) (if (shen.pvar? Tm9168) (shen.bind! Tm9168 () V9531 GoTo9169) false)))) false)) false) (if (= C9166 false) (if (shen.unlocked? V9532) (let Tm9170 (shen.lazyderef V9529 V9531) (if (cons? Tm9170) (let P (hd Tm9170) (let Ps (tl Tm9170) (let Tm9171 (shen.lazyderef V9530 V9531) (let GoTo9172 (lambda Q (lambda Colon (lambda A (lambda Hyps (do (shen.incinfs) (bind Q P V9531 V9532 V9533 (freeze (bind Colon (intern ":") V9531 V9532 V9533 (freeze (shen.p-hyps Ps Hyps V9531 V9532 V9533 V9534)))))))))) (if (cons? Tm9171) (let Tm9173 (shen.lazyderef (hd Tm9171) V9531) (let GoTo9174 (lambda Q (lambda Colon (lambda A (let Hyps (tl Tm9171) ((((GoTo9172 Q) Colon) A) Hyps))))) (if (cons? Tm9173) (let Q (hd Tm9173) (let Tm9175 (shen.lazyderef (tl Tm9173) V9531) (let GoTo9176 (lambda Colon (lambda A (((GoTo9174 Q) Colon) A))) (if (cons? Tm9175) (let Colon (hd Tm9175) (let Tm9177 (shen.lazyderef (tl Tm9175) V9531) (let GoTo9178 (lambda A ((GoTo9176 Colon) A)) (if (cons? Tm9177) (let A (hd Tm9177) (let Tm9179 (shen.lazyderef (tl Tm9177) V9531) (let GoTo9180 (freeze (GoTo9178 A)) (if (= Tm9179 ()) (thaw GoTo9180) (if (shen.pvar? Tm9179) (shen.bind! Tm9179 () V9531 GoTo9180) false))))) (if (shen.pvar? Tm9177) (let A (shen.newpv V9531) (shen.gc V9531 (shen.bind! Tm9177 (cons A ()) V9531 (freeze (GoTo9178 A))))) false))))) (if (shen.pvar? Tm9175) (let Colon (shen.newpv V9531) (shen.gc V9531 (let A (shen.newpv V9531) (shen.gc V9531 (shen.bind! Tm9175 (cons Colon (cons A ())) V9531 (freeze ((GoTo9176 Colon) A))))))) false))))) (if (shen.pvar? Tm9173) (let Q (shen.newpv V9531) (shen.gc V9531 (let Colon (shen.newpv V9531) (shen.gc V9531 (let A (shen.newpv V9531) (shen.gc V9531 (shen.bind! Tm9173 (cons Q (cons Colon (cons A ()))) V9531 (freeze (((GoTo9174 Q) Colon) A))))))))) false)))) (if (shen.pvar? Tm9171) (let Q (shen.newpv V9531) (shen.gc V9531 (let Colon (shen.newpv V9531) (shen.gc V9531 (let A (shen.newpv V9531) (shen.gc V9531 (let Hyps (shen.newpv V9531) (shen.gc V9531 (shen.bind! Tm9171 (cons (cons Q (cons Colon (cons A ()))) Hyps) V9531 (freeze ((((GoTo9172 Q) Colon) A) Hyps))))))))))) false)))))) false)) false) C9166)))

(defun shen.t*-correct (V9535 V9536 V9537 V9538 V9539 V9540 V9541) (let K9183 (+ V9540 1) (let C9188 (if (shen.unlocked? V9539) (let Tm9189 (shen.lazyderef V9535 V9538) (if (cons? Tm9189) (let Tm9190 (shen.lazyderef (hd Tm9189) V9538) (if (= Tm9190 where) (let Tm9191 (shen.lazyderef (tl Tm9189) V9538) (if (cons? Tm9191) (let G (hd Tm9191) (let Tm9192 (shen.lazyderef (tl Tm9191) V9538) (if (cons? Tm9192) (let R (hd Tm9192) (let Tm9193 (shen.lazyderef (tl Tm9192) V9538) (if (= Tm9193 ()) (let CurryG (shen.newpv V9538) (shen.gc V9538 (do (shen.incinfs) (shen.cut V9538 V9539 K9183 (freeze (bind CurryG (shen.curry G) V9538 V9539 K9183 (freeze (shen.system-S-h CurryG boolean V9537 V9538 V9539 K9183 (freeze (shen.cut V9538 V9539 K9183 (freeze (shen.t*-correct R V9536 (cons (cons CurryG (cons (intern ":") (cons verified ()))) V9537) V9538 V9539 K9183 V9541)))))))))))) false))) false))) false)) false)) false)) false) (if (= C9188 false) (let C9194 (if (shen.unlocked? V9539) (do (shen.incinfs) (shen.system-S-h (shen.curry V9535) V9536 V9537 V9538 V9539 K9183 V9541)) false) (if (= C9194 false) (shen.unlock V9539 K9183) C9194)) C9188))))

(defun shen.t*-integrity (V9542 V9543 V9544 V9545 V9546 V9547 V9548 V9549) (let C9204 (if (shen.unlocked? V9547) (let Tm9205 (shen.lazyderef V9542 V9546) (if (= Tm9205 ()) (do (shen.incinfs) (is! V9543 V9545 V9546 V9547 V9548 V9549)) false)) false) (if (= C9204 false) (if (shen.unlocked? V9547) (let Tm9206 (shen.lazyderef V9542 V9546) (if (cons? Tm9206) (let P (hd Tm9206) (let Ps (tl Tm9206) (let Tm9207 (shen.lazyderef V9543 V9546) (if (cons? Tm9207) (let A (hd Tm9207) (let Tm9208 (shen.lazyderef (tl Tm9207) V9546) (if (cons? Tm9208) (let Tm9209 (shen.lazyderef (hd Tm9208) V9546) (if (= Tm9209 -->) (let Tm9210 (shen.lazyderef (tl Tm9208) V9546) (if (cons? Tm9210) (let B (hd Tm9210) (let Tm9211 (shen.lazyderef (tl Tm9210) V9546) (if (= Tm9211 ()) (do (shen.incinfs) (shen.system-S-h P A V9544 V9546 V9547 V9548 (freeze (shen.t*-integrity Ps B V9544 V9545 V9546 V9547 V9548 V9549)))) false))) false)) false)) false))) false)))) false)) false) C9204)))

(defun shen.freshterm? (V9550) (and (absvector? V9550) (and (not (string? V9550)) (= (<-address V9550 0) shen.print-freshterm))))

