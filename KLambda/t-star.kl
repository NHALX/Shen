(defun shen.typecheck (V11061 V11062) (let W11063 (shen.extract-vars V11062) (let W11064 (shen.rectify-type V11062) (let W11065 (shen.curry V11061) (((((lambda Z11066 (lambda Z11067 (lambda Z11068 (lambda Z11069 (let W11070 (shen.newpv Z11066) (shen.gc Z11066 (do (shen.incinfs) (shen.insert-prolog-variables (receive (shen.deref W11063 Z11066)) (receive (shen.deref W11064 Z11066)) W11070 Z11066 Z11067 Z11068 (freeze (shen.toplevel-forms (receive (shen.deref W11065 Z11066)) W11070 Z11066 Z11067 Z11068 (freeze (return W11070 Z11066 Z11067 Z11068 Z11069)))))))))))) (shen.reset-prolog-vector)) (@v true (@v 0 (vector 0)))) 0) (freeze true))))))

(defun shen.insert-prolog-variables (V11071 V11072 V11073 V11074 V11075 V11076 V11077) (let W11078 (if (shen.unlocked? V11075) (let W11079 (shen.lazyderef V11071 V11074) (if (= W11079 ()) (do (shen.incinfs) (is! V11072 V11073 V11074 V11075 V11076 V11077)) false)) false) (if (= W11078 false) (if (shen.unlocked? V11075) (let W11080 (shen.lazyderef V11071 V11074) (if (cons? W11080) (let W11081 (hd W11080) (let W11082 (tl W11080) (let W11083 (shen.newpv V11074) (shen.gc V11074 (do (shen.incinfs) (shen.insert-prolog-variables W11082 (subst (shen.deref W11083 V11074) W11081 V11072) V11073 V11074 V11075 V11076 V11077)))))) false)) false) W11078)))

(defun shen.toplevel-forms (V11084 V11085 V11086 V11087 V11088 V11089) (let W11090 (+ V11088 1) (let W11091 (if (shen.unlocked? V11087) (let W11092 (shen.lazyderef V11084 V11086) (if (cons? W11092) (let W11093 (shen.lazyderef (hd W11092) V11086) (if (= W11093 define) (let W11094 (shen.lazyderef (tl W11092) V11086) (if (cons? W11094) (let W11095 (hd W11094) (let W11096 (tl W11094) (do (shen.incinfs) (when (shen.type-theory-enabled?) V11086 V11087 W11090 (freeze (shen.cut V11086 V11087 W11090 (freeze (shen.signal-def (value shen.*spy*) W11095 V11086 V11087 W11090 (freeze (shen.t* (cons define (cons W11095 W11096)) V11085 V11086 V11087 W11090 V11089)))))))))) false)) false)) false)) false) (if (= W11091 false) (let W11097 (if (shen.unlocked? V11087) (do (shen.incinfs) (shen.system-S (cons V11084 (cons (intern ":") (cons V11085 ()))) () V11086 V11087 W11090 V11089)) false) (if (= W11097 false) (shen.unlock V11087 W11090) W11097)) W11091))))

(defun shen.signal-def (V11098 V11099 V11100 V11101 V11102 V11103) (let W11104 (if (shen.unlocked? V11101) (let W11105 (shen.lazyderef V11098 V11100) (if (= W11105 false) (do (shen.incinfs) (thaw V11103)) false)) false) (if (= W11104 false) (if (shen.unlocked? V11101) (let W11106 (shen.lazyderef V11098 V11100) (if (= W11106 true) (let W11107 (shen.newpv V11100) (shen.gc V11100 (do (shen.incinfs) (is W11107 (pr (cn "
typechecking (fn " (shen.app (shen.deref V11099 V11100) ")
" shen.a)) (stoutput)) V11100 V11101 V11102 V11103)))) false)) false) W11104)))

(defun shen.rectify-type (V11108) (shen.demodulate (shen.curry-type V11108)))

(defun shen.demodulate (V11109) (trap-error (let W11110 (shen.walk (lambda Z11111 (shen.demod Z11111)) V11109) (if (= W11110 V11109) V11109 (shen.demodulate W11110))) (lambda Z11112 V11109)))

(defun shen.curry-type (V11113) (cond ((and (cons? V11113) (and (cons? (tl V11113)) (and (= --> (hd (tl V11113))) (and (cons? (tl (tl V11113))) (and (cons? (tl (tl (tl V11113)))) (= --> (hd (tl (tl (tl V11113)))))))))) (shen.curry-type (cons (hd V11113) (cons --> (cons (tl (tl V11113)) ()))))) ((and (cons? V11113) (and (cons? (tl V11113)) (and (= ==> (hd (tl V11113))) (and (cons? (tl (tl V11113))) (= () (tl (tl (tl V11113)))))))) (shen.curry-type (cons (cons (hd V11113) (cons * (cons A ()))) (cons --> (cons (cons (cons vector (cons boolean ())) (cons --> (cons (cons (hd V11113) (cons * (tl (tl V11113)))) ()))) ()))))) ((and (cons? V11113) (and (cons? (tl V11113)) (and (= * (hd (tl V11113))) (and (cons? (tl (tl V11113))) (and (cons? (tl (tl (tl V11113)))) (= * (hd (tl (tl (tl V11113)))))))))) (shen.curry-type (cons (hd V11113) (cons * (cons (tl (tl V11113)) ()))))) ((cons? V11113) (map (lambda Z11114 (shen.curry-type Z11114)) V11113)) (true V11113)))

(defun shen.curry (V11115) (cond ((and (cons? V11115) (and (= define (hd V11115)) (cons? (tl V11115)))) V11115) ((and (cons? V11115) (and (= type (hd V11115)) (and (cons? (tl V11115)) (and (cons? (tl (tl V11115))) (= () (tl (tl (tl V11115)))))))) (cons type (cons (shen.curry (hd (tl V11115))) (tl (tl V11115))))) ((and (cons? V11115) (and (= input+ (hd V11115)) (and (cons? (tl V11115)) (and (cons? (tl (tl V11115))) (= () (tl (tl (tl V11115)))))))) (cons input+ (cons (hd (tl V11115)) (cons (shen.curry (hd (tl (tl V11115)))) ())))) ((and (cons? V11115) (shen.special? (hd V11115))) (cons (hd V11115) (map (lambda Z11116 (shen.curry Z11116)) (tl V11115)))) ((and (cons? V11115) (shen.extraspecial? (hd V11115))) V11115) ((and (cons? V11115) (and (cons? (tl V11115)) (cons? (tl (tl V11115))))) (shen.curry (cons (cons (hd V11115) (cons (hd (tl V11115)) ())) (tl (tl V11115))))) ((and (cons? V11115) (and (cons? (tl V11115)) (= () (tl (tl V11115))))) (cons (shen.curry (hd V11115)) (cons (shen.curry (hd (tl V11115))) ()))) (true V11115)))

(defun shen.special? (V11117) (element? V11117 (value shen.*special*)))

(defun shen.extraspecial? (V11118) (element? V11118 (value shen.*extraspecial*)))

(defun shen.system-S (V11119 V11120 V11121 V11122 V11123 V11124) (let W11125 (+ V11123 1) (let W11126 (if (shen.unlocked? V11122) (do (shen.incinfs) (when (shen.maxinfexceeded?) V11121 V11122 W11125 V11124)) false) (if (= W11126 false) (let W11127 (if (shen.unlocked? V11122) (let W11128 (shen.lazyderef V11119 V11121) (if (cons? W11128) (let W11129 (hd W11128) (let W11130 (shen.lazyderef (tl W11128) V11121) (if (cons? W11130) (let W11131 (hd W11130) (let W11132 (shen.lazyderef (tl W11130) V11121) (if (cons? W11132) (let W11133 (hd W11132) (let W11134 (shen.lazyderef (tl W11132) V11121) (if (= W11134 ()) (do (shen.incinfs) (when (= (shen.deref W11131 V11121) (intern ":")) V11121 V11122 W11125 (freeze (when (shen.type-theory-enabled?) V11121 V11122 W11125 (freeze (shen.cut V11121 V11122 W11125 (freeze (shen.system-S-h W11129 W11133 V11120 V11121 V11122 W11125 V11124)))))))) false))) false))) false))) false)) false) (if (= W11127 false) (let W11135 (if (shen.unlocked? V11122) (do (shen.incinfs) (when (value shen.*spy*) V11121 V11122 W11125 (freeze (shen.show V11119 V11120 V11121 V11122 W11125 V11124)))) false) (if (= W11135 false) (let W11136 (if (shen.unlocked? V11122) (do (shen.incinfs) (shen.search-user-datatypes V11119 V11120 (value shen.*datatypes*) V11121 V11122 W11125 V11124)) false) (if (= W11136 false) (shen.unlock V11122 W11125) W11136)) W11135)) W11127)) W11126))))

(defun shen.show (V11143 V11144 V11145 V11146 V11147 V11148) (do (shen.line) (do (shen.show-p (shen.deref V11143 V11145)) (do (nl 2) (do (shen.show-assumptions (shen.deref V11144 V11145) 1) (do (shen.pause-for-user) false))))))

(defun shen.line () (let W11149 (inferences) (pr (cn "____________________________________________________________ " (shen.app W11149 (cn " inference" (shen.app (if (= 1 W11149) "" "s") " 
?- " shen.a)) shen.a)) (stoutput))))

(defun shen.show-p (V11150) (cond ((and (cons? V11150) (and (cons? (tl V11150)) (and (cons? (tl (tl V11150))) (and (= () (tl (tl (tl V11150)))) (= (hd (tl V11150)) (intern ":")))))) (do (shen.prterm (hd V11150)) (do (pr " : " (stoutput)) (pr (shen.app (hd (tl (tl V11150))) "" shen.r) (stoutput))))) (true (shen.prterm V11150))))

(defun shen.prterm (V11151) (cond ((and (cons? V11151) (and (= cons (hd V11151)) (and (cons? (tl V11151)) (and (cons? (tl (tl V11151))) (= () (tl (tl (tl V11151)))))))) (do (pr "[" (stoutput)) (do (shen.prterm (hd (tl V11151))) (do (shen.prtl (hd (tl (tl V11151)))) (pr "]" (stoutput)))))) ((cons? V11151) (do (pr "(" (stoutput)) (do (shen.prterm (hd V11151)) (do (map (lambda Z11152 (do (pr " " (stoutput)) (shen.prterm Z11152))) (tl V11151)) (pr ")" (stoutput)))))) (true (print V11151))))

(defun shen.prtl (V11153) (cond ((= () V11153) "") ((and (cons? V11153) (and (= cons (hd V11153)) (and (cons? (tl V11153)) (and (cons? (tl (tl V11153))) (= () (tl (tl (tl V11153)))))))) (do (pr " " (stoutput)) (do (shen.prterm (hd (tl V11153))) (shen.prtl (hd (tl (tl V11153))))))) (true (do (pr " | " (stoutput)) (shen.prterm V11153)))))

(defun shen.show-assumptions (V11160 V11161) (cond ((= () V11160) (pr "
> " (stoutput))) ((cons? V11160) (do (pr (shen.app V11161 ". " shen.a) (stoutput)) (do (shen.show-p (hd V11160)) (do (nl 1) (shen.show-assumptions (tl V11160) (+ V11161 1)))))) (true (simple-error "implementation error in shen.show-assumptions"))))

(defun shen.pause-for-user () (let W11162 (read-byte (stinput)) (if (= W11162 94) (simple-error "input aborted
") (nl 1))))

(defun shen.type-theory-enabled? () (value shen.*shen-type-theory-enabled?*))

(defun shen.maxinfexceeded? () (if (> (inferences) (value shen.*maxinferences*)) (simple-error "maximum inferences exceeded") false))

(defun shen.system-S-h (V11163 V11164 V11165 V11166 V11167 V11168 V11169) (let W11170 (+ V11168 1) (let W11171 (if (shen.unlocked? V11167) (do (shen.incinfs) (when (value shen.*spy*) V11166 V11167 W11170 (freeze (shen.show (cons V11163 (cons (intern ":") (cons V11164 ()))) V11165 V11166 V11167 W11170 V11169)))) false) (if (= W11171 false) (let W11172 (if (shen.unlocked? V11167) (do (shen.incinfs) (when (not (cons? (shen.lazyderef V11163 V11166))) V11166 V11167 W11170 (freeze (shen.primitive V11163 V11164 V11166 V11167 W11170 V11169)))) false) (if (= W11172 false) (let W11173 (if (shen.unlocked? V11167) (do (shen.incinfs) (shen.by-hypothesis V11163 V11164 V11165 V11166 V11167 W11170 V11169)) false) (if (= W11173 false) (let W11174 (if (shen.unlocked? V11167) (let W11175 (shen.lazyderef V11163 V11166) (if (cons? W11175) (let W11176 (hd W11175) (let W11177 (shen.lazyderef (tl W11175) V11166) (if (= W11177 ()) (do (shen.incinfs) (shen.lookupsig W11176 (cons --> (cons V11164 ())) V11166 V11167 W11170 V11169)) false))) false)) false) (if (= W11174 false) (let W11178 (if (shen.unlocked? V11167) (let W11179 (shen.lazyderef V11163 V11166) (if (cons? W11179) (let W11180 (shen.lazyderef (hd W11179) V11166) (if (= W11180 fn) (let W11181 (shen.lazyderef (tl W11179) V11166) (if (cons? W11181) (let W11182 (hd W11181) (let W11183 (shen.lazyderef (tl W11181) V11166) (if (= W11183 ()) (do (shen.incinfs) (shen.lookupsig W11182 V11164 V11166 V11167 W11170 V11169)) false))) false)) false)) false)) false) (if (= W11178 false) (let W11184 (if (shen.unlocked? V11167) (let W11185 (shen.lazyderef V11163 V11166) (if (cons? W11185) (let W11186 (hd W11185) (let W11187 (shen.lazyderef (tl W11185) V11166) (if (cons? W11187) (let W11188 (hd W11187) (let W11189 (shen.lazyderef (tl W11187) V11166) (if (= W11189 ()) (let W11190 (shen.newpv V11166) (shen.gc V11166 (do (shen.incinfs) (when (not (cons? (shen.lazyderef W11186 V11166))) V11166 V11167 W11170 (freeze (shen.lookupsig W11186 (cons W11190 (cons --> (cons V11164 ()))) V11166 V11167 W11170 (freeze (shen.system-S-h W11188 W11190 V11165 V11166 V11167 W11170 V11169)))))))) false))) false))) false)) false) (if (= W11184 false) (let W11191 (if (shen.unlocked? V11167) (let W11192 (shen.lazyderef V11163 V11166) (if (cons? W11192) (let W11193 (hd W11192) (let W11194 (shen.lazyderef (tl W11192) V11166) (if (cons? W11194) (let W11195 (hd W11194) (let W11196 (shen.lazyderef (tl W11194) V11166) (if (= W11196 ()) (let W11197 (shen.newpv V11166) (shen.gc V11166 (do (shen.incinfs) (shen.system-S-h W11193 (cons W11197 (cons --> (cons V11164 ()))) V11165 V11166 V11167 W11170 (freeze (shen.system-S-h W11195 W11197 V11165 V11166 V11167 W11170 V11169)))))) false))) false))) false)) false) (if (= W11191 false) (let W11198 (if (shen.unlocked? V11167) (let W11199 (shen.lazyderef V11163 V11166) (if (cons? W11199) (let W11200 (shen.lazyderef (hd W11199) V11166) (if (= W11200 cons) (let W11201 (shen.lazyderef (tl W11199) V11166) (if (cons? W11201) (let W11202 (hd W11201) (let W11203 (shen.lazyderef (tl W11201) V11166) (if (cons? W11203) (let W11204 (hd W11203) (let W11205 (shen.lazyderef (tl W11203) V11166) (if (= W11205 ()) (let W11206 (shen.lazyderef V11164 V11166) (let W11207 (lambda Z11208 (do (shen.incinfs) (shen.system-S-h W11202 Z11208 V11165 V11166 V11167 W11170 (freeze (shen.system-S-h W11204 (cons list (cons Z11208 ())) V11165 V11166 V11167 W11170 V11169))))) (if (cons? W11206) (let W11209 (shen.lazyderef (hd W11206) V11166) (let W11210 (freeze (let W11211 (shen.lazyderef (tl W11206) V11166) (let W11212 (lambda Z11213 (W11207 Z11213)) (if (cons? W11211) (let W11214 (hd W11211) (let W11215 (shen.lazyderef (tl W11211) V11166) (let W11216 (freeze (W11212 W11214)) (if (= W11215 ()) (thaw W11216) (if (shen.pvar? W11215) (shen.bind! W11215 () V11166 W11216) false))))) (if (shen.pvar? W11211) (let W11217 (shen.newpv V11166) (shen.gc V11166 (shen.bind! W11211 (cons W11217 ()) V11166 (freeze (W11212 W11217))))) false))))) (if (= W11209 list) (thaw W11210) (if (shen.pvar? W11209) (shen.bind! W11209 list V11166 W11210) false)))) (if (shen.pvar? W11206) (let W11218 (shen.newpv V11166) (shen.gc V11166 (shen.bind! W11206 (cons list (cons W11218 ())) V11166 (freeze (W11207 W11218))))) false)))) false))) false))) false)) false)) false)) false) (if (= W11198 false) (let W11219 (if (shen.unlocked? V11167) (let W11220 (shen.lazyderef V11163 V11166) (if (cons? W11220) (let W11221 (shen.lazyderef (hd W11220) V11166) (if (= W11221 @p) (let W11222 (shen.lazyderef (tl W11220) V11166) (if (cons? W11222) (let W11223 (hd W11222) (let W11224 (shen.lazyderef (tl W11222) V11166) (if (cons? W11224) (let W11225 (hd W11224) (let W11226 (shen.lazyderef (tl W11224) V11166) (if (= W11226 ()) (let W11227 (shen.lazyderef V11164 V11166) (let W11228 (lambda Z11229 (lambda Z11230 (do (shen.incinfs) (shen.system-S-h W11223 Z11229 V11165 V11166 V11167 W11170 (freeze (shen.system-S-h W11225 Z11230 V11165 V11166 V11167 W11170 V11169)))))) (if (cons? W11227) (let W11231 (hd W11227) (let W11232 (shen.lazyderef (tl W11227) V11166) (let W11233 (lambda Z11234 ((W11228 W11231) Z11234)) (if (cons? W11232) (let W11235 (shen.lazyderef (hd W11232) V11166) (let W11236 (freeze (let W11237 (shen.lazyderef (tl W11232) V11166) (let W11238 (lambda Z11239 (W11233 Z11239)) (if (cons? W11237) (let W11240 (hd W11237) (let W11241 (shen.lazyderef (tl W11237) V11166) (let W11242 (freeze (W11238 W11240)) (if (= W11241 ()) (thaw W11242) (if (shen.pvar? W11241) (shen.bind! W11241 () V11166 W11242) false))))) (if (shen.pvar? W11237) (let W11243 (shen.newpv V11166) (shen.gc V11166 (shen.bind! W11237 (cons W11243 ()) V11166 (freeze (W11238 W11243))))) false))))) (if (= W11235 *) (thaw W11236) (if (shen.pvar? W11235) (shen.bind! W11235 * V11166 W11236) false)))) (if (shen.pvar? W11232) (let W11244 (shen.newpv V11166) (shen.gc V11166 (shen.bind! W11232 (cons * (cons W11244 ())) V11166 (freeze (W11233 W11244))))) false))))) (if (shen.pvar? W11227) (let W11245 (shen.newpv V11166) (shen.gc V11166 (let W11246 (shen.newpv V11166) (shen.gc V11166 (shen.bind! W11227 (cons W11245 (cons * (cons W11246 ()))) V11166 (freeze ((W11228 W11245) W11246))))))) false)))) false))) false))) false)) false)) false)) false) (if (= W11219 false) (let W11247 (if (shen.unlocked? V11167) (let W11248 (shen.lazyderef V11163 V11166) (if (cons? W11248) (let W11249 (shen.lazyderef (hd W11248) V11166) (if (= W11249 @v) (let W11250 (shen.lazyderef (tl W11248) V11166) (if (cons? W11250) (let W11251 (hd W11250) (let W11252 (shen.lazyderef (tl W11250) V11166) (if (cons? W11252) (let W11253 (hd W11252) (let W11254 (shen.lazyderef (tl W11252) V11166) (if (= W11254 ()) (let W11255 (shen.lazyderef V11164 V11166) (let W11256 (lambda Z11257 (do (shen.incinfs) (shen.system-S-h W11251 Z11257 V11165 V11166 V11167 W11170 (freeze (shen.system-S-h W11253 (cons vector (cons Z11257 ())) V11165 V11166 V11167 W11170 V11169))))) (if (cons? W11255) (let W11258 (shen.lazyderef (hd W11255) V11166) (let W11259 (freeze (let W11260 (shen.lazyderef (tl W11255) V11166) (let W11261 (lambda Z11262 (W11256 Z11262)) (if (cons? W11260) (let W11263 (hd W11260) (let W11264 (shen.lazyderef (tl W11260) V11166) (let W11265 (freeze (W11261 W11263)) (if (= W11264 ()) (thaw W11265) (if (shen.pvar? W11264) (shen.bind! W11264 () V11166 W11265) false))))) (if (shen.pvar? W11260) (let W11266 (shen.newpv V11166) (shen.gc V11166 (shen.bind! W11260 (cons W11266 ()) V11166 (freeze (W11261 W11266))))) false))))) (if (= W11258 vector) (thaw W11259) (if (shen.pvar? W11258) (shen.bind! W11258 vector V11166 W11259) false)))) (if (shen.pvar? W11255) (let W11267 (shen.newpv V11166) (shen.gc V11166 (shen.bind! W11255 (cons vector (cons W11267 ())) V11166 (freeze (W11256 W11267))))) false)))) false))) false))) false)) false)) false)) false) (if (= W11247 false) (let W11268 (if (shen.unlocked? V11167) (let W11269 (shen.lazyderef V11163 V11166) (if (cons? W11269) (let W11270 (shen.lazyderef (hd W11269) V11166) (if (= W11270 @s) (let W11271 (shen.lazyderef (tl W11269) V11166) (if (cons? W11271) (let W11272 (hd W11271) (let W11273 (shen.lazyderef (tl W11271) V11166) (if (cons? W11273) (let W11274 (hd W11273) (let W11275 (shen.lazyderef (tl W11273) V11166) (if (= W11275 ()) (let W11276 (shen.lazyderef V11164 V11166) (let W11277 (freeze (do (shen.incinfs) (shen.system-S-h W11272 string V11165 V11166 V11167 W11170 (freeze (shen.system-S-h W11274 string V11165 V11166 V11167 W11170 V11169))))) (if (= W11276 string) (thaw W11277) (if (shen.pvar? W11276) (shen.bind! W11276 string V11166 W11277) false)))) false))) false))) false)) false)) false)) false) (if (= W11268 false) (let W11278 (if (shen.unlocked? V11167) (let W11279 (shen.lazyderef V11163 V11166) (if (cons? W11279) (let W11280 (shen.lazyderef (hd W11279) V11166) (if (= W11280 lambda) (let W11281 (shen.lazyderef (tl W11279) V11166) (if (cons? W11281) (let W11282 (hd W11281) (let W11283 (shen.lazyderef (tl W11281) V11166) (if (cons? W11283) (let W11284 (hd W11283) (let W11285 (shen.lazyderef (tl W11283) V11166) (if (= W11285 ()) (let W11286 (shen.lazyderef V11164 V11166) (let W11287 (lambda Z11288 (lambda Z11289 (let W11290 (shen.newpv V11166) (shen.gc V11166 (let W11291 (shen.newpv V11166) (shen.gc V11166 (do (shen.incinfs) (bind W11291 (shen.freshterm (shen.lazyderef W11282 V11166)) V11166 V11167 W11170 (freeze (bind W11290 (shen.beta (shen.lazyderef W11282 V11166) (shen.deref W11291 V11166) (shen.deref W11284 V11166)) V11166 V11167 W11170 (freeze (shen.system-S-h W11290 Z11289 (cons (cons W11291 (cons (intern ":") (cons Z11288 ()))) V11165) V11166 V11167 W11170 V11169)))))))))))) (if (cons? W11286) (let W11292 (hd W11286) (let W11293 (shen.lazyderef (tl W11286) V11166) (let W11294 (lambda Z11295 ((W11287 W11292) Z11295)) (if (cons? W11293) (let W11296 (shen.lazyderef (hd W11293) V11166) (let W11297 (freeze (let W11298 (shen.lazyderef (tl W11293) V11166) (let W11299 (lambda Z11300 (W11294 Z11300)) (if (cons? W11298) (let W11301 (hd W11298) (let W11302 (shen.lazyderef (tl W11298) V11166) (let W11303 (freeze (W11299 W11301)) (if (= W11302 ()) (thaw W11303) (if (shen.pvar? W11302) (shen.bind! W11302 () V11166 W11303) false))))) (if (shen.pvar? W11298) (let W11304 (shen.newpv V11166) (shen.gc V11166 (shen.bind! W11298 (cons W11304 ()) V11166 (freeze (W11299 W11304))))) false))))) (if (= W11296 -->) (thaw W11297) (if (shen.pvar? W11296) (shen.bind! W11296 --> V11166 W11297) false)))) (if (shen.pvar? W11293) (let W11305 (shen.newpv V11166) (shen.gc V11166 (shen.bind! W11293 (cons --> (cons W11305 ())) V11166 (freeze (W11294 W11305))))) false))))) (if (shen.pvar? W11286) (let W11306 (shen.newpv V11166) (shen.gc V11166 (let W11307 (shen.newpv V11166) (shen.gc V11166 (shen.bind! W11286 (cons W11306 (cons --> (cons W11307 ()))) V11166 (freeze ((W11287 W11306) W11307))))))) false)))) false))) false))) false)) false)) false)) false) (if (= W11278 false) (let W11308 (if (shen.unlocked? V11167) (let W11309 (shen.lazyderef V11163 V11166) (if (cons? W11309) (let W11310 (shen.lazyderef (hd W11309) V11166) (if (= W11310 let) (let W11311 (shen.lazyderef (tl W11309) V11166) (if (cons? W11311) (let W11312 (hd W11311) (let W11313 (shen.lazyderef (tl W11311) V11166) (if (cons? W11313) (let W11314 (hd W11313) (let W11315 (shen.lazyderef (tl W11313) V11166) (if (cons? W11315) (let W11316 (hd W11315) (let W11317 (shen.lazyderef (tl W11315) V11166) (if (= W11317 ()) (let W11318 (shen.newpv V11166) (shen.gc V11166 (let W11319 (shen.newpv V11166) (shen.gc V11166 (let W11320 (shen.newpv V11166) (shen.gc V11166 (do (shen.incinfs) (shen.system-S-h W11314 W11320 V11165 V11166 V11167 W11170 (freeze (bind W11319 (shen.freshterm (shen.lazyderef W11312 V11166)) V11166 V11167 W11170 (freeze (bind W11318 (shen.beta (shen.lazyderef W11312 V11166) (shen.lazyderef W11319 V11166) (shen.lazyderef W11316 V11166)) V11166 V11167 W11170 (freeze (shen.system-S-h W11318 V11164 (cons (cons W11319 (cons (intern ":") (cons W11320 ()))) V11165) V11166 V11167 W11170 V11169)))))))))))))) false))) false))) false))) false)) false)) false)) false) (if (= W11308 false) (let W11321 (if (shen.unlocked? V11167) (let W11322 (shen.lazyderef V11163 V11166) (if (cons? W11322) (let W11323 (shen.lazyderef (hd W11322) V11166) (if (= W11323 open) (let W11324 (shen.lazyderef (tl W11322) V11166) (if (cons? W11324) (let W11325 (hd W11324) (let W11326 (shen.lazyderef (tl W11324) V11166) (if (cons? W11326) (let W11327 (hd W11326) (let W11328 (shen.lazyderef (tl W11326) V11166) (if (= W11328 ()) (let W11329 (shen.lazyderef V11164 V11166) (let W11330 (lambda Z11331 (do (shen.incinfs) (is! W11327 Z11331 V11166 V11167 W11170 (freeze (when (element? (shen.lazyderef Z11331 V11166) (cons in (cons out ()))) V11166 V11167 W11170 (freeze (shen.system-S-h W11325 string V11165 V11166 V11167 W11170 V11169))))))) (if (cons? W11329) (let W11332 (shen.lazyderef (hd W11329) V11166) (let W11333 (freeze (let W11334 (shen.lazyderef (tl W11329) V11166) (let W11335 (lambda Z11336 (W11330 Z11336)) (if (cons? W11334) (let W11337 (hd W11334) (let W11338 (shen.lazyderef (tl W11334) V11166) (let W11339 (freeze (W11335 W11337)) (if (= W11338 ()) (thaw W11339) (if (shen.pvar? W11338) (shen.bind! W11338 () V11166 W11339) false))))) (if (shen.pvar? W11334) (let W11340 (shen.newpv V11166) (shen.gc V11166 (shen.bind! W11334 (cons W11340 ()) V11166 (freeze (W11335 W11340))))) false))))) (if (= W11332 stream) (thaw W11333) (if (shen.pvar? W11332) (shen.bind! W11332 stream V11166 W11333) false)))) (if (shen.pvar? W11329) (let W11341 (shen.newpv V11166) (shen.gc V11166 (shen.bind! W11329 (cons stream (cons W11341 ())) V11166 (freeze (W11330 W11341))))) false)))) false))) false))) false)) false)) false)) false) (if (= W11321 false) (let W11342 (if (shen.unlocked? V11167) (let W11343 (shen.lazyderef V11163 V11166) (if (cons? W11343) (let W11344 (shen.lazyderef (hd W11343) V11166) (if (= W11344 type) (let W11345 (shen.lazyderef (tl W11343) V11166) (if (cons? W11345) (let W11346 (hd W11345) (let W11347 (shen.lazyderef (tl W11345) V11166) (if (cons? W11347) (let W11348 (hd W11347) (let W11349 (shen.lazyderef (tl W11347) V11166) (if (= W11349 ()) (do (shen.incinfs) (shen.cut V11166 V11167 W11170 (freeze (is! (shen.rectify-type (shen.deref W11348 V11166)) V11164 V11166 V11167 W11170 (freeze (shen.system-S-h W11346 V11164 V11165 V11166 V11167 W11170 V11169)))))) false))) false))) false)) false)) false)) false) (if (= W11342 false) (let W11350 (if (shen.unlocked? V11167) (let W11351 (shen.lazyderef V11163 V11166) (if (cons? W11351) (let W11352 (shen.lazyderef (hd W11351) V11166) (if (= W11352 input+) (let W11353 (shen.lazyderef (tl W11351) V11166) (if (cons? W11353) (let W11354 (hd W11353) (let W11355 (shen.lazyderef (tl W11353) V11166) (if (cons? W11355) (let W11356 (hd W11355) (let W11357 (shen.lazyderef (tl W11355) V11166) (if (= W11357 ()) (do (shen.incinfs) (is! V11164 (shen.rectify-type (shen.deref W11354 V11166)) V11166 V11167 W11170 (freeze (shen.system-S-h W11356 (cons stream (cons in ())) V11165 V11166 V11167 W11170 V11169)))) false))) false))) false)) false)) false)) false) (if (= W11350 false) (let W11358 (if (shen.unlocked? V11167) (let W11359 (shen.lazyderef V11163 V11166) (if (cons? W11359) (let W11360 (shen.lazyderef (hd W11359) V11166) (if (= W11360 set) (let W11361 (shen.lazyderef (tl W11359) V11166) (if (cons? W11361) (let W11362 (hd W11361) (let W11363 (shen.lazyderef (tl W11361) V11166) (if (cons? W11363) (let W11364 (hd W11363) (let W11365 (shen.lazyderef (tl W11363) V11166) (if (= W11365 ()) (do (shen.incinfs) (shen.system-S-h W11362 symbol V11165 V11166 V11167 W11170 (freeze (shen.system-S-h (cons value (cons W11362 ())) V11164 V11165 V11166 V11167 W11170 (freeze (shen.system-S-h W11364 V11164 V11165 V11166 V11167 W11170 V11169)))))) false))) false))) false)) false)) false)) false) (if (= W11358 false) (let W11366 (if (shen.unlocked? V11167) (let W11367 (shen.newpv V11166) (shen.gc V11166 (do (shen.incinfs) (shen.l-rules V11165 W11367 false V11166 V11167 W11170 (freeze (shen.cut V11166 V11167 W11170 (freeze (shen.system-S-h V11163 V11164 W11367 V11166 V11167 W11170 V11169)))))))) false) (if (= W11366 false) (let W11368 (if (shen.unlocked? V11167) (do (shen.incinfs) (shen.search-user-datatypes (cons V11163 (cons (intern ":") (cons V11164 ()))) V11165 (value shen.*datatypes*) V11166 V11167 W11170 V11169)) false) (if (= W11368 false) (shen.unlock V11167 W11170) W11368)) W11366)) W11358)) W11350)) W11342)) W11321)) W11308)) W11278)) W11268)) W11247)) W11219)) W11198)) W11191)) W11184)) W11178)) W11174)) W11173)) W11172)) W11171))))

(defun shen.primitive (V11369 V11370 V11371 V11372 V11373 V11374) (let W11375 (if (shen.unlocked? V11372) (let W11376 (shen.lazyderef V11370 V11371) (let W11377 (freeze (do (shen.incinfs) (when (number? (shen.lazyderef V11369 V11371)) V11371 V11372 V11373 V11374))) (if (= W11376 number) (thaw W11377) (if (shen.pvar? W11376) (shen.bind! W11376 number V11371 W11377) false)))) false) (if (= W11375 false) (let W11378 (if (shen.unlocked? V11372) (let W11379 (shen.lazyderef V11370 V11371) (let W11380 (freeze (do (shen.incinfs) (when (boolean? (shen.lazyderef V11369 V11371)) V11371 V11372 V11373 V11374))) (if (= W11379 boolean) (thaw W11380) (if (shen.pvar? W11379) (shen.bind! W11379 boolean V11371 W11380) false)))) false) (if (= W11378 false) (let W11381 (if (shen.unlocked? V11372) (let W11382 (shen.lazyderef V11370 V11371) (let W11383 (freeze (do (shen.incinfs) (when (string? (shen.lazyderef V11369 V11371)) V11371 V11372 V11373 V11374))) (if (= W11382 string) (thaw W11383) (if (shen.pvar? W11382) (shen.bind! W11382 string V11371 W11383) false)))) false) (if (= W11381 false) (let W11384 (if (shen.unlocked? V11372) (let W11385 (shen.lazyderef V11370 V11371) (let W11386 (freeze (do (shen.incinfs) (when (symbol? (shen.lazyderef V11369 V11371)) V11371 V11372 V11373 V11374))) (if (= W11385 symbol) (thaw W11386) (if (shen.pvar? W11385) (shen.bind! W11385 symbol V11371 W11386) false)))) false) (if (= W11384 false) (if (shen.unlocked? V11372) (let W11387 (shen.lazyderef V11369 V11371) (if (= W11387 ()) (let W11388 (shen.lazyderef V11370 V11371) (let W11389 (lambda Z11390 (do (shen.incinfs) (thaw V11374))) (if (cons? W11388) (let W11391 (shen.lazyderef (hd W11388) V11371) (let W11392 (freeze (let W11393 (shen.lazyderef (tl W11388) V11371) (let W11394 (lambda Z11395 (W11389 Z11395)) (if (cons? W11393) (let W11396 (hd W11393) (let W11397 (shen.lazyderef (tl W11393) V11371) (let W11398 (freeze (W11394 W11396)) (if (= W11397 ()) (thaw W11398) (if (shen.pvar? W11397) (shen.bind! W11397 () V11371 W11398) false))))) (if (shen.pvar? W11393) (let W11399 (shen.newpv V11371) (shen.gc V11371 (shen.bind! W11393 (cons W11399 ()) V11371 (freeze (W11394 W11399))))) false))))) (if (= W11391 list) (thaw W11392) (if (shen.pvar? W11391) (shen.bind! W11391 list V11371 W11392) false)))) (if (shen.pvar? W11388) (let W11400 (shen.newpv V11371) (shen.gc V11371 (shen.bind! W11388 (cons list (cons W11400 ())) V11371 (freeze (W11389 W11400))))) false)))) false)) false) W11384)) W11381)) W11378)) W11375)))

(defun shen.by-hypothesis (V11401 V11402 V11403 V11404 V11405 V11406 V11407) (let W11408 (if (shen.unlocked? V11405) (let W11409 (shen.lazyderef V11403 V11404) (if (cons? W11409) (let W11410 (shen.lazyderef (hd W11409) V11404) (if (cons? W11410) (let W11411 (hd W11410) (let W11412 (shen.lazyderef (tl W11410) V11404) (if (cons? W11412) (let W11413 (hd W11412) (let W11414 (shen.lazyderef (tl W11412) V11404) (if (cons? W11414) (let W11415 (hd W11414) (let W11416 (shen.lazyderef (tl W11414) V11404) (if (= W11416 ()) (do (shen.incinfs) (when (= (shen.deref W11413 V11404) (intern ":")) V11404 V11405 V11406 (freeze (when (= (shen.deref V11401 V11404) (shen.deref W11411 V11404)) V11404 V11405 V11406 (freeze (is! V11402 W11415 V11404 V11405 V11406 V11407)))))) false))) false))) false))) false)) false)) false) (if (= W11408 false) (if (shen.unlocked? V11405) (let W11417 (shen.lazyderef V11403 V11404) (if (cons? W11417) (let W11418 (tl W11417) (do (shen.incinfs) (shen.by-hypothesis V11401 V11402 W11418 V11404 V11405 V11406 V11407))) false)) false) W11408)))

(defun shen.lookupsig (V11419 V11420 V11421 V11422 V11423 V11424) (if (shen.unlocked? V11422) (do (shen.incinfs) (shen.sigf (assoc V11419 (value shen.*sigf*)) V11420 V11421 V11422 V11423 V11424)) false))

(defun shen.sigf (V11439 V11440 V11441 V11442 V11443 V11444) (cond ((cons? V11439) ((((((tl V11439) V11440) V11441) V11442) V11443) V11444)) (true false)))

(defun shen.freshterm (V11445) (let W11446 (absvector 3) (let W11447 (address-> W11446 0 shen.print-freshterm) (let W11448 (address-> W11447 1 V11445) (let W11449 (address-> W11448 2 (set shen.*gensym* (+ 1 (value shen.*gensym*)))) W11449)))))

(defun shen.print-freshterm (V11450) (cn "&&" (str (<-address V11450 1))))

(defun shen.search-user-datatypes (V11451 V11452 V11453 V11454 V11455 V11456 V11457) (let W11458 (if (shen.unlocked? V11455) (let W11459 (shen.lazyderef V11453 V11454) (if (cons? W11459) (let W11460 (shen.lazyderef (hd W11459) V11454) (if (cons? W11460) (let W11461 (tl W11460) (do (shen.incinfs) (call (((shen.deref W11461 V11454) (shen.deref V11451 V11454)) (shen.deref V11452 V11454)) V11454 V11455 V11456 V11457))) false)) false)) false) (if (= W11458 false) (if (shen.unlocked? V11455) (let W11462 (shen.lazyderef V11453 V11454) (if (cons? W11462) (let W11463 (tl W11462) (do (shen.incinfs) (shen.search-user-datatypes V11451 V11452 W11463 V11454 V11455 V11456 V11457))) false)) false) W11458)))

(defun shen.l-rules (V11464 V11465 V11466 V11467 V11468 V11469 V11470) (let W11471 (+ V11469 1) (let W11472 (if (shen.unlocked? V11468) (let W11473 (shen.lazyderef V11464 V11467) (if (= W11473 ()) (let W11474 (shen.lazyderef V11466 V11467) (if (= W11474 true) (do (shen.incinfs) (shen.cut V11467 V11468 W11471 (freeze (bind V11465 () V11467 V11468 W11471 V11470)))) false)) false)) false) (if (= W11472 false) (let W11475 (if (shen.unlocked? V11468) (let W11476 (shen.lazyderef V11464 V11467) (if (cons? W11476) (let W11477 (shen.lazyderef (hd W11476) V11467) (if (cons? W11477) (let W11478 (shen.lazyderef (hd W11477) V11467) (if (cons? W11478) (let W11479 (shen.lazyderef (hd W11478) V11467) (if (= W11479 cons) (let W11480 (shen.lazyderef (tl W11478) V11467) (if (cons? W11480) (let W11481 (hd W11480) (let W11482 (shen.lazyderef (tl W11480) V11467) (if (cons? W11482) (let W11483 (hd W11482) (let W11484 (shen.lazyderef (tl W11482) V11467) (if (= W11484 ()) (let W11485 (shen.lazyderef (tl W11477) V11467) (if (cons? W11485) (let W11486 (hd W11485) (let W11487 (shen.lazyderef (tl W11485) V11467) (if (cons? W11487) (let W11488 (shen.lazyderef (hd W11487) V11467) (if (cons? W11488) (let W11489 (shen.lazyderef (hd W11488) V11467) (if (= W11489 list) (let W11490 (shen.lazyderef (tl W11488) V11467) (if (cons? W11490) (let W11491 (hd W11490) (let W11492 (shen.lazyderef (tl W11490) V11467) (if (= W11492 ()) (let W11493 (shen.lazyderef (tl W11487) V11467) (if (= W11493 ()) (let W11494 (tl W11476) (do (shen.incinfs) (when (= (shen.deref W11486 V11467) (intern ":")) V11467 V11468 W11471 (freeze (shen.cut V11467 V11468 W11471 (freeze (shen.l-rules (cons (cons W11481 (cons W11486 (cons W11491 ()))) (cons (cons W11483 (cons W11486 (cons (cons list (cons W11491 ())) ()))) W11494)) V11465 true V11467 V11468 W11471 V11470))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W11475 false) (let W11495 (if (shen.unlocked? V11468) (let W11496 (shen.lazyderef V11464 V11467) (if (cons? W11496) (let W11497 (shen.lazyderef (hd W11496) V11467) (if (cons? W11497) (let W11498 (shen.lazyderef (hd W11497) V11467) (if (cons? W11498) (let W11499 (shen.lazyderef (hd W11498) V11467) (if (= W11499 @p) (let W11500 (shen.lazyderef (tl W11498) V11467) (if (cons? W11500) (let W11501 (hd W11500) (let W11502 (shen.lazyderef (tl W11500) V11467) (if (cons? W11502) (let W11503 (hd W11502) (let W11504 (shen.lazyderef (tl W11502) V11467) (if (= W11504 ()) (let W11505 (shen.lazyderef (tl W11497) V11467) (if (cons? W11505) (let W11506 (hd W11505) (let W11507 (shen.lazyderef (tl W11505) V11467) (if (cons? W11507) (let W11508 (shen.lazyderef (hd W11507) V11467) (if (cons? W11508) (let W11509 (hd W11508) (let W11510 (shen.lazyderef (tl W11508) V11467) (if (cons? W11510) (let W11511 (shen.lazyderef (hd W11510) V11467) (if (= W11511 *) (let W11512 (shen.lazyderef (tl W11510) V11467) (if (cons? W11512) (let W11513 (hd W11512) (let W11514 (shen.lazyderef (tl W11512) V11467) (if (= W11514 ()) (let W11515 (shen.lazyderef (tl W11507) V11467) (if (= W11515 ()) (let W11516 (tl W11496) (do (shen.incinfs) (when (= (shen.deref W11506 V11467) (intern ":")) V11467 V11468 W11471 (freeze (shen.cut V11467 V11468 W11471 (freeze (shen.l-rules (cons (cons W11501 (cons W11506 (cons W11509 ()))) (cons (cons W11503 (cons W11506 (cons W11513 ()))) W11516)) V11465 true V11467 V11468 W11471 V11470))))))) false)) false))) false)) false)) false))) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W11495 false) (let W11517 (if (shen.unlocked? V11468) (let W11518 (shen.lazyderef V11464 V11467) (if (cons? W11518) (let W11519 (shen.lazyderef (hd W11518) V11467) (if (cons? W11519) (let W11520 (shen.lazyderef (hd W11519) V11467) (if (cons? W11520) (let W11521 (shen.lazyderef (hd W11520) V11467) (if (= W11521 @s) (let W11522 (shen.lazyderef (tl W11520) V11467) (if (cons? W11522) (let W11523 (hd W11522) (let W11524 (shen.lazyderef (tl W11522) V11467) (if (cons? W11524) (let W11525 (hd W11524) (let W11526 (shen.lazyderef (tl W11524) V11467) (if (= W11526 ()) (let W11527 (shen.lazyderef (tl W11519) V11467) (if (cons? W11527) (let W11528 (hd W11527) (let W11529 (shen.lazyderef (tl W11527) V11467) (if (cons? W11529) (let W11530 (shen.lazyderef (hd W11529) V11467) (if (= W11530 string) (let W11531 (shen.lazyderef (tl W11529) V11467) (if (= W11531 ()) (let W11532 (tl W11518) (do (shen.incinfs) (when (= (shen.deref W11528 V11467) (intern ":")) V11467 V11468 W11471 (freeze (shen.cut V11467 V11468 W11471 (freeze (shen.l-rules (cons (cons W11523 (cons W11528 (cons string ()))) (cons (cons W11525 (cons W11528 (cons string ()))) W11532)) V11465 true V11467 V11468 W11471 V11470))))))) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W11517 false) (let W11533 (if (shen.unlocked? V11468) (let W11534 (shen.lazyderef V11464 V11467) (if (cons? W11534) (let W11535 (shen.lazyderef (hd W11534) V11467) (if (cons? W11535) (let W11536 (shen.lazyderef (hd W11535) V11467) (if (cons? W11536) (let W11537 (shen.lazyderef (hd W11536) V11467) (if (= W11537 @v) (let W11538 (shen.lazyderef (tl W11536) V11467) (if (cons? W11538) (let W11539 (hd W11538) (let W11540 (shen.lazyderef (tl W11538) V11467) (if (cons? W11540) (let W11541 (hd W11540) (let W11542 (shen.lazyderef (tl W11540) V11467) (if (= W11542 ()) (let W11543 (shen.lazyderef (tl W11535) V11467) (if (cons? W11543) (let W11544 (hd W11543) (let W11545 (shen.lazyderef (tl W11543) V11467) (if (cons? W11545) (let W11546 (shen.lazyderef (hd W11545) V11467) (if (cons? W11546) (let W11547 (shen.lazyderef (hd W11546) V11467) (if (= W11547 vector) (let W11548 (shen.lazyderef (tl W11546) V11467) (if (cons? W11548) (let W11549 (hd W11548) (let W11550 (shen.lazyderef (tl W11548) V11467) (if (= W11550 ()) (let W11551 (shen.lazyderef (tl W11545) V11467) (if (= W11551 ()) (let W11552 (tl W11534) (do (shen.incinfs) (when (= (shen.deref W11544 V11467) (intern ":")) V11467 V11468 W11471 (freeze (shen.cut V11467 V11468 W11471 (freeze (shen.l-rules (cons (cons W11539 (cons W11544 (cons W11549 ()))) (cons (cons W11541 (cons W11544 (cons (cons vector (cons W11549 ())) ()))) W11552)) V11465 true V11467 V11468 W11471 V11470))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W11533 false) (let W11553 (if (shen.unlocked? V11468) (let W11554 (shen.lazyderef V11464 V11467) (if (cons? W11554) (let W11555 (hd W11554) (let W11556 (tl W11554) (let W11557 (shen.lazyderef V11465 V11467) (let W11558 (lambda Z11559 (lambda Z11560 (do (shen.incinfs) (bind Z11559 W11555 V11467 V11468 W11471 (freeze (shen.l-rules W11556 Z11560 V11466 V11467 V11468 W11471 V11470)))))) (if (cons? W11557) (let W11561 (hd W11557) (let W11562 (tl W11557) ((W11558 W11561) W11562))) (if (shen.pvar? W11557) (let W11563 (shen.newpv V11467) (shen.gc V11467 (let W11564 (shen.newpv V11467) (shen.gc V11467 (shen.bind! W11557 (cons W11563 W11564) V11467 (freeze ((W11558 W11563) W11564))))))) false)))))) false)) false) (if (= W11553 false) (shen.unlock V11468 W11471) W11553)) W11533)) W11517)) W11495)) W11475)) W11472))))

(defun shen.t* (V11565 V11566 V11567 V11568 V11569 V11570) (let W11571 (+ V11569 1) (let W11572 (if (shen.unlocked? V11568) (let W11573 (shen.lazyderef V11565 V11567) (if (cons? W11573) (let W11574 (shen.lazyderef (hd W11573) V11567) (if (= W11574 define) (let W11575 (shen.lazyderef (tl W11573) V11567) (if (cons? W11575) (let W11576 (hd W11575) (let W11577 (tl W11575) (let W11578 (shen.newpv V11567) (shen.gc V11567 (let W11579 (shen.newpv V11567) (shen.gc V11567 (let W11580 (shen.newpv V11567) (shen.gc V11567 (let W11581 (shen.newpv V11567) (shen.gc V11567 (do (shen.incinfs) (shen.cut V11567 V11568 W11571 (freeze (bind W11578 (shen.sigxrules (cons W11576 W11577)) V11567 V11568 W11571 (freeze (bind W11581 (fst (shen.lazyderef W11578 V11567)) V11567 V11568 W11571 (freeze (bind W11579 (snd (shen.lazyderef W11578 V11567)) V11567 V11568 W11571 (freeze (bind W11580 (shen.freshen-sig (shen.deref W11581 V11567)) V11567 V11568 W11571 (freeze (shen.t*-rules W11576 W11579 W11580 1 V11567 V11568 W11571 (freeze (is W11581 V11566 V11567 V11568 W11571 V11570)))))))))))))))))))))))) false)) false)) false)) false) (if (= W11572 false) (shen.unlock V11568 W11571) W11572))))

(defun shen.sigxrules (V11582) (compile (lambda Z11583 (shen.<sig*rules> Z11583)) V11582))

(defun shen.<sig*rules> (V11584) (let W11585 (if (shen.non-empty-stream? V11584) (let W11586 (shen.hds V11584) (let W11587 (shen.tls V11584) (if (shen.=hd? W11587 {) (let W11588 (shen.tls W11587) (let W11589 (shen.<signature> W11588) (if (shen.parse-failure? W11589) (shen.parse-failure) (if (shen.=hd? W11589 }) (let W11590 (shen.tls W11589) (let W11591 (shen.<rules*> W11590) (if (shen.parse-failure? W11591) (shen.parse-failure) (shen.comb (shen.in-> W11591) (let W11592 (shen.rectify-type (shen.<-out W11589)) (@p W11592 (shen.<-out W11591))))))) (shen.parse-failure))))) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W11585) (shen.parse-failure) W11585)))

(defun shen.freshen-sig (V11593) (let W11594 (shen.extract-vars V11593) (let W11595 (map (lambda Z11596 (cons Z11596 (shen.freshterm (concat & Z11596)))) W11594) (shen.freshen-type W11595 V11593))))

(defun shen.freshen-type (V11597 V11598) (cond ((= () V11597) V11598) ((and (cons? V11597) (cons? (hd V11597))) (shen.freshen-type (tl V11597) (subst (tl (hd V11597)) (hd (hd V11597)) V11598))) (true (shen.f-error shen.freshen-type))))

(defun shen.<rules*> (V11599) (let W11600 (let W11601 (shen.<rule*> V11599) (if (shen.parse-failure? W11601) (shen.parse-failure) (let W11602 (shen.<rules*> W11601) (if (shen.parse-failure? W11602) (shen.parse-failure) (shen.comb (shen.in-> W11602) (cons (shen.<-out W11601) (shen.<-out W11602))))))) (if (shen.parse-failure? W11600) (let W11603 (let W11604 (shen.<rule*> V11599) (if (shen.parse-failure? W11604) (shen.parse-failure) (shen.comb (shen.in-> W11604) (cons (shen.<-out W11604) ())))) (if (shen.parse-failure? W11603) (shen.parse-failure) W11603)) W11600)))

(defun shen.<rule*> (V11605) (let W11606 (let W11607 (shen.<patterns> V11605) (if (shen.parse-failure? W11607) (shen.parse-failure) (if (shen.=hd? W11607 ->) (let W11608 (shen.tls W11607) (if (shen.non-empty-stream? W11608) (let W11609 (shen.hds W11608) (let W11610 (shen.tls W11608) (if (shen.=hd? W11610 where) (let W11611 (shen.tls W11610) (if (shen.non-empty-stream? W11611) (let W11612 (shen.hds W11611) (let W11613 (shen.tls W11611) (shen.comb (shen.in-> W11613) (@p (shen.<-out W11607) (cons where (cons W11612 (cons W11609 ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? W11606) (let W11614 (let W11615 (shen.<patterns> V11605) (if (shen.parse-failure? W11615) (shen.parse-failure) (if (shen.=hd? W11615 <-) (let W11616 (shen.tls W11615) (if (shen.non-empty-stream? W11616) (let W11617 (shen.hds W11616) (let W11618 (shen.tls W11616) (if (shen.=hd? W11618 where) (let W11619 (shen.tls W11618) (if (shen.non-empty-stream? W11619) (let W11620 (shen.hds W11619) (let W11621 (shen.tls W11619) (shen.comb (shen.in-> W11621) (@p (shen.<-out W11615) (shen.correct (cons where (cons W11620 (cons W11617 ())))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? W11614) (let W11622 (let W11623 (shen.<patterns> V11605) (if (shen.parse-failure? W11623) (shen.parse-failure) (if (shen.=hd? W11623 <-) (let W11624 (shen.tls W11623) (if (shen.non-empty-stream? W11624) (let W11625 (shen.hds W11624) (let W11626 (shen.tls W11624) (shen.comb (shen.in-> W11626) (@p (shen.<-out W11623) (shen.correct W11625))))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? W11622) (let W11627 (let W11628 (shen.<patterns> V11605) (if (shen.parse-failure? W11628) (shen.parse-failure) (if (shen.=hd? W11628 ->) (let W11629 (shen.tls W11628) (if (shen.non-empty-stream? W11629) (let W11630 (shen.hds W11629) (let W11631 (shen.tls W11629) (shen.comb (shen.in-> W11631) (@p (shen.<-out W11628) W11630)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? W11627) (shen.parse-failure) W11627)) W11622)) W11614)) W11606)))

(defun shen.correct (V11632) (cond ((and (cons? V11632) (and (= where (hd V11632)) (and (cons? (tl V11632)) (and (cons? (tl (tl V11632))) (and (cons? (hd (tl (tl V11632)))) (and (= fail-if (hd (hd (tl (tl V11632))))) (and (cons? (tl (hd (tl (tl V11632))))) (and (cons? (tl (tl (hd (tl (tl V11632)))))) (and (= () (tl (tl (tl (hd (tl (tl V11632))))))) (= () (tl (tl (tl V11632))))))))))))) (cons where (cons (cons and (cons (hd (tl V11632)) (cons (cons not (cons (tl (hd (tl (tl V11632)))) ())) ()))) (tl (tl (hd (tl (tl V11632)))))))) ((and (cons? V11632) (and (= where (hd V11632)) (and (cons? (tl V11632)) (and (cons? (tl (tl V11632))) (= () (tl (tl (tl V11632)))))))) (cons where (cons (cons and (cons (hd (tl V11632)) (cons (cons not (cons (cons = (cons (hd (tl (tl V11632))) (cons (cons fail ()) ()))) ())) ()))) (tl (tl V11632))))) ((and (cons? V11632) (and (= fail-if (hd V11632)) (and (cons? (tl V11632)) (and (cons? (tl (tl V11632))) (= () (tl (tl (tl V11632)))))))) (cons where (cons (cons not (cons (tl V11632) ())) (tl (tl V11632))))) (true (cons where (cons (cons not (cons (cons = (cons V11632 (cons (cons fail ()) ()))) ())) (cons V11632 ()))))))

(defun shen.t*-rules (V11633 V11634 V11635 V11636 V11637 V11638 V11639 V11640) (let W11641 (+ V11639 1) (let W11642 (if (shen.unlocked? V11638) (let W11643 (shen.lazyderef V11634 V11637) (if (= W11643 ()) (do (shen.incinfs) (thaw V11640)) false)) false) (if (= W11642 false) (let W11644 (if (shen.unlocked? V11638) (let W11645 (shen.lazyderef V11634 V11637) (if (cons? W11645) (let W11646 (hd W11645) (let W11647 (tl W11645) (let W11648 (shen.newpv V11637) (shen.gc V11637 (do (shen.incinfs) (bind W11648 (shen.freshen-rule (shen.deref W11646 V11637)) V11637 V11638 W11641 (freeze (shen.t*-rule V11633 V11636 (fst (shen.lazyderef W11648 V11637)) (snd (shen.lazyderef W11648 V11637)) V11635 V11637 V11638 W11641 (freeze (shen.cut V11637 V11638 W11641 (freeze (shen.t*-rules V11633 W11647 V11635 (+ V11636 1) V11637 V11638 W11641 V11640)))))))))))) false)) false) (if (= W11644 false) (shen.unlock V11638 W11641) W11644)) W11642))))

(defun shen.freshen-rule (V11649) (cond ((tuple? V11649) (let W11650 (shen.extract-vars (fst V11649)) (let W11651 (map (lambda Z11652 (cons Z11652 (shen.freshterm Z11652))) W11650) (@p (shen.freshen W11651 (fst V11649)) (shen.freshen W11651 (snd V11649)))))) (true (shen.f-error shen.freshen-rule))))

(defun shen.freshen (V11653 V11654) (cond ((= () V11653) V11654) ((and (cons? V11653) (cons? (hd V11653))) (shen.freshen (tl V11653) (shen.beta (hd (hd V11653)) (tl (hd V11653)) V11654))) (true (shen.f-error shen.freshen))))

(defun shen.t*-rule (V11655 V11656 V11657 V11658 V11659 V11660 V11661 V11662 V11663) (let W11664 (if (shen.unlocked? V11661) (do (shen.incinfs) (shen.t*-rule-h V11657 V11658 V11659 V11660 V11661 V11662 V11663)) false) (if (= W11664 false) (if (shen.unlocked? V11661) (let W11665 (shen.newpv V11660) (shen.gc V11660 (do (shen.incinfs) (bind W11665 (simple-error (cn "type error in rule " (shen.app V11656 (cn " of " (shen.app V11655 "
" shen.a)) shen.a))) V11660 V11661 V11662 V11663)))) false) W11664)))

(defun shen.t*-rule-h (V11666 V11667 V11668 V11669 V11670 V11671 V11672) (let W11673 (+ V11671 1) (let W11674 (if (shen.unlocked? V11670) (let W11675 (shen.lazyderef V11666 V11669) (if (= W11675 ()) (let W11676 (shen.lazyderef V11668 V11669) (if (cons? W11676) (let W11677 (shen.lazyderef (hd W11676) V11669) (if (= W11677 -->) (let W11678 (shen.lazyderef (tl W11676) V11669) (if (cons? W11678) (let W11679 (hd W11678) (let W11680 (shen.lazyderef (tl W11678) V11669) (if (= W11680 ()) (do (shen.incinfs) (shen.cut V11669 V11670 W11673 (freeze (shen.t*-correct V11667 W11679 () V11669 V11670 W11673 V11672)))) false))) false)) false)) false)) false)) false) (if (= W11674 false) (let W11681 (if (shen.unlocked? V11670) (let W11682 (shen.newpv V11669) (shen.gc V11669 (let W11683 (shen.newpv V11669) (shen.gc V11669 (let W11684 (shen.newpv V11669) (shen.gc V11669 (do (shen.incinfs) (shen.p-hyps (shen.freshterms V11666) W11682 V11669 V11670 W11673 (freeze (shen.t*-integrity V11666 V11668 W11682 W11683 V11669 V11670 W11673 (freeze (shen.cut V11669 V11670 W11673 (freeze (shen.myassume V11666 V11668 W11684 V11669 V11670 W11673 (freeze (shen.t*-correct V11667 W11683 W11684 V11669 V11670 W11673 V11672)))))))))))))))) false) (if (= W11681 false) (shen.unlock V11670 W11673) W11681)) W11674))))

(defun shen.myassume (V11685 V11686 V11687 V11688 V11689 V11690 V11691) (let W11692 (if (shen.unlocked? V11689) (let W11693 (shen.lazyderef V11685 V11688) (if (= W11693 ()) (let W11694 (shen.lazyderef V11687 V11688) (let W11695 (freeze (do (shen.incinfs) (thaw V11691))) (if (= W11694 ()) (thaw W11695) (if (shen.pvar? W11694) (shen.bind! W11694 () V11688 W11695) false)))) false)) false) (if (= W11692 false) (if (shen.unlocked? V11689) (let W11696 (shen.lazyderef V11685 V11688) (if (cons? W11696) (let W11697 (hd W11696) (let W11698 (tl W11696) (let W11699 (shen.lazyderef V11686 V11688) (if (cons? W11699) (let W11700 (hd W11699) (let W11701 (shen.lazyderef (tl W11699) V11688) (if (cons? W11701) (let W11702 (shen.lazyderef (hd W11701) V11688) (if (= W11702 -->) (let W11703 (shen.lazyderef (tl W11701) V11688) (if (cons? W11703) (let W11704 (hd W11703) (let W11705 (shen.lazyderef (tl W11703) V11688) (if (= W11705 ()) (let W11706 (shen.lazyderef V11687 V11688) (let W11707 (lambda Z11708 (lambda Z11709 (lambda Z11710 (lambda Z11711 (do (shen.incinfs) (is! W11700 Z11710 V11688 V11689 V11690 (freeze (is! W11697 Z11708 V11688 V11689 V11690 (freeze (bind Z11709 (intern ":") V11688 V11689 V11690 (freeze (shen.myassume W11698 W11704 Z11711 V11688 V11689 V11690 V11691)))))))))))) (if (cons? W11706) (let W11712 (shen.lazyderef (hd W11706) V11688) (let W11713 (lambda Z11714 (lambda Z11715 (lambda Z11716 (let W11717 (tl W11706) ((((W11707 Z11714) Z11715) Z11716) W11717))))) (if (cons? W11712) (let W11718 (hd W11712) (let W11719 (shen.lazyderef (tl W11712) V11688) (let W11720 (lambda Z11721 (lambda Z11722 (((W11713 W11718) Z11721) Z11722))) (if (cons? W11719) (let W11723 (hd W11719) (let W11724 (shen.lazyderef (tl W11719) V11688) (let W11725 (lambda Z11726 ((W11720 W11723) Z11726)) (if (cons? W11724) (let W11727 (hd W11724) (let W11728 (shen.lazyderef (tl W11724) V11688) (let W11729 (freeze (W11725 W11727)) (if (= W11728 ()) (thaw W11729) (if (shen.pvar? W11728) (shen.bind! W11728 () V11688 W11729) false))))) (if (shen.pvar? W11724) (let W11730 (shen.newpv V11688) (shen.gc V11688 (shen.bind! W11724 (cons W11730 ()) V11688 (freeze (W11725 W11730))))) false))))) (if (shen.pvar? W11719) (let W11731 (shen.newpv V11688) (shen.gc V11688 (let W11732 (shen.newpv V11688) (shen.gc V11688 (shen.bind! W11719 (cons W11731 (cons W11732 ())) V11688 (freeze ((W11720 W11731) W11732))))))) false))))) (if (shen.pvar? W11712) (let W11733 (shen.newpv V11688) (shen.gc V11688 (let W11734 (shen.newpv V11688) (shen.gc V11688 (let W11735 (shen.newpv V11688) (shen.gc V11688 (shen.bind! W11712 (cons W11733 (cons W11734 (cons W11735 ()))) V11688 (freeze (((W11713 W11733) W11734) W11735))))))))) false)))) (if (shen.pvar? W11706) (let W11736 (shen.newpv V11688) (shen.gc V11688 (let W11737 (shen.newpv V11688) (shen.gc V11688 (let W11738 (shen.newpv V11688) (shen.gc V11688 (let W11739 (shen.newpv V11688) (shen.gc V11688 (shen.bind! W11706 (cons (cons W11736 (cons W11737 (cons W11738 ()))) W11739) V11688 (freeze ((((W11707 W11736) W11737) W11738) W11739))))))))))) false)))) false))) false)) false)) false))) false)))) false)) false) W11692)))

(defun shen.freshterms (V11742) (cond ((= () V11742) ()) ((and (cons? V11742) (cons? (hd V11742))) (shen.freshterms (append (hd V11742) (tl V11742)))) ((and (cons? V11742) (shen.freshterm? (hd V11742))) (adjoin (hd V11742) (shen.freshterms (tl V11742)))) ((cons? V11742) (shen.freshterms (tl V11742))) (true (shen.f-error shen.freshterms))))

(defun shen.p-hyps (V11743 V11744 V11745 V11746 V11747 V11748) (let W11749 (if (shen.unlocked? V11746) (let W11750 (shen.lazyderef V11743 V11745) (if (= W11750 ()) (let W11751 (shen.lazyderef V11744 V11745) (let W11752 (freeze (do (shen.incinfs) (thaw V11748))) (if (= W11751 ()) (thaw W11752) (if (shen.pvar? W11751) (shen.bind! W11751 () V11745 W11752) false)))) false)) false) (if (= W11749 false) (if (shen.unlocked? V11746) (let W11753 (shen.lazyderef V11743 V11745) (if (cons? W11753) (let W11754 (hd W11753) (let W11755 (tl W11753) (let W11756 (shen.lazyderef V11744 V11745) (let W11757 (lambda Z11758 (lambda Z11759 (lambda Z11760 (lambda Z11761 (do (shen.incinfs) (bind Z11758 W11754 V11745 V11746 V11747 (freeze (bind Z11759 (intern ":") V11745 V11746 V11747 (freeze (shen.p-hyps W11755 Z11761 V11745 V11746 V11747 V11748)))))))))) (if (cons? W11756) (let W11762 (shen.lazyderef (hd W11756) V11745) (let W11763 (lambda Z11764 (lambda Z11765 (lambda Z11766 (let W11767 (tl W11756) ((((W11757 Z11764) Z11765) Z11766) W11767))))) (if (cons? W11762) (let W11768 (hd W11762) (let W11769 (shen.lazyderef (tl W11762) V11745) (let W11770 (lambda Z11771 (lambda Z11772 (((W11763 W11768) Z11771) Z11772))) (if (cons? W11769) (let W11773 (hd W11769) (let W11774 (shen.lazyderef (tl W11769) V11745) (let W11775 (lambda Z11776 ((W11770 W11773) Z11776)) (if (cons? W11774) (let W11777 (hd W11774) (let W11778 (shen.lazyderef (tl W11774) V11745) (let W11779 (freeze (W11775 W11777)) (if (= W11778 ()) (thaw W11779) (if (shen.pvar? W11778) (shen.bind! W11778 () V11745 W11779) false))))) (if (shen.pvar? W11774) (let W11780 (shen.newpv V11745) (shen.gc V11745 (shen.bind! W11774 (cons W11780 ()) V11745 (freeze (W11775 W11780))))) false))))) (if (shen.pvar? W11769) (let W11781 (shen.newpv V11745) (shen.gc V11745 (let W11782 (shen.newpv V11745) (shen.gc V11745 (shen.bind! W11769 (cons W11781 (cons W11782 ())) V11745 (freeze ((W11770 W11781) W11782))))))) false))))) (if (shen.pvar? W11762) (let W11783 (shen.newpv V11745) (shen.gc V11745 (let W11784 (shen.newpv V11745) (shen.gc V11745 (let W11785 (shen.newpv V11745) (shen.gc V11745 (shen.bind! W11762 (cons W11783 (cons W11784 (cons W11785 ()))) V11745 (freeze (((W11763 W11783) W11784) W11785))))))))) false)))) (if (shen.pvar? W11756) (let W11786 (shen.newpv V11745) (shen.gc V11745 (let W11787 (shen.newpv V11745) (shen.gc V11745 (let W11788 (shen.newpv V11745) (shen.gc V11745 (let W11789 (shen.newpv V11745) (shen.gc V11745 (shen.bind! W11756 (cons (cons W11786 (cons W11787 (cons W11788 ()))) W11789) V11745 (freeze ((((W11757 W11786) W11787) W11788) W11789))))))))))) false)))))) false)) false) W11749)))

(defun shen.t*-correct (V11790 V11791 V11792 V11793 V11794 V11795 V11796) (let W11797 (+ V11795 1) (let W11798 (if (shen.unlocked? V11794) (let W11799 (shen.lazyderef V11790 V11793) (if (cons? W11799) (let W11800 (shen.lazyderef (hd W11799) V11793) (if (= W11800 where) (let W11801 (shen.lazyderef (tl W11799) V11793) (if (cons? W11801) (let W11802 (hd W11801) (let W11803 (shen.lazyderef (tl W11801) V11793) (if (cons? W11803) (let W11804 (hd W11803) (let W11805 (shen.lazyderef (tl W11803) V11793) (if (= W11805 ()) (let W11806 (shen.newpv V11793) (shen.gc V11793 (do (shen.incinfs) (shen.cut V11793 V11794 W11797 (freeze (bind W11806 (shen.curry W11802) V11793 V11794 W11797 (freeze (shen.system-S-h W11806 boolean V11792 V11793 V11794 W11797 (freeze (shen.cut V11793 V11794 W11797 (freeze (shen.t*-correct W11804 V11791 (cons (cons W11806 (cons (intern ":") (cons verified ()))) V11792) V11793 V11794 W11797 V11796)))))))))))) false))) false))) false)) false)) false)) false) (if (= W11798 false) (let W11807 (if (shen.unlocked? V11794) (do (shen.incinfs) (shen.system-S-h (shen.curry V11790) V11791 V11792 V11793 V11794 W11797 V11796)) false) (if (= W11807 false) (shen.unlock V11794 W11797) W11807)) W11798))))

(defun shen.t*-integrity (V11808 V11809 V11810 V11811 V11812 V11813 V11814 V11815) (let W11816 (if (shen.unlocked? V11813) (let W11817 (shen.lazyderef V11808 V11812) (if (= W11817 ()) (do (shen.incinfs) (is! V11809 V11811 V11812 V11813 V11814 V11815)) false)) false) (if (= W11816 false) (if (shen.unlocked? V11813) (let W11818 (shen.lazyderef V11808 V11812) (if (cons? W11818) (let W11819 (hd W11818) (let W11820 (tl W11818) (let W11821 (shen.lazyderef V11809 V11812) (if (cons? W11821) (let W11822 (hd W11821) (let W11823 (shen.lazyderef (tl W11821) V11812) (if (cons? W11823) (let W11824 (shen.lazyderef (hd W11823) V11812) (if (= W11824 -->) (let W11825 (shen.lazyderef (tl W11823) V11812) (if (cons? W11825) (let W11826 (hd W11825) (let W11827 (shen.lazyderef (tl W11825) V11812) (if (= W11827 ()) (do (shen.incinfs) (shen.system-S-h W11819 W11822 V11810 V11812 V11813 V11814 (freeze (shen.t*-integrity W11820 W11826 V11810 V11811 V11812 V11813 V11814 V11815)))) false))) false)) false)) false))) false)))) false)) false) W11816)))

(defun shen.freshterm? (V11828) (and (absvector? V11828) (and (not (string? V11828)) (= (<-address V11828 0) shen.print-freshterm))))

