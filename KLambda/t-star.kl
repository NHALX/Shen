(defun shen.typecheck (V5450 V5451) (let W5452 (shen.extract-vars V5451) (let W5453 (shen.rectify-type V5451) (let W5454 (shen.curry V5450) (((((lambda Z5455 (lambda Z5456 (lambda Z5457 (lambda Z5458 (let W5459 (shen.newpv Z5455) (shen.gc Z5455 (do (shen.incinfs) (shen.insert-prolog-variables (receive (shen.deref W5452 Z5455)) (receive (shen.deref W5453 Z5455)) W5459 Z5455 Z5456 Z5457 (freeze (shen.toplevel-forms (receive (shen.deref W5454 Z5455)) W5459 Z5455 Z5456 Z5457 (freeze (return W5459 Z5455 Z5456 Z5457 Z5458)))))))))))) (shen.reset-prolog-vector)) (@v true (@v 0 (vector 0)))) 0) (freeze true))))))

(defun shen.insert-prolog-variables (V5460 V5461 V5462 V5463 V5464 V5465 V5466) (let W5467 (if (shen.unlocked? V5464) (let W5468 (shen.lazyderef V5460 V5463) (if (= W5468 ()) (do (shen.incinfs) (is! V5461 V5462 V5463 V5464 V5465 V5466)) false)) false) (if (= W5467 false) (if (shen.unlocked? V5464) (let W5469 (shen.lazyderef V5460 V5463) (if (cons? W5469) (let W5470 (hd W5469) (let W5471 (tl W5469) (let W5472 (shen.newpv V5463) (shen.gc V5463 (do (shen.incinfs) (shen.insert-prolog-variables W5471 (subst (shen.deref W5472 V5463) W5470 V5461) V5462 V5463 V5464 V5465 V5466)))))) false)) false) W5467)))

(defun shen.toplevel-forms (V5473 V5474 V5475 V5476 V5477 V5478) (let W5479 (+ V5477 1) (let W5480 (if (shen.unlocked? V5476) (let W5481 (shen.lazyderef V5473 V5475) (if (cons? W5481) (let W5482 (shen.lazyderef (hd W5481) V5475) (if (= W5482 define) (let W5483 (shen.lazyderef (tl W5481) V5475) (if (cons? W5483) (let W5484 (hd W5483) (let W5485 (tl W5483) (do (shen.incinfs) (when (shen.type-theory-enabled?) V5475 V5476 W5479 (freeze (shen.cut V5475 V5476 W5479 (freeze (shen.signal-def (value shen.*spy*) W5484 V5475 V5476 W5479 (freeze (shen.t* (cons define (cons W5484 W5485)) V5474 V5475 V5476 W5479 V5478)))))))))) false)) false)) false)) false) (if (= W5480 false) (let W5486 (if (shen.unlocked? V5476) (do (shen.incinfs) (shen.system-S (cons V5473 (cons (intern ":") (cons V5474 ()))) () V5475 V5476 W5479 V5478)) false) (if (= W5486 false) (shen.unlock V5476 W5479) W5486)) W5480))))

(defun shen.signal-def (V5487 V5488 V5489 V5490 V5491 V5492) (let W5493 (if (shen.unlocked? V5490) (let W5494 (shen.lazyderef V5487 V5489) (if (= W5494 false) (do (shen.incinfs) (thaw V5492)) false)) false) (if (= W5493 false) (if (shen.unlocked? V5490) (let W5495 (shen.lazyderef V5487 V5489) (if (= W5495 true) (let W5496 (shen.newpv V5489) (shen.gc V5489 (do (shen.incinfs) (is W5496 (pr (cn "
typechecking (fn " (shen.app (shen.deref V5488 V5489) ")
" shen.a)) (stoutput)) V5489 V5490 V5491 V5492)))) false)) false) W5493)))

(defun shen.rectify-type (V5497) (shen.demodulate (shen.curry-type V5497)))

(defun shen.demodulate (V5498) (trap-error (let W5499 (shen.walk (lambda Z5500 (shen.demod Z5500)) V5498) (if (= W5499 V5498) V5498 (shen.demodulate W5499))) (lambda Z5501 V5498)))

(defun shen.curry-type (V5502) (cond ((and (cons? V5502) (and (cons? (tl V5502)) (and (= --> (hd (tl V5502))) (and (cons? (tl (tl V5502))) (and (cons? (tl (tl (tl V5502)))) (= --> (hd (tl (tl (tl V5502)))))))))) (shen.curry-type (cons (hd V5502) (cons --> (cons (tl (tl V5502)) ()))))) ((and (cons? V5502) (and (cons? (tl V5502)) (and (= ==> (hd (tl V5502))) (and (cons? (tl (tl V5502))) (= () (tl (tl (tl V5502)))))))) (shen.curry-type (cons (cons (hd V5502) (cons * (cons A ()))) (cons --> (cons (cons (cons vector (cons boolean ())) (cons --> (cons (cons (hd V5502) (cons * (tl (tl V5502)))) ()))) ()))))) ((and (cons? V5502) (and (cons? (tl V5502)) (and (= * (hd (tl V5502))) (and (cons? (tl (tl V5502))) (and (cons? (tl (tl (tl V5502)))) (= * (hd (tl (tl (tl V5502)))))))))) (shen.curry-type (cons (hd V5502) (cons * (cons (tl (tl V5502)) ()))))) ((cons? V5502) (map (lambda Z5503 (shen.curry-type Z5503)) V5502)) (true V5502)))

(defun shen.curry (V5504) (cond ((and (cons? V5504) (and (= define (hd V5504)) (cons? (tl V5504)))) V5504) ((and (cons? V5504) (and (= type (hd V5504)) (and (cons? (tl V5504)) (and (cons? (tl (tl V5504))) (= () (tl (tl (tl V5504)))))))) (cons type (cons (shen.curry (hd (tl V5504))) (tl (tl V5504))))) ((and (cons? V5504) (and (= input+ (hd V5504)) (and (cons? (tl V5504)) (and (cons? (tl (tl V5504))) (= () (tl (tl (tl V5504)))))))) (cons input+ (cons (hd (tl V5504)) (cons (shen.curry (hd (tl (tl V5504)))) ())))) ((and (cons? V5504) (shen.special? (hd V5504))) (cons (hd V5504) (map (lambda Z5505 (shen.curry Z5505)) (tl V5504)))) ((and (cons? V5504) (shen.extraspecial? (hd V5504))) V5504) ((and (cons? V5504) (and (cons? (tl V5504)) (cons? (tl (tl V5504))))) (shen.curry (cons (cons (hd V5504) (cons (hd (tl V5504)) ())) (tl (tl V5504))))) ((and (cons? V5504) (and (cons? (tl V5504)) (= () (tl (tl V5504))))) (cons (shen.curry (hd V5504)) (cons (shen.curry (hd (tl V5504))) ()))) (true V5504)))

(defun shen.special? (V5506) (element? V5506 (value shen.*special*)))

(defun shen.extraspecial? (V5507) (element? V5507 (value shen.*extraspecial*)))

(defun shen.system-S (V5508 V5509 V5510 V5511 V5512 V5513) (let W5514 (+ V5512 1) (let W5515 (if (shen.unlocked? V5511) (do (shen.incinfs) (when (shen.maxinfexceeded?) V5510 V5511 W5514 V5513)) false) (if (= W5515 false) (let W5516 (if (shen.unlocked? V5511) (let W5517 (shen.lazyderef V5508 V5510) (if (cons? W5517) (let W5518 (hd W5517) (let W5519 (shen.lazyderef (tl W5517) V5510) (if (cons? W5519) (let W5520 (hd W5519) (let W5521 (shen.lazyderef (tl W5519) V5510) (if (cons? W5521) (let W5522 (hd W5521) (let W5523 (shen.lazyderef (tl W5521) V5510) (if (= W5523 ()) (do (shen.incinfs) (when (= (shen.deref W5520 V5510) (intern ":")) V5510 V5511 W5514 (freeze (when (shen.type-theory-enabled?) V5510 V5511 W5514 (freeze (shen.cut V5510 V5511 W5514 (freeze (shen.system-S-h W5518 W5522 V5509 V5510 V5511 W5514 V5513)))))))) false))) false))) false))) false)) false) (if (= W5516 false) (let W5524 (if (shen.unlocked? V5511) (do (shen.incinfs) (when (value shen.*spy*) V5510 V5511 W5514 (freeze (shen.show V5508 V5509 V5510 V5511 W5514 V5513)))) false) (if (= W5524 false) (let W5525 (if (shen.unlocked? V5511) (do (shen.incinfs) (shen.search-user-datatypes V5508 V5509 (value shen.*datatypes*) V5510 V5511 W5514 V5513)) false) (if (= W5525 false) (shen.unlock V5511 W5514) W5525)) W5524)) W5516)) W5515))))

(defun shen.show (V5532 V5533 V5534 V5535 V5536 V5537) (do (shen.line) (do (shen.show-p (shen.deref V5532 V5534)) (do (nl 2) (do (shen.show-assumptions (shen.deref V5533 V5534) 1) (do (shen.pause-for-user) false))))))

(defun shen.line () (let W5538 (inferences) (pr (cn "____________________________________________________________ " (shen.app W5538 (cn " inference" (shen.app (if (= 1 W5538) "" "s") " 
?- " shen.a)) shen.a)) (stoutput))))

(defun shen.show-p (V5539) (cond ((and (cons? V5539) (and (cons? (tl V5539)) (and (cons? (tl (tl V5539))) (and (= () (tl (tl (tl V5539)))) (= (hd (tl V5539)) (intern ":")))))) (do (shen.prterm (hd V5539)) (do (pr " : " (stoutput)) (pr (shen.app (hd (tl (tl V5539))) "" shen.r) (stoutput))))) (true (shen.prterm V5539))))

(defun shen.prterm (V5540) (cond ((and (cons? V5540) (and (= cons (hd V5540)) (and (cons? (tl V5540)) (and (cons? (tl (tl V5540))) (= () (tl (tl (tl V5540)))))))) (do (pr "[" (stoutput)) (do (shen.prterm (hd (tl V5540))) (do (shen.prtl (hd (tl (tl V5540)))) (pr "]" (stoutput)))))) ((cons? V5540) (do (pr "(" (stoutput)) (do (shen.prterm (hd V5540)) (do (map (lambda Z5541 (do (pr " " (stoutput)) (shen.prterm Z5541))) (tl V5540)) (pr ")" (stoutput)))))) (true (print V5540))))

(defun shen.prtl (V5542) (cond ((= () V5542) "") ((and (cons? V5542) (and (= cons (hd V5542)) (and (cons? (tl V5542)) (and (cons? (tl (tl V5542))) (= () (tl (tl (tl V5542)))))))) (do (pr " " (stoutput)) (do (shen.prterm (hd (tl V5542))) (shen.prtl (hd (tl (tl V5542))))))) (true (do (pr " | " (stoutput)) (shen.prterm V5542)))))

(defun shen.show-assumptions (V5549 V5550) (cond ((= () V5549) (pr "
> " (stoutput))) ((cons? V5549) (do (pr (shen.app V5550 ". " shen.a) (stoutput)) (do (shen.show-p (hd V5549)) (do (nl 1) (shen.show-assumptions (tl V5549) (+ V5550 1)))))) (true (simple-error "implementation error in shen.show-assumptions"))))

(defun shen.pause-for-user () (let W5551 (read-byte (stinput)) (if (= W5551 94) (simple-error "input aborted
") (nl 1))))

(defun shen.type-theory-enabled? () (value shen.*shen-type-theory-enabled?*))

(defun shen.maxinfexceeded? () (if (> (inferences) (value shen.*maxinferences*)) (simple-error "maximum inferences exceeded") false))

(defun shen.system-S-h (V5552 V5553 V5554 V5555 V5556 V5557 V5558) (let W5559 (+ V5557 1) (let W5560 (if (shen.unlocked? V5556) (do (shen.incinfs) (when (value shen.*spy*) V5555 V5556 W5559 (freeze (shen.show (cons V5552 (cons (intern ":") (cons V5553 ()))) V5554 V5555 V5556 W5559 V5558)))) false) (if (= W5560 false) (let W5561 (if (shen.unlocked? V5556) (do (shen.incinfs) (when (not (cons? (shen.lazyderef V5552 V5555))) V5555 V5556 W5559 (freeze (shen.primitive V5552 V5553 V5555 V5556 W5559 V5558)))) false) (if (= W5561 false) (let W5562 (if (shen.unlocked? V5556) (do (shen.incinfs) (shen.by-hypothesis V5552 V5553 V5554 V5555 V5556 W5559 V5558)) false) (if (= W5562 false) (let W5563 (if (shen.unlocked? V5556) (let W5564 (shen.lazyderef V5552 V5555) (if (cons? W5564) (let W5565 (hd W5564) (let W5566 (shen.lazyderef (tl W5564) V5555) (if (= W5566 ()) (do (shen.incinfs) (shen.lookupsig W5565 (cons --> (cons V5553 ())) V5555 V5556 W5559 V5558)) false))) false)) false) (if (= W5563 false) (let W5567 (if (shen.unlocked? V5556) (let W5568 (shen.lazyderef V5552 V5555) (if (cons? W5568) (let W5569 (shen.lazyderef (hd W5568) V5555) (if (= W5569 fn) (let W5570 (shen.lazyderef (tl W5568) V5555) (if (cons? W5570) (let W5571 (hd W5570) (let W5572 (shen.lazyderef (tl W5570) V5555) (if (= W5572 ()) (do (shen.incinfs) (shen.lookupsig W5571 V5553 V5555 V5556 W5559 V5558)) false))) false)) false)) false)) false) (if (= W5567 false) (let W5573 (if (shen.unlocked? V5556) (let W5574 (shen.lazyderef V5552 V5555) (if (cons? W5574) (let W5575 (hd W5574) (let W5576 (shen.lazyderef (tl W5574) V5555) (if (cons? W5576) (let W5577 (hd W5576) (let W5578 (shen.lazyderef (tl W5576) V5555) (if (= W5578 ()) (let W5579 (shen.newpv V5555) (shen.gc V5555 (do (shen.incinfs) (when (not (cons? (shen.lazyderef W5575 V5555))) V5555 V5556 W5559 (freeze (shen.lookupsig W5575 (cons W5579 (cons --> (cons V5553 ()))) V5555 V5556 W5559 (freeze (shen.system-S-h W5577 W5579 V5554 V5555 V5556 W5559 V5558)))))))) false))) false))) false)) false) (if (= W5573 false) (let W5580 (if (shen.unlocked? V5556) (let W5581 (shen.lazyderef V5552 V5555) (if (cons? W5581) (let W5582 (hd W5581) (let W5583 (shen.lazyderef (tl W5581) V5555) (if (cons? W5583) (let W5584 (hd W5583) (let W5585 (shen.lazyderef (tl W5583) V5555) (if (= W5585 ()) (let W5586 (shen.newpv V5555) (shen.gc V5555 (do (shen.incinfs) (shen.system-S-h W5582 (cons W5586 (cons --> (cons V5553 ()))) V5554 V5555 V5556 W5559 (freeze (shen.system-S-h W5584 W5586 V5554 V5555 V5556 W5559 V5558)))))) false))) false))) false)) false) (if (= W5580 false) (let W5587 (if (shen.unlocked? V5556) (let W5588 (shen.lazyderef V5552 V5555) (if (cons? W5588) (let W5589 (shen.lazyderef (hd W5588) V5555) (if (= W5589 cons) (let W5590 (shen.lazyderef (tl W5588) V5555) (if (cons? W5590) (let W5591 (hd W5590) (let W5592 (shen.lazyderef (tl W5590) V5555) (if (cons? W5592) (let W5593 (hd W5592) (let W5594 (shen.lazyderef (tl W5592) V5555) (if (= W5594 ()) (let W5595 (shen.lazyderef V5553 V5555) (let W5596 (lambda Z5597 (do (shen.incinfs) (shen.system-S-h W5591 Z5597 V5554 V5555 V5556 W5559 (freeze (shen.system-S-h W5593 (cons list (cons Z5597 ())) V5554 V5555 V5556 W5559 V5558))))) (if (cons? W5595) (let W5598 (shen.lazyderef (hd W5595) V5555) (let W5599 (freeze (let W5600 (shen.lazyderef (tl W5595) V5555) (let W5601 (lambda Z5602 (W5596 Z5602)) (if (cons? W5600) (let W5603 (hd W5600) (let W5604 (shen.lazyderef (tl W5600) V5555) (let W5605 (freeze (W5601 W5603)) (if (= W5604 ()) (thaw W5605) (if (shen.pvar? W5604) (shen.bind! W5604 () V5555 W5605) false))))) (if (shen.pvar? W5600) (let W5606 (shen.newpv V5555) (shen.gc V5555 (shen.bind! W5600 (cons W5606 ()) V5555 (freeze (W5601 W5606))))) false))))) (if (= W5598 list) (thaw W5599) (if (shen.pvar? W5598) (shen.bind! W5598 list V5555 W5599) false)))) (if (shen.pvar? W5595) (let W5607 (shen.newpv V5555) (shen.gc V5555 (shen.bind! W5595 (cons list (cons W5607 ())) V5555 (freeze (W5596 W5607))))) false)))) false))) false))) false)) false)) false)) false) (if (= W5587 false) (let W5608 (if (shen.unlocked? V5556) (let W5609 (shen.lazyderef V5552 V5555) (if (cons? W5609) (let W5610 (shen.lazyderef (hd W5609) V5555) (if (= W5610 @p) (let W5611 (shen.lazyderef (tl W5609) V5555) (if (cons? W5611) (let W5612 (hd W5611) (let W5613 (shen.lazyderef (tl W5611) V5555) (if (cons? W5613) (let W5614 (hd W5613) (let W5615 (shen.lazyderef (tl W5613) V5555) (if (= W5615 ()) (let W5616 (shen.lazyderef V5553 V5555) (let W5617 (lambda Z5618 (lambda Z5619 (do (shen.incinfs) (shen.system-S-h W5612 Z5618 V5554 V5555 V5556 W5559 (freeze (shen.system-S-h W5614 Z5619 V5554 V5555 V5556 W5559 V5558)))))) (if (cons? W5616) (let W5620 (hd W5616) (let W5621 (shen.lazyderef (tl W5616) V5555) (let W5622 (lambda Z5623 ((W5617 W5620) Z5623)) (if (cons? W5621) (let W5624 (shen.lazyderef (hd W5621) V5555) (let W5625 (freeze (let W5626 (shen.lazyderef (tl W5621) V5555) (let W5627 (lambda Z5628 (W5622 Z5628)) (if (cons? W5626) (let W5629 (hd W5626) (let W5630 (shen.lazyderef (tl W5626) V5555) (let W5631 (freeze (W5627 W5629)) (if (= W5630 ()) (thaw W5631) (if (shen.pvar? W5630) (shen.bind! W5630 () V5555 W5631) false))))) (if (shen.pvar? W5626) (let W5632 (shen.newpv V5555) (shen.gc V5555 (shen.bind! W5626 (cons W5632 ()) V5555 (freeze (W5627 W5632))))) false))))) (if (= W5624 *) (thaw W5625) (if (shen.pvar? W5624) (shen.bind! W5624 * V5555 W5625) false)))) (if (shen.pvar? W5621) (let W5633 (shen.newpv V5555) (shen.gc V5555 (shen.bind! W5621 (cons * (cons W5633 ())) V5555 (freeze (W5622 W5633))))) false))))) (if (shen.pvar? W5616) (let W5634 (shen.newpv V5555) (shen.gc V5555 (let W5635 (shen.newpv V5555) (shen.gc V5555 (shen.bind! W5616 (cons W5634 (cons * (cons W5635 ()))) V5555 (freeze ((W5617 W5634) W5635))))))) false)))) false))) false))) false)) false)) false)) false) (if (= W5608 false) (let W5636 (if (shen.unlocked? V5556) (let W5637 (shen.lazyderef V5552 V5555) (if (cons? W5637) (let W5638 (shen.lazyderef (hd W5637) V5555) (if (= W5638 @v) (let W5639 (shen.lazyderef (tl W5637) V5555) (if (cons? W5639) (let W5640 (hd W5639) (let W5641 (shen.lazyderef (tl W5639) V5555) (if (cons? W5641) (let W5642 (hd W5641) (let W5643 (shen.lazyderef (tl W5641) V5555) (if (= W5643 ()) (let W5644 (shen.lazyderef V5553 V5555) (let W5645 (lambda Z5646 (do (shen.incinfs) (shen.system-S-h W5640 Z5646 V5554 V5555 V5556 W5559 (freeze (shen.system-S-h W5642 (cons vector (cons Z5646 ())) V5554 V5555 V5556 W5559 V5558))))) (if (cons? W5644) (let W5647 (shen.lazyderef (hd W5644) V5555) (let W5648 (freeze (let W5649 (shen.lazyderef (tl W5644) V5555) (let W5650 (lambda Z5651 (W5645 Z5651)) (if (cons? W5649) (let W5652 (hd W5649) (let W5653 (shen.lazyderef (tl W5649) V5555) (let W5654 (freeze (W5650 W5652)) (if (= W5653 ()) (thaw W5654) (if (shen.pvar? W5653) (shen.bind! W5653 () V5555 W5654) false))))) (if (shen.pvar? W5649) (let W5655 (shen.newpv V5555) (shen.gc V5555 (shen.bind! W5649 (cons W5655 ()) V5555 (freeze (W5650 W5655))))) false))))) (if (= W5647 vector) (thaw W5648) (if (shen.pvar? W5647) (shen.bind! W5647 vector V5555 W5648) false)))) (if (shen.pvar? W5644) (let W5656 (shen.newpv V5555) (shen.gc V5555 (shen.bind! W5644 (cons vector (cons W5656 ())) V5555 (freeze (W5645 W5656))))) false)))) false))) false))) false)) false)) false)) false) (if (= W5636 false) (let W5657 (if (shen.unlocked? V5556) (let W5658 (shen.lazyderef V5552 V5555) (if (cons? W5658) (let W5659 (shen.lazyderef (hd W5658) V5555) (if (= W5659 @s) (let W5660 (shen.lazyderef (tl W5658) V5555) (if (cons? W5660) (let W5661 (hd W5660) (let W5662 (shen.lazyderef (tl W5660) V5555) (if (cons? W5662) (let W5663 (hd W5662) (let W5664 (shen.lazyderef (tl W5662) V5555) (if (= W5664 ()) (let W5665 (shen.lazyderef V5553 V5555) (let W5666 (freeze (do (shen.incinfs) (shen.system-S-h W5661 string V5554 V5555 V5556 W5559 (freeze (shen.system-S-h W5663 string V5554 V5555 V5556 W5559 V5558))))) (if (= W5665 string) (thaw W5666) (if (shen.pvar? W5665) (shen.bind! W5665 string V5555 W5666) false)))) false))) false))) false)) false)) false)) false) (if (= W5657 false) (let W5667 (if (shen.unlocked? V5556) (let W5668 (shen.lazyderef V5552 V5555) (if (cons? W5668) (let W5669 (shen.lazyderef (hd W5668) V5555) (if (= W5669 lambda) (let W5670 (shen.lazyderef (tl W5668) V5555) (if (cons? W5670) (let W5671 (hd W5670) (let W5672 (shen.lazyderef (tl W5670) V5555) (if (cons? W5672) (let W5673 (hd W5672) (let W5674 (shen.lazyderef (tl W5672) V5555) (if (= W5674 ()) (let W5675 (shen.lazyderef V5553 V5555) (let W5676 (lambda Z5677 (lambda Z5678 (let W5679 (shen.newpv V5555) (shen.gc V5555 (let W5680 (shen.newpv V5555) (shen.gc V5555 (do (shen.incinfs) (bind W5680 (shen.freshterm (shen.lazyderef W5671 V5555)) V5555 V5556 W5559 (freeze (bind W5679 (shen.beta (shen.lazyderef W5671 V5555) (shen.deref W5680 V5555) (shen.deref W5673 V5555)) V5555 V5556 W5559 (freeze (shen.system-S-h W5679 Z5678 (cons (cons W5680 (cons (intern ":") (cons Z5677 ()))) V5554) V5555 V5556 W5559 V5558)))))))))))) (if (cons? W5675) (let W5681 (hd W5675) (let W5682 (shen.lazyderef (tl W5675) V5555) (let W5683 (lambda Z5684 ((W5676 W5681) Z5684)) (if (cons? W5682) (let W5685 (shen.lazyderef (hd W5682) V5555) (let W5686 (freeze (let W5687 (shen.lazyderef (tl W5682) V5555) (let W5688 (lambda Z5689 (W5683 Z5689)) (if (cons? W5687) (let W5690 (hd W5687) (let W5691 (shen.lazyderef (tl W5687) V5555) (let W5692 (freeze (W5688 W5690)) (if (= W5691 ()) (thaw W5692) (if (shen.pvar? W5691) (shen.bind! W5691 () V5555 W5692) false))))) (if (shen.pvar? W5687) (let W5693 (shen.newpv V5555) (shen.gc V5555 (shen.bind! W5687 (cons W5693 ()) V5555 (freeze (W5688 W5693))))) false))))) (if (= W5685 -->) (thaw W5686) (if (shen.pvar? W5685) (shen.bind! W5685 --> V5555 W5686) false)))) (if (shen.pvar? W5682) (let W5694 (shen.newpv V5555) (shen.gc V5555 (shen.bind! W5682 (cons --> (cons W5694 ())) V5555 (freeze (W5683 W5694))))) false))))) (if (shen.pvar? W5675) (let W5695 (shen.newpv V5555) (shen.gc V5555 (let W5696 (shen.newpv V5555) (shen.gc V5555 (shen.bind! W5675 (cons W5695 (cons --> (cons W5696 ()))) V5555 (freeze ((W5676 W5695) W5696))))))) false)))) false))) false))) false)) false)) false)) false) (if (= W5667 false) (let W5697 (if (shen.unlocked? V5556) (let W5698 (shen.lazyderef V5552 V5555) (if (cons? W5698) (let W5699 (shen.lazyderef (hd W5698) V5555) (if (= W5699 let) (let W5700 (shen.lazyderef (tl W5698) V5555) (if (cons? W5700) (let W5701 (hd W5700) (let W5702 (shen.lazyderef (tl W5700) V5555) (if (cons? W5702) (let W5703 (hd W5702) (let W5704 (shen.lazyderef (tl W5702) V5555) (if (cons? W5704) (let W5705 (hd W5704) (let W5706 (shen.lazyderef (tl W5704) V5555) (if (= W5706 ()) (let W5707 (shen.newpv V5555) (shen.gc V5555 (let W5708 (shen.newpv V5555) (shen.gc V5555 (let W5709 (shen.newpv V5555) (shen.gc V5555 (do (shen.incinfs) (shen.system-S-h W5703 W5709 V5554 V5555 V5556 W5559 (freeze (bind W5708 (shen.freshterm (shen.lazyderef W5701 V5555)) V5555 V5556 W5559 (freeze (bind W5707 (shen.beta (shen.lazyderef W5701 V5555) (shen.lazyderef W5708 V5555) (shen.lazyderef W5705 V5555)) V5555 V5556 W5559 (freeze (shen.system-S-h W5707 V5553 (cons (cons W5708 (cons (intern ":") (cons W5709 ()))) V5554) V5555 V5556 W5559 V5558)))))))))))))) false))) false))) false))) false)) false)) false)) false) (if (= W5697 false) (let W5710 (if (shen.unlocked? V5556) (let W5711 (shen.lazyderef V5552 V5555) (if (cons? W5711) (let W5712 (shen.lazyderef (hd W5711) V5555) (if (= W5712 open) (let W5713 (shen.lazyderef (tl W5711) V5555) (if (cons? W5713) (let W5714 (hd W5713) (let W5715 (shen.lazyderef (tl W5713) V5555) (if (cons? W5715) (let W5716 (hd W5715) (let W5717 (shen.lazyderef (tl W5715) V5555) (if (= W5717 ()) (let W5718 (shen.lazyderef V5553 V5555) (let W5719 (lambda Z5720 (do (shen.incinfs) (is! W5716 Z5720 V5555 V5556 W5559 (freeze (when (element? (shen.lazyderef Z5720 V5555) (cons in (cons out ()))) V5555 V5556 W5559 (freeze (shen.system-S-h W5714 string V5554 V5555 V5556 W5559 V5558))))))) (if (cons? W5718) (let W5721 (shen.lazyderef (hd W5718) V5555) (let W5722 (freeze (let W5723 (shen.lazyderef (tl W5718) V5555) (let W5724 (lambda Z5725 (W5719 Z5725)) (if (cons? W5723) (let W5726 (hd W5723) (let W5727 (shen.lazyderef (tl W5723) V5555) (let W5728 (freeze (W5724 W5726)) (if (= W5727 ()) (thaw W5728) (if (shen.pvar? W5727) (shen.bind! W5727 () V5555 W5728) false))))) (if (shen.pvar? W5723) (let W5729 (shen.newpv V5555) (shen.gc V5555 (shen.bind! W5723 (cons W5729 ()) V5555 (freeze (W5724 W5729))))) false))))) (if (= W5721 stream) (thaw W5722) (if (shen.pvar? W5721) (shen.bind! W5721 stream V5555 W5722) false)))) (if (shen.pvar? W5718) (let W5730 (shen.newpv V5555) (shen.gc V5555 (shen.bind! W5718 (cons stream (cons W5730 ())) V5555 (freeze (W5719 W5730))))) false)))) false))) false))) false)) false)) false)) false) (if (= W5710 false) (let W5731 (if (shen.unlocked? V5556) (let W5732 (shen.lazyderef V5552 V5555) (if (cons? W5732) (let W5733 (shen.lazyderef (hd W5732) V5555) (if (= W5733 type) (let W5734 (shen.lazyderef (tl W5732) V5555) (if (cons? W5734) (let W5735 (hd W5734) (let W5736 (shen.lazyderef (tl W5734) V5555) (if (cons? W5736) (let W5737 (hd W5736) (let W5738 (shen.lazyderef (tl W5736) V5555) (if (= W5738 ()) (do (shen.incinfs) (shen.cut V5555 V5556 W5559 (freeze (is! (shen.rectify-type (shen.deref W5737 V5555)) V5553 V5555 V5556 W5559 (freeze (shen.system-S-h W5735 V5553 V5554 V5555 V5556 W5559 V5558)))))) false))) false))) false)) false)) false)) false) (if (= W5731 false) (let W5739 (if (shen.unlocked? V5556) (let W5740 (shen.lazyderef V5552 V5555) (if (cons? W5740) (let W5741 (shen.lazyderef (hd W5740) V5555) (if (= W5741 input+) (let W5742 (shen.lazyderef (tl W5740) V5555) (if (cons? W5742) (let W5743 (hd W5742) (let W5744 (shen.lazyderef (tl W5742) V5555) (if (cons? W5744) (let W5745 (hd W5744) (let W5746 (shen.lazyderef (tl W5744) V5555) (if (= W5746 ()) (do (shen.incinfs) (is! V5553 (shen.rectify-type (shen.deref W5743 V5555)) V5555 V5556 W5559 (freeze (shen.system-S-h W5745 (cons stream (cons in ())) V5554 V5555 V5556 W5559 V5558)))) false))) false))) false)) false)) false)) false) (if (= W5739 false) (let W5747 (if (shen.unlocked? V5556) (let W5748 (shen.lazyderef V5552 V5555) (if (cons? W5748) (let W5749 (shen.lazyderef (hd W5748) V5555) (if (= W5749 set) (let W5750 (shen.lazyderef (tl W5748) V5555) (if (cons? W5750) (let W5751 (hd W5750) (let W5752 (shen.lazyderef (tl W5750) V5555) (if (cons? W5752) (let W5753 (hd W5752) (let W5754 (shen.lazyderef (tl W5752) V5555) (if (= W5754 ()) (do (shen.incinfs) (shen.system-S-h W5751 symbol V5554 V5555 V5556 W5559 (freeze (shen.system-S-h (cons value (cons W5751 ())) V5553 V5554 V5555 V5556 W5559 (freeze (shen.system-S-h W5753 V5553 V5554 V5555 V5556 W5559 V5558)))))) false))) false))) false)) false)) false)) false) (if (= W5747 false) (let W5755 (if (shen.unlocked? V5556) (let W5756 (shen.newpv V5555) (shen.gc V5555 (do (shen.incinfs) (shen.l-rules V5554 W5756 false V5555 V5556 W5559 (freeze (shen.cut V5555 V5556 W5559 (freeze (shen.system-S-h V5552 V5553 W5756 V5555 V5556 W5559 V5558)))))))) false) (if (= W5755 false) (let W5757 (if (shen.unlocked? V5556) (do (shen.incinfs) (shen.search-user-datatypes (cons V5552 (cons (intern ":") (cons V5553 ()))) V5554 (value shen.*datatypes*) V5555 V5556 W5559 V5558)) false) (if (= W5757 false) (shen.unlock V5556 W5559) W5757)) W5755)) W5747)) W5739)) W5731)) W5710)) W5697)) W5667)) W5657)) W5636)) W5608)) W5587)) W5580)) W5573)) W5567)) W5563)) W5562)) W5561)) W5560))))

(defun shen.primitive (V5758 V5759 V5760 V5761 V5762 V5763) (let W5764 (if (shen.unlocked? V5761) (let W5765 (shen.lazyderef V5759 V5760) (let W5766 (freeze (do (shen.incinfs) (when (number? (shen.lazyderef V5758 V5760)) V5760 V5761 V5762 V5763))) (if (= W5765 number) (thaw W5766) (if (shen.pvar? W5765) (shen.bind! W5765 number V5760 W5766) false)))) false) (if (= W5764 false) (let W5767 (if (shen.unlocked? V5761) (let W5768 (shen.lazyderef V5759 V5760) (let W5769 (freeze (do (shen.incinfs) (when (boolean? (shen.lazyderef V5758 V5760)) V5760 V5761 V5762 V5763))) (if (= W5768 boolean) (thaw W5769) (if (shen.pvar? W5768) (shen.bind! W5768 boolean V5760 W5769) false)))) false) (if (= W5767 false) (let W5770 (if (shen.unlocked? V5761) (let W5771 (shen.lazyderef V5759 V5760) (let W5772 (freeze (do (shen.incinfs) (when (string? (shen.lazyderef V5758 V5760)) V5760 V5761 V5762 V5763))) (if (= W5771 string) (thaw W5772) (if (shen.pvar? W5771) (shen.bind! W5771 string V5760 W5772) false)))) false) (if (= W5770 false) (let W5773 (if (shen.unlocked? V5761) (let W5774 (shen.lazyderef V5759 V5760) (let W5775 (freeze (do (shen.incinfs) (when (symbol? (shen.lazyderef V5758 V5760)) V5760 V5761 V5762 V5763))) (if (= W5774 symbol) (thaw W5775) (if (shen.pvar? W5774) (shen.bind! W5774 symbol V5760 W5775) false)))) false) (if (= W5773 false) (if (shen.unlocked? V5761) (let W5776 (shen.lazyderef V5758 V5760) (if (= W5776 ()) (let W5777 (shen.lazyderef V5759 V5760) (let W5778 (lambda Z5779 (do (shen.incinfs) (thaw V5763))) (if (cons? W5777) (let W5780 (shen.lazyderef (hd W5777) V5760) (let W5781 (freeze (let W5782 (shen.lazyderef (tl W5777) V5760) (let W5783 (lambda Z5784 (W5778 Z5784)) (if (cons? W5782) (let W5785 (hd W5782) (let W5786 (shen.lazyderef (tl W5782) V5760) (let W5787 (freeze (W5783 W5785)) (if (= W5786 ()) (thaw W5787) (if (shen.pvar? W5786) (shen.bind! W5786 () V5760 W5787) false))))) (if (shen.pvar? W5782) (let W5788 (shen.newpv V5760) (shen.gc V5760 (shen.bind! W5782 (cons W5788 ()) V5760 (freeze (W5783 W5788))))) false))))) (if (= W5780 list) (thaw W5781) (if (shen.pvar? W5780) (shen.bind! W5780 list V5760 W5781) false)))) (if (shen.pvar? W5777) (let W5789 (shen.newpv V5760) (shen.gc V5760 (shen.bind! W5777 (cons list (cons W5789 ())) V5760 (freeze (W5778 W5789))))) false)))) false)) false) W5773)) W5770)) W5767)) W5764)))

(defun shen.by-hypothesis (V5790 V5791 V5792 V5793 V5794 V5795 V5796) (let W5797 (if (shen.unlocked? V5794) (let W5798 (shen.lazyderef V5792 V5793) (if (cons? W5798) (let W5799 (shen.lazyderef (hd W5798) V5793) (if (cons? W5799) (let W5800 (hd W5799) (let W5801 (shen.lazyderef (tl W5799) V5793) (if (cons? W5801) (let W5802 (hd W5801) (let W5803 (shen.lazyderef (tl W5801) V5793) (if (cons? W5803) (let W5804 (hd W5803) (let W5805 (shen.lazyderef (tl W5803) V5793) (if (= W5805 ()) (do (shen.incinfs) (when (= (shen.deref W5802 V5793) (intern ":")) V5793 V5794 V5795 (freeze (when (= (shen.deref V5790 V5793) (shen.deref W5800 V5793)) V5793 V5794 V5795 (freeze (is! V5791 W5804 V5793 V5794 V5795 V5796)))))) false))) false))) false))) false)) false)) false) (if (= W5797 false) (if (shen.unlocked? V5794) (let W5806 (shen.lazyderef V5792 V5793) (if (cons? W5806) (let W5807 (tl W5806) (do (shen.incinfs) (shen.by-hypothesis V5790 V5791 W5807 V5793 V5794 V5795 V5796))) false)) false) W5797)))

(defun shen.lookupsig (V5808 V5809 V5810 V5811 V5812 V5813) (if (shen.unlocked? V5811) (do (shen.incinfs) (shen.sigf (assoc V5808 (value shen.*sigf*)) V5809 V5810 V5811 V5812 V5813)) false))

(defun shen.sigf (V5828 V5829 V5830 V5831 V5832 V5833) (cond ((cons? V5828) ((((((tl V5828) V5829) V5830) V5831) V5832) V5833)) (true false)))

(defun shen.freshterm (V5834) (let W5835 (absvector 3) (let W5836 (address-> W5835 0 shen.print-freshterm) (let W5837 (address-> W5836 1 V5834) (let W5838 (address-> W5837 2 (set shen.*gensym* (+ 1 (value shen.*gensym*)))) W5838)))))

(defun shen.print-freshterm (V5839) (cn "&&" (str (<-address V5839 1))))

(defun shen.search-user-datatypes (V5840 V5841 V5842 V5843 V5844 V5845 V5846) (let W5847 (if (shen.unlocked? V5844) (let W5848 (shen.lazyderef V5842 V5843) (if (cons? W5848) (let W5849 (shen.lazyderef (hd W5848) V5843) (if (cons? W5849) (let W5850 (tl W5849) (do (shen.incinfs) (call (((shen.deref W5850 V5843) (shen.deref V5840 V5843)) (shen.deref V5841 V5843)) V5843 V5844 V5845 V5846))) false)) false)) false) (if (= W5847 false) (if (shen.unlocked? V5844) (let W5851 (shen.lazyderef V5842 V5843) (if (cons? W5851) (let W5852 (tl W5851) (do (shen.incinfs) (shen.search-user-datatypes V5840 V5841 W5852 V5843 V5844 V5845 V5846))) false)) false) W5847)))

(defun shen.l-rules (V5853 V5854 V5855 V5856 V5857 V5858 V5859) (let W5860 (+ V5858 1) (let W5861 (if (shen.unlocked? V5857) (let W5862 (shen.lazyderef V5853 V5856) (if (= W5862 ()) (let W5863 (shen.lazyderef V5855 V5856) (if (= W5863 true) (do (shen.incinfs) (shen.cut V5856 V5857 W5860 (freeze (bind V5854 () V5856 V5857 W5860 V5859)))) false)) false)) false) (if (= W5861 false) (let W5864 (if (shen.unlocked? V5857) (let W5865 (shen.lazyderef V5853 V5856) (if (cons? W5865) (let W5866 (shen.lazyderef (hd W5865) V5856) (if (cons? W5866) (let W5867 (shen.lazyderef (hd W5866) V5856) (if (cons? W5867) (let W5868 (shen.lazyderef (hd W5867) V5856) (if (= W5868 cons) (let W5869 (shen.lazyderef (tl W5867) V5856) (if (cons? W5869) (let W5870 (hd W5869) (let W5871 (shen.lazyderef (tl W5869) V5856) (if (cons? W5871) (let W5872 (hd W5871) (let W5873 (shen.lazyderef (tl W5871) V5856) (if (= W5873 ()) (let W5874 (shen.lazyderef (tl W5866) V5856) (if (cons? W5874) (let W5875 (hd W5874) (let W5876 (shen.lazyderef (tl W5874) V5856) (if (cons? W5876) (let W5877 (shen.lazyderef (hd W5876) V5856) (if (cons? W5877) (let W5878 (shen.lazyderef (hd W5877) V5856) (if (= W5878 list) (let W5879 (shen.lazyderef (tl W5877) V5856) (if (cons? W5879) (let W5880 (hd W5879) (let W5881 (shen.lazyderef (tl W5879) V5856) (if (= W5881 ()) (let W5882 (shen.lazyderef (tl W5876) V5856) (if (= W5882 ()) (let W5883 (tl W5865) (do (shen.incinfs) (when (= (shen.deref W5875 V5856) (intern ":")) V5856 V5857 W5860 (freeze (shen.cut V5856 V5857 W5860 (freeze (shen.l-rules (cons (cons W5870 (cons W5875 (cons W5880 ()))) (cons (cons W5872 (cons W5875 (cons (cons list (cons W5880 ())) ()))) W5883)) V5854 true V5856 V5857 W5860 V5859))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W5864 false) (let W5884 (if (shen.unlocked? V5857) (let W5885 (shen.lazyderef V5853 V5856) (if (cons? W5885) (let W5886 (shen.lazyderef (hd W5885) V5856) (if (cons? W5886) (let W5887 (shen.lazyderef (hd W5886) V5856) (if (cons? W5887) (let W5888 (shen.lazyderef (hd W5887) V5856) (if (= W5888 @p) (let W5889 (shen.lazyderef (tl W5887) V5856) (if (cons? W5889) (let W5890 (hd W5889) (let W5891 (shen.lazyderef (tl W5889) V5856) (if (cons? W5891) (let W5892 (hd W5891) (let W5893 (shen.lazyderef (tl W5891) V5856) (if (= W5893 ()) (let W5894 (shen.lazyderef (tl W5886) V5856) (if (cons? W5894) (let W5895 (hd W5894) (let W5896 (shen.lazyderef (tl W5894) V5856) (if (cons? W5896) (let W5897 (shen.lazyderef (hd W5896) V5856) (if (cons? W5897) (let W5898 (hd W5897) (let W5899 (shen.lazyderef (tl W5897) V5856) (if (cons? W5899) (let W5900 (shen.lazyderef (hd W5899) V5856) (if (= W5900 *) (let W5901 (shen.lazyderef (tl W5899) V5856) (if (cons? W5901) (let W5902 (hd W5901) (let W5903 (shen.lazyderef (tl W5901) V5856) (if (= W5903 ()) (let W5904 (shen.lazyderef (tl W5896) V5856) (if (= W5904 ()) (let W5905 (tl W5885) (do (shen.incinfs) (when (= (shen.deref W5895 V5856) (intern ":")) V5856 V5857 W5860 (freeze (shen.cut V5856 V5857 W5860 (freeze (shen.l-rules (cons (cons W5890 (cons W5895 (cons W5898 ()))) (cons (cons W5892 (cons W5895 (cons W5902 ()))) W5905)) V5854 true V5856 V5857 W5860 V5859))))))) false)) false))) false)) false)) false))) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W5884 false) (let W5906 (if (shen.unlocked? V5857) (let W5907 (shen.lazyderef V5853 V5856) (if (cons? W5907) (let W5908 (shen.lazyderef (hd W5907) V5856) (if (cons? W5908) (let W5909 (shen.lazyderef (hd W5908) V5856) (if (cons? W5909) (let W5910 (shen.lazyderef (hd W5909) V5856) (if (= W5910 @s) (let W5911 (shen.lazyderef (tl W5909) V5856) (if (cons? W5911) (let W5912 (hd W5911) (let W5913 (shen.lazyderef (tl W5911) V5856) (if (cons? W5913) (let W5914 (hd W5913) (let W5915 (shen.lazyderef (tl W5913) V5856) (if (= W5915 ()) (let W5916 (shen.lazyderef (tl W5908) V5856) (if (cons? W5916) (let W5917 (hd W5916) (let W5918 (shen.lazyderef (tl W5916) V5856) (if (cons? W5918) (let W5919 (shen.lazyderef (hd W5918) V5856) (if (= W5919 string) (let W5920 (shen.lazyderef (tl W5918) V5856) (if (= W5920 ()) (let W5921 (tl W5907) (do (shen.incinfs) (when (= (shen.deref W5917 V5856) (intern ":")) V5856 V5857 W5860 (freeze (shen.cut V5856 V5857 W5860 (freeze (shen.l-rules (cons (cons W5912 (cons W5917 (cons string ()))) (cons (cons W5914 (cons W5917 (cons string ()))) W5921)) V5854 true V5856 V5857 W5860 V5859))))))) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W5906 false) (let W5922 (if (shen.unlocked? V5857) (let W5923 (shen.lazyderef V5853 V5856) (if (cons? W5923) (let W5924 (shen.lazyderef (hd W5923) V5856) (if (cons? W5924) (let W5925 (shen.lazyderef (hd W5924) V5856) (if (cons? W5925) (let W5926 (shen.lazyderef (hd W5925) V5856) (if (= W5926 @v) (let W5927 (shen.lazyderef (tl W5925) V5856) (if (cons? W5927) (let W5928 (hd W5927) (let W5929 (shen.lazyderef (tl W5927) V5856) (if (cons? W5929) (let W5930 (hd W5929) (let W5931 (shen.lazyderef (tl W5929) V5856) (if (= W5931 ()) (let W5932 (shen.lazyderef (tl W5924) V5856) (if (cons? W5932) (let W5933 (hd W5932) (let W5934 (shen.lazyderef (tl W5932) V5856) (if (cons? W5934) (let W5935 (shen.lazyderef (hd W5934) V5856) (if (cons? W5935) (let W5936 (shen.lazyderef (hd W5935) V5856) (if (= W5936 vector) (let W5937 (shen.lazyderef (tl W5935) V5856) (if (cons? W5937) (let W5938 (hd W5937) (let W5939 (shen.lazyderef (tl W5937) V5856) (if (= W5939 ()) (let W5940 (shen.lazyderef (tl W5934) V5856) (if (= W5940 ()) (let W5941 (tl W5923) (do (shen.incinfs) (when (= (shen.deref W5933 V5856) (intern ":")) V5856 V5857 W5860 (freeze (shen.cut V5856 V5857 W5860 (freeze (shen.l-rules (cons (cons W5928 (cons W5933 (cons W5938 ()))) (cons (cons W5930 (cons W5933 (cons (cons vector (cons W5938 ())) ()))) W5941)) V5854 true V5856 V5857 W5860 V5859))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W5922 false) (let W5942 (if (shen.unlocked? V5857) (let W5943 (shen.lazyderef V5853 V5856) (if (cons? W5943) (let W5944 (hd W5943) (let W5945 (tl W5943) (let W5946 (shen.lazyderef V5854 V5856) (let W5947 (lambda Z5948 (lambda Z5949 (do (shen.incinfs) (bind Z5948 W5944 V5856 V5857 W5860 (freeze (shen.l-rules W5945 Z5949 V5855 V5856 V5857 W5860 V5859)))))) (if (cons? W5946) (let W5950 (hd W5946) (let W5951 (tl W5946) ((W5947 W5950) W5951))) (if (shen.pvar? W5946) (let W5952 (shen.newpv V5856) (shen.gc V5856 (let W5953 (shen.newpv V5856) (shen.gc V5856 (shen.bind! W5946 (cons W5952 W5953) V5856 (freeze ((W5947 W5952) W5953))))))) false)))))) false)) false) (if (= W5942 false) (shen.unlock V5857 W5860) W5942)) W5922)) W5906)) W5884)) W5864)) W5861))))

(defun shen.t* (V5954 V5955 V5956 V5957 V5958 V5959) (let W5960 (+ V5958 1) (let W5961 (if (shen.unlocked? V5957) (let W5962 (shen.lazyderef V5954 V5956) (if (cons? W5962) (let W5963 (shen.lazyderef (hd W5962) V5956) (if (= W5963 define) (let W5964 (shen.lazyderef (tl W5962) V5956) (if (cons? W5964) (let W5965 (hd W5964) (let W5966 (tl W5964) (let W5967 (shen.newpv V5956) (shen.gc V5956 (let W5968 (shen.newpv V5956) (shen.gc V5956 (let W5969 (shen.newpv V5956) (shen.gc V5956 (let W5970 (shen.newpv V5956) (shen.gc V5956 (do (shen.incinfs) (shen.cut V5956 V5957 W5960 (freeze (bind W5967 (shen.sigxrules (cons W5965 W5966)) V5956 V5957 W5960 (freeze (bind W5970 (fst (shen.lazyderef W5967 V5956)) V5956 V5957 W5960 (freeze (bind W5968 (snd (shen.lazyderef W5967 V5956)) V5956 V5957 W5960 (freeze (bind W5969 (shen.freshen-sig (shen.deref W5970 V5956)) V5956 V5957 W5960 (freeze (shen.t*-rules W5965 W5968 W5969 1 V5956 V5957 W5960 (freeze (is W5970 V5955 V5956 V5957 W5960 V5959)))))))))))))))))))))))) false)) false)) false)) false) (if (= W5961 false) (shen.unlock V5957 W5960) W5961))))

(defun shen.sigxrules (V5971) (compile (lambda Z5972 (shen.<sig*rules> Z5972)) V5971))

(defun shen.<sig*rules> (V5973) (let W5974 (if (shen.non-empty-stream? V5973) (let W5975 (shen.hds V5973) (let W5976 (shen.tls V5973) (if (shen.=hd? W5976 {) (let W5977 (shen.tls W5976) (let W5978 (shen.<signature> W5977) (if (shen.parse-failure? W5978) (shen.parse-failure) (if (shen.=hd? W5978 }) (let W5979 (shen.tls W5978) (let W5980 (shen.<rules*> W5979) (if (shen.parse-failure? W5980) (shen.parse-failure) (shen.comb (shen.in-> W5980) (let W5981 (shen.rectify-type (shen.<-out W5978)) (@p W5981 (shen.<-out W5980))))))) (shen.parse-failure))))) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W5974) (shen.parse-failure) W5974)))

(defun shen.freshen-sig (V5982) (let W5983 (shen.extract-vars V5982) (let W5984 (map (lambda Z5985 (cons Z5985 (shen.freshterm (concat & Z5985)))) W5983) (shen.freshen-type W5984 V5982))))

(defun shen.freshen-type (V5986 V5987) (cond ((= () V5986) V5987) ((and (cons? V5986) (cons? (hd V5986))) (shen.freshen-type (tl V5986) (subst (tl (hd V5986)) (hd (hd V5986)) V5987))) (true (shen.f-error shen.freshen-type))))

(defun shen.<rules*> (V5988) (let W5989 (let W5990 (shen.<rule*> V5988) (if (shen.parse-failure? W5990) (shen.parse-failure) (let W5991 (shen.<rules*> W5990) (if (shen.parse-failure? W5991) (shen.parse-failure) (shen.comb (shen.in-> W5991) (cons (shen.<-out W5990) (shen.<-out W5991))))))) (if (shen.parse-failure? W5989) (let W5992 (let W5993 (shen.<rule*> V5988) (if (shen.parse-failure? W5993) (shen.parse-failure) (shen.comb (shen.in-> W5993) (cons (shen.<-out W5993) ())))) (if (shen.parse-failure? W5992) (shen.parse-failure) W5992)) W5989)))

(defun shen.<rule*> (V5994) (let W5995 (let W5996 (shen.<patterns> V5994) (if (shen.parse-failure? W5996) (shen.parse-failure) (if (shen.=hd? W5996 ->) (let W5997 (shen.tls W5996) (if (shen.non-empty-stream? W5997) (let W5998 (shen.hds W5997) (let W5999 (shen.tls W5997) (if (shen.=hd? W5999 where) (let W6000 (shen.tls W5999) (if (shen.non-empty-stream? W6000) (let W6001 (shen.hds W6000) (let W6002 (shen.tls W6000) (shen.comb (shen.in-> W6002) (@p (shen.<-out W5996) (cons where (cons W6001 (cons W5998 ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? W5995) (let W6003 (let W6004 (shen.<patterns> V5994) (if (shen.parse-failure? W6004) (shen.parse-failure) (if (shen.=hd? W6004 <-) (let W6005 (shen.tls W6004) (if (shen.non-empty-stream? W6005) (let W6006 (shen.hds W6005) (let W6007 (shen.tls W6005) (if (shen.=hd? W6007 where) (let W6008 (shen.tls W6007) (if (shen.non-empty-stream? W6008) (let W6009 (shen.hds W6008) (let W6010 (shen.tls W6008) (shen.comb (shen.in-> W6010) (@p (shen.<-out W6004) (shen.correct (cons where (cons W6009 (cons W6006 ())))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? W6003) (let W6011 (let W6012 (shen.<patterns> V5994) (if (shen.parse-failure? W6012) (shen.parse-failure) (if (shen.=hd? W6012 <-) (let W6013 (shen.tls W6012) (if (shen.non-empty-stream? W6013) (let W6014 (shen.hds W6013) (let W6015 (shen.tls W6013) (shen.comb (shen.in-> W6015) (@p (shen.<-out W6012) (shen.correct W6014))))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? W6011) (let W6016 (let W6017 (shen.<patterns> V5994) (if (shen.parse-failure? W6017) (shen.parse-failure) (if (shen.=hd? W6017 ->) (let W6018 (shen.tls W6017) (if (shen.non-empty-stream? W6018) (let W6019 (shen.hds W6018) (let W6020 (shen.tls W6018) (shen.comb (shen.in-> W6020) (@p (shen.<-out W6017) W6019)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? W6016) (shen.parse-failure) W6016)) W6011)) W6003)) W5995)))

(defun shen.correct (V6021) (cond ((and (cons? V6021) (and (= where (hd V6021)) (and (cons? (tl V6021)) (and (cons? (tl (tl V6021))) (and (cons? (hd (tl (tl V6021)))) (and (= fail-if (hd (hd (tl (tl V6021))))) (and (cons? (tl (hd (tl (tl V6021))))) (and (cons? (tl (tl (hd (tl (tl V6021)))))) (and (= () (tl (tl (tl (hd (tl (tl V6021))))))) (= () (tl (tl (tl V6021))))))))))))) (cons where (cons (cons and (cons (hd (tl V6021)) (cons (cons not (cons (tl (hd (tl (tl V6021)))) ())) ()))) (tl (tl (hd (tl (tl V6021)))))))) ((and (cons? V6021) (and (= where (hd V6021)) (and (cons? (tl V6021)) (and (cons? (tl (tl V6021))) (= () (tl (tl (tl V6021)))))))) (cons where (cons (cons and (cons (hd (tl V6021)) (cons (cons not (cons (cons = (cons (hd (tl (tl V6021))) (cons (cons fail ()) ()))) ())) ()))) (tl (tl V6021))))) ((and (cons? V6021) (and (= fail-if (hd V6021)) (and (cons? (tl V6021)) (and (cons? (tl (tl V6021))) (= () (tl (tl (tl V6021)))))))) (cons where (cons (cons not (cons (tl V6021) ())) (tl (tl V6021))))) (true (cons where (cons (cons not (cons (cons = (cons V6021 (cons (cons fail ()) ()))) ())) (cons V6021 ()))))))

(defun shen.t*-rules (V6022 V6023 V6024 V6025 V6026 V6027 V6028 V6029) (let W6030 (+ V6028 1) (let W6031 (if (shen.unlocked? V6027) (let W6032 (shen.lazyderef V6023 V6026) (if (= W6032 ()) (do (shen.incinfs) (thaw V6029)) false)) false) (if (= W6031 false) (let W6033 (if (shen.unlocked? V6027) (let W6034 (shen.lazyderef V6023 V6026) (if (cons? W6034) (let W6035 (hd W6034) (let W6036 (tl W6034) (let W6037 (shen.newpv V6026) (shen.gc V6026 (do (shen.incinfs) (bind W6037 (shen.freshen-rule (shen.deref W6035 V6026)) V6026 V6027 W6030 (freeze (shen.t*-rule V6022 V6025 (fst (shen.lazyderef W6037 V6026)) (snd (shen.lazyderef W6037 V6026)) V6024 V6026 V6027 W6030 (freeze (shen.cut V6026 V6027 W6030 (freeze (shen.t*-rules V6022 W6036 V6024 (+ V6025 1) V6026 V6027 W6030 V6029)))))))))))) false)) false) (if (= W6033 false) (shen.unlock V6027 W6030) W6033)) W6031))))

(defun shen.freshen-rule (V6038) (cond ((tuple? V6038) (let W6039 (shen.extract-vars (fst V6038)) (let W6040 (map (lambda Z6041 (cons Z6041 (shen.freshterm Z6041))) W6039) (@p (shen.freshen W6040 (fst V6038)) (shen.freshen W6040 (snd V6038)))))) (true (shen.f-error shen.freshen-rule))))

(defun shen.freshen (V6042 V6043) (cond ((= () V6042) V6043) ((and (cons? V6042) (cons? (hd V6042))) (shen.freshen (tl V6042) (shen.beta (hd (hd V6042)) (tl (hd V6042)) V6043))) (true (shen.f-error shen.freshen))))

(defun shen.t*-rule (V6044 V6045 V6046 V6047 V6048 V6049 V6050 V6051 V6052) (let W6053 (if (shen.unlocked? V6050) (do (shen.incinfs) (shen.t*-rule-h V6046 V6047 V6048 V6049 V6050 V6051 V6052)) false) (if (= W6053 false) (if (shen.unlocked? V6050) (let W6054 (shen.newpv V6049) (shen.gc V6049 (do (shen.incinfs) (bind W6054 (simple-error (cn "type error in rule " (shen.app V6045 (cn " of " (shen.app V6044 "
" shen.a)) shen.a))) V6049 V6050 V6051 V6052)))) false) W6053)))

(defun shen.t*-rule-h (V6055 V6056 V6057 V6058 V6059 V6060 V6061) (let W6062 (+ V6060 1) (let W6063 (if (shen.unlocked? V6059) (let W6064 (shen.lazyderef V6055 V6058) (if (= W6064 ()) (let W6065 (shen.lazyderef V6057 V6058) (if (cons? W6065) (let W6066 (shen.lazyderef (hd W6065) V6058) (if (= W6066 -->) (let W6067 (shen.lazyderef (tl W6065) V6058) (if (cons? W6067) (let W6068 (hd W6067) (let W6069 (shen.lazyderef (tl W6067) V6058) (if (= W6069 ()) (do (shen.incinfs) (shen.cut V6058 V6059 W6062 (freeze (shen.t*-correct V6056 W6068 () V6058 V6059 W6062 V6061)))) false))) false)) false)) false)) false)) false) (if (= W6063 false) (let W6070 (if (shen.unlocked? V6059) (let W6071 (shen.newpv V6058) (shen.gc V6058 (let W6072 (shen.newpv V6058) (shen.gc V6058 (let W6073 (shen.newpv V6058) (shen.gc V6058 (do (shen.incinfs) (shen.p-hyps (shen.freshterms V6055) W6071 V6058 V6059 W6062 (freeze (shen.t*-integrity V6055 V6057 W6071 W6072 V6058 V6059 W6062 (freeze (shen.cut V6058 V6059 W6062 (freeze (shen.myassume V6055 V6057 W6073 V6058 V6059 W6062 (freeze (shen.t*-correct V6056 W6072 W6073 V6058 V6059 W6062 V6061)))))))))))))))) false) (if (= W6070 false) (shen.unlock V6059 W6062) W6070)) W6063))))

(defun shen.myassume (V6074 V6075 V6076 V6077 V6078 V6079 V6080) (let W6081 (if (shen.unlocked? V6078) (let W6082 (shen.lazyderef V6074 V6077) (if (= W6082 ()) (let W6083 (shen.lazyderef V6076 V6077) (let W6084 (freeze (do (shen.incinfs) (thaw V6080))) (if (= W6083 ()) (thaw W6084) (if (shen.pvar? W6083) (shen.bind! W6083 () V6077 W6084) false)))) false)) false) (if (= W6081 false) (if (shen.unlocked? V6078) (let W6085 (shen.lazyderef V6074 V6077) (if (cons? W6085) (let W6086 (hd W6085) (let W6087 (tl W6085) (let W6088 (shen.lazyderef V6075 V6077) (if (cons? W6088) (let W6089 (hd W6088) (let W6090 (shen.lazyderef (tl W6088) V6077) (if (cons? W6090) (let W6091 (shen.lazyderef (hd W6090) V6077) (if (= W6091 -->) (let W6092 (shen.lazyderef (tl W6090) V6077) (if (cons? W6092) (let W6093 (hd W6092) (let W6094 (shen.lazyderef (tl W6092) V6077) (if (= W6094 ()) (let W6095 (shen.lazyderef V6076 V6077) (let W6096 (lambda Z6097 (lambda Z6098 (lambda Z6099 (lambda Z6100 (do (shen.incinfs) (is! W6089 Z6099 V6077 V6078 V6079 (freeze (is! W6086 Z6097 V6077 V6078 V6079 (freeze (bind Z6098 (intern ":") V6077 V6078 V6079 (freeze (shen.myassume W6087 W6093 Z6100 V6077 V6078 V6079 V6080)))))))))))) (if (cons? W6095) (let W6101 (shen.lazyderef (hd W6095) V6077) (let W6102 (lambda Z6103 (lambda Z6104 (lambda Z6105 (let W6106 (tl W6095) ((((W6096 Z6103) Z6104) Z6105) W6106))))) (if (cons? W6101) (let W6107 (hd W6101) (let W6108 (shen.lazyderef (tl W6101) V6077) (let W6109 (lambda Z6110 (lambda Z6111 (((W6102 W6107) Z6110) Z6111))) (if (cons? W6108) (let W6112 (hd W6108) (let W6113 (shen.lazyderef (tl W6108) V6077) (let W6114 (lambda Z6115 ((W6109 W6112) Z6115)) (if (cons? W6113) (let W6116 (hd W6113) (let W6117 (shen.lazyderef (tl W6113) V6077) (let W6118 (freeze (W6114 W6116)) (if (= W6117 ()) (thaw W6118) (if (shen.pvar? W6117) (shen.bind! W6117 () V6077 W6118) false))))) (if (shen.pvar? W6113) (let W6119 (shen.newpv V6077) (shen.gc V6077 (shen.bind! W6113 (cons W6119 ()) V6077 (freeze (W6114 W6119))))) false))))) (if (shen.pvar? W6108) (let W6120 (shen.newpv V6077) (shen.gc V6077 (let W6121 (shen.newpv V6077) (shen.gc V6077 (shen.bind! W6108 (cons W6120 (cons W6121 ())) V6077 (freeze ((W6109 W6120) W6121))))))) false))))) (if (shen.pvar? W6101) (let W6122 (shen.newpv V6077) (shen.gc V6077 (let W6123 (shen.newpv V6077) (shen.gc V6077 (let W6124 (shen.newpv V6077) (shen.gc V6077 (shen.bind! W6101 (cons W6122 (cons W6123 (cons W6124 ()))) V6077 (freeze (((W6102 W6122) W6123) W6124))))))))) false)))) (if (shen.pvar? W6095) (let W6125 (shen.newpv V6077) (shen.gc V6077 (let W6126 (shen.newpv V6077) (shen.gc V6077 (let W6127 (shen.newpv V6077) (shen.gc V6077 (let W6128 (shen.newpv V6077) (shen.gc V6077 (shen.bind! W6095 (cons (cons W6125 (cons W6126 (cons W6127 ()))) W6128) V6077 (freeze ((((W6096 W6125) W6126) W6127) W6128))))))))))) false)))) false))) false)) false)) false))) false)))) false)) false) W6081)))

(defun shen.freshterms (V6131) (cond ((= () V6131) ()) ((and (cons? V6131) (cons? (hd V6131))) (shen.freshterms (append (hd V6131) (tl V6131)))) ((and (cons? V6131) (shen.freshterm? (hd V6131))) (adjoin (hd V6131) (shen.freshterms (tl V6131)))) ((cons? V6131) (shen.freshterms (tl V6131))) (true (shen.f-error shen.freshterms))))

(defun shen.p-hyps (V6132 V6133 V6134 V6135 V6136 V6137) (let W6138 (if (shen.unlocked? V6135) (let W6139 (shen.lazyderef V6132 V6134) (if (= W6139 ()) (let W6140 (shen.lazyderef V6133 V6134) (let W6141 (freeze (do (shen.incinfs) (thaw V6137))) (if (= W6140 ()) (thaw W6141) (if (shen.pvar? W6140) (shen.bind! W6140 () V6134 W6141) false)))) false)) false) (if (= W6138 false) (if (shen.unlocked? V6135) (let W6142 (shen.lazyderef V6132 V6134) (if (cons? W6142) (let W6143 (hd W6142) (let W6144 (tl W6142) (let W6145 (shen.lazyderef V6133 V6134) (let W6146 (lambda Z6147 (lambda Z6148 (lambda Z6149 (lambda Z6150 (do (shen.incinfs) (bind Z6147 W6143 V6134 V6135 V6136 (freeze (bind Z6148 (intern ":") V6134 V6135 V6136 (freeze (shen.p-hyps W6144 Z6150 V6134 V6135 V6136 V6137)))))))))) (if (cons? W6145) (let W6151 (shen.lazyderef (hd W6145) V6134) (let W6152 (lambda Z6153 (lambda Z6154 (lambda Z6155 (let W6156 (tl W6145) ((((W6146 Z6153) Z6154) Z6155) W6156))))) (if (cons? W6151) (let W6157 (hd W6151) (let W6158 (shen.lazyderef (tl W6151) V6134) (let W6159 (lambda Z6160 (lambda Z6161 (((W6152 W6157) Z6160) Z6161))) (if (cons? W6158) (let W6162 (hd W6158) (let W6163 (shen.lazyderef (tl W6158) V6134) (let W6164 (lambda Z6165 ((W6159 W6162) Z6165)) (if (cons? W6163) (let W6166 (hd W6163) (let W6167 (shen.lazyderef (tl W6163) V6134) (let W6168 (freeze (W6164 W6166)) (if (= W6167 ()) (thaw W6168) (if (shen.pvar? W6167) (shen.bind! W6167 () V6134 W6168) false))))) (if (shen.pvar? W6163) (let W6169 (shen.newpv V6134) (shen.gc V6134 (shen.bind! W6163 (cons W6169 ()) V6134 (freeze (W6164 W6169))))) false))))) (if (shen.pvar? W6158) (let W6170 (shen.newpv V6134) (shen.gc V6134 (let W6171 (shen.newpv V6134) (shen.gc V6134 (shen.bind! W6158 (cons W6170 (cons W6171 ())) V6134 (freeze ((W6159 W6170) W6171))))))) false))))) (if (shen.pvar? W6151) (let W6172 (shen.newpv V6134) (shen.gc V6134 (let W6173 (shen.newpv V6134) (shen.gc V6134 (let W6174 (shen.newpv V6134) (shen.gc V6134 (shen.bind! W6151 (cons W6172 (cons W6173 (cons W6174 ()))) V6134 (freeze (((W6152 W6172) W6173) W6174))))))))) false)))) (if (shen.pvar? W6145) (let W6175 (shen.newpv V6134) (shen.gc V6134 (let W6176 (shen.newpv V6134) (shen.gc V6134 (let W6177 (shen.newpv V6134) (shen.gc V6134 (let W6178 (shen.newpv V6134) (shen.gc V6134 (shen.bind! W6145 (cons (cons W6175 (cons W6176 (cons W6177 ()))) W6178) V6134 (freeze ((((W6146 W6175) W6176) W6177) W6178))))))))))) false)))))) false)) false) W6138)))

(defun shen.t*-correct (V6179 V6180 V6181 V6182 V6183 V6184 V6185) (let W6186 (+ V6184 1) (let W6187 (if (shen.unlocked? V6183) (let W6188 (shen.lazyderef V6179 V6182) (if (cons? W6188) (let W6189 (shen.lazyderef (hd W6188) V6182) (if (= W6189 where) (let W6190 (shen.lazyderef (tl W6188) V6182) (if (cons? W6190) (let W6191 (hd W6190) (let W6192 (shen.lazyderef (tl W6190) V6182) (if (cons? W6192) (let W6193 (hd W6192) (let W6194 (shen.lazyderef (tl W6192) V6182) (if (= W6194 ()) (let W6195 (shen.newpv V6182) (shen.gc V6182 (do (shen.incinfs) (shen.cut V6182 V6183 W6186 (freeze (bind W6195 (shen.curry W6191) V6182 V6183 W6186 (freeze (shen.system-S-h W6195 boolean V6181 V6182 V6183 W6186 (freeze (shen.cut V6182 V6183 W6186 (freeze (shen.t*-correct W6193 V6180 (cons (cons W6195 (cons (intern ":") (cons verified ()))) V6181) V6182 V6183 W6186 V6185)))))))))))) false))) false))) false)) false)) false)) false) (if (= W6187 false) (let W6196 (if (shen.unlocked? V6183) (do (shen.incinfs) (shen.system-S-h (shen.curry V6179) V6180 V6181 V6182 V6183 W6186 V6185)) false) (if (= W6196 false) (shen.unlock V6183 W6186) W6196)) W6187))))

(defun shen.t*-integrity (V6197 V6198 V6199 V6200 V6201 V6202 V6203 V6204) (let W6205 (if (shen.unlocked? V6202) (let W6206 (shen.lazyderef V6197 V6201) (if (= W6206 ()) (do (shen.incinfs) (is! V6198 V6200 V6201 V6202 V6203 V6204)) false)) false) (if (= W6205 false) (if (shen.unlocked? V6202) (let W6207 (shen.lazyderef V6197 V6201) (if (cons? W6207) (let W6208 (hd W6207) (let W6209 (tl W6207) (let W6210 (shen.lazyderef V6198 V6201) (if (cons? W6210) (let W6211 (hd W6210) (let W6212 (shen.lazyderef (tl W6210) V6201) (if (cons? W6212) (let W6213 (shen.lazyderef (hd W6212) V6201) (if (= W6213 -->) (let W6214 (shen.lazyderef (tl W6212) V6201) (if (cons? W6214) (let W6215 (hd W6214) (let W6216 (shen.lazyderef (tl W6214) V6201) (if (= W6216 ()) (do (shen.incinfs) (shen.system-S-h W6208 W6211 V6199 V6201 V6202 V6203 (freeze (shen.t*-integrity W6209 W6215 V6199 V6200 V6201 V6202 V6203 V6204)))) false))) false)) false)) false))) false)))) false)) false) W6205)))

(defun shen.freshterm? (V6217) (and (absvector? V6217) (and (not (string? V6217)) (= (<-address V6217 0) shen.print-freshterm))))

