(defun macroexpand (V7689) (let W7690 (map (lambda Z7691 (tl Z7691)) (value *macros*)) (shen.macroexpand-h V7689 W7690 W7690)))

(defun shen.macroexpand-h (V7700 V7701 V7702) (cond ((= () V7701) V7700) ((cons? V7701) (let W7703 (shen.walk (hd V7701) V7700) (if (= V7700 W7703) (shen.macroexpand-h V7700 (tl V7701) V7702) (shen.macroexpand-h W7703 V7702 V7702)))) (true (simple-error "implementation error in shen.macroexpand-h"))))

(defun shen.walk (V7704 V7705) (cond ((cons? V7705) (V7704 (map (lambda Z7706 (shen.walk V7704 Z7706)) V7705))) (true (V7704 V7705))))

(defun shen.defmacro-macro (V7707) (cond ((and (cons? V7707) (and (= defmacro (hd V7707)) (cons? (tl V7707)))) (let W7708 (cons X (cons -> (cons X ()))) (let W7709 (eval (cons define (cons (hd (tl V7707)) (append (tl (tl V7707)) W7708)))) (let W7710 (shen.record-macro (hd (tl V7707)) (lambda Z7711 ((hd (tl V7707)) Z7711))) (hd (tl V7707)))))) (true V7707)))

(defun shen.u!-macro (V7712) (cond ((and (cons? V7712) (and (= u! (hd V7712)) (and (cons? (tl V7712)) (= () (tl (tl V7712)))))) (cons protect (cons (shen.make-uppercase (hd (tl V7712))) ()))) (true V7712)))

(defun shen.make-uppercase (V7713) (intern (shen.mu-h (str V7713))))

(defun shen.mu-h (V7714) (cond ((= "" V7714) "") ((shen.+string? V7714) (let W7715 (string->n (hdstr V7714)) (let W7716 (- W7715 32) (let W7717 (if (and (>= W7715 97) (<= W7715 122)) (n->string W7716) (hdstr V7714)) (@s W7717 (shen.mu-h (tlstr V7714))))))) (true (shen.f-error shen.mu-h))))

(defun shen.record-macro (V7718 V7719) (set *macros* (shen.update-assoc V7718 V7719 (value *macros*))))

(defun shen.update-assoc (V7729 V7730 V7731) (cond ((= () V7731) (cons (cons V7729 V7730) ())) ((and (cons? V7731) (and (cons? (hd V7731)) (= V7729 (hd (hd V7731))))) (cons (cons (hd (hd V7731)) V7730) (tl V7731))) ((cons? V7731) (cons (hd V7731) (shen.update-assoc V7729 V7730 (tl V7731)))) (true (simple-error "implementation error in shen.update-assoc"))))

(defun shen.error-macro (V7732) (cond ((and (cons? V7732) (and (= error (hd V7732)) (cons? (tl V7732)))) (cons simple-error (cons (shen.mkstr (hd (tl V7732)) (tl (tl V7732))) ()))) (true V7732)))

(defun shen.output-macro (V7733) (cond ((and (cons? V7733) (and (= output (hd V7733)) (cons? (tl V7733)))) (cons pr (cons (shen.mkstr (hd (tl V7733)) (tl (tl V7733))) (cons (cons stoutput ()) ())))) ((and (cons? V7733) (and (= pr (hd V7733)) (and (cons? (tl V7733)) (= () (tl (tl V7733)))))) (cons pr (cons (hd (tl V7733)) (cons (cons stoutput ()) ())))) (true V7733)))

(defun shen.make-string-macro (V7734) (cond ((and (cons? V7734) (and (= make-string (hd V7734)) (cons? (tl V7734)))) (shen.mkstr (hd (tl V7734)) (tl (tl V7734)))) (true V7734)))

(defun shen.input-macro (V7735) (cond ((and (cons? V7735) (and (= lineread (hd V7735)) (= () (tl V7735)))) (cons lineread (cons (cons stinput ()) ()))) ((and (cons? V7735) (and (= input (hd V7735)) (= () (tl V7735)))) (cons input (cons (cons stinput ()) ()))) ((and (cons? V7735) (and (= read (hd V7735)) (= () (tl V7735)))) (cons read (cons (cons stinput ()) ()))) ((and (cons? V7735) (and (= input+ (hd V7735)) (and (cons? (tl V7735)) (= () (tl (tl V7735)))))) (cons input+ (cons (hd (tl V7735)) (cons (cons stinput ()) ())))) ((and (cons? V7735) (and (= read-byte (hd V7735)) (= () (tl V7735)))) (if (shen.char-stinput? (stinput)) (cons string->n (cons (cons shen.read-unit-string (cons (cons stinput ()) ())) ())) (cons read-byte (cons (cons stinput ()) ())))) (true V7735)))

(defun shen.defcc-macro (V7736) (cond ((and (cons? V7736) (= defcc (hd V7736))) (shen.yacc->shen (tl V7736))) (true V7736)))

(defun shen.prolog-macro (V7737) (cond ((and (cons? V7737) (= prolog? (hd V7737))) (shen.call-prolog (tl V7737))) (true V7737)))

(defun shen.call-prolog (V7738) (let W7739 (cons shen.reset-prolog-vector ()) (let W7740 (cons @v (cons true (cons 0 (cons (cons vector (cons 0 ())) ())))) (let W7741 0 (let W7742 (cons freeze (cons true ())) (let W7743 (compile (lambda Z7744 (shen.<body> Z7744)) V7738) (let W7745 (shen.received V7738) (let W7746 (gensym V) (let W7747 (gensym L) (let W7748 (gensym K) (let W7749 (gensym C) (let W7750 (cons lambda (cons W7746 (cons (cons lambda (cons W7747 (cons (cons lambda (cons W7748 (cons (cons lambda (cons W7749 (cons (shen.continue W7745 W7743 W7746 W7747 W7748 W7749) ()))) ()))) ()))) ()))) (cons W7750 (cons W7739 (cons W7740 (cons W7741 (cons W7742 ())))))))))))))))))

(defun shen.received (V7753) (cond ((and (cons? V7753) (and (= receive (hd V7753)) (and (cons? (tl V7753)) (= () (tl (tl V7753)))))) (tl V7753)) ((cons? V7753) (union (shen.received (hd V7753)) (shen.received (tl V7753)))) (true ())))

(defun shen.reset-prolog-vector () (address-> (value shen.*prolog-vector*) 1 2))

(defun receive (V7754) V7754)

(defun shen.defprolog-macro (V7755) (cond ((and (cons? V7755) (and (= defprolog (hd V7755)) (cons? (tl V7755)))) (shen.compile-prolog (hd (tl V7755)) (tl (tl V7755)))) (true V7755)))

(defun shen.datatype-macro (V7756) (cond ((and (cons? V7756) (and (= datatype (hd V7756)) (cons? (tl V7756)))) (let W7757 (shen.intern-type (hd (tl V7756))) (let W7758 (compile (lambda Z7759 (shen.<datatype> Z7759)) (cons W7757 (tl (tl V7756)))) W7757))) (true V7756)))

(defun shen.rcons_form (V7760) (cond ((cons? V7760) (cons cons (cons (shen.rcons_form (hd V7760)) (cons (shen.rcons_form (tl V7760)) ())))) (true V7760)))

(defun shen.intern-type (V7761) (intern (cn (str V7761) "#type")))

(defun shen.@s-macro (V7762) (cond ((and (cons? V7762) (and (= @s (hd V7762)) (and (cons? (tl V7762)) (and (cons? (tl (tl V7762))) (cons? (tl (tl (tl V7762)))))))) (cons @s (cons (hd (tl V7762)) (cons (shen.@s-macro (cons @s (tl (tl V7762)))) ())))) ((and (cons? V7762) (and (= @s (hd V7762)) (and (cons? (tl V7762)) (and (cons? (tl (tl V7762))) (and (= () (tl (tl (tl V7762)))) (string? (hd (tl V7762)))))))) (let W7763 (explode (hd (tl V7762))) (if (> (length W7763) 1) (shen.@s-macro (cons @s (append W7763 (tl (tl V7762))))) V7762))) (true V7762)))

(defun shen.synonyms-macro (V7764) (cond ((and (cons? V7764) (= synonyms (hd V7764))) (shen.synonyms-h (set shen.*synonyms* (append (tl V7764) (value shen.*synonyms*))))) (true V7764)))

(defun shen.synonyms-h (V7765) (let W7766 (map (lambda Z7767 (shen.curry-type Z7767)) V7765) (let W7768 (eval (cons define (cons shen.demod (shen.compile-synonyms W7766)))) synonyms)))

(defun shen.compile-synonyms (V7771) (cond ((= () V7771) (let W7772 (gensym X) (cons W7772 (cons -> (cons W7772 ()))))) ((and (cons? V7771) (cons? (tl V7771))) (cons (shen.rcons_form (hd V7771)) (cons -> (cons (shen.rcons_form (hd (tl V7771))) (shen.compile-synonyms (tl (tl V7771))))))) (true (simple-error "synonyms requires an even number of arguments
"))))

(defun shen.nl-macro (V7773) (cond ((and (cons? V7773) (and (= nl (hd V7773)) (= () (tl V7773)))) (cons nl (cons 1 ()))) (true V7773)))

(defun shen.assoc-macro (V7774) (cond ((and (cons? V7774) (and (cons? (tl V7774)) (and (cons? (tl (tl V7774))) (and (cons? (tl (tl (tl V7774)))) (element? (hd V7774) (cons @p (cons @v (cons append (cons and (cons or (cons + (cons * (cons do ()))))))))))))) (cons (hd V7774) (cons (hd (tl V7774)) (cons (shen.assoc-macro (cons (hd V7774) (tl (tl V7774)))) ())))) (true V7774)))

(defun shen.let-macro (V7775) (cond ((and (cons? V7775) (and (= let (hd V7775)) (and (cons? (tl V7775)) (and (cons? (tl (tl V7775))) (and (cons? (tl (tl (tl V7775)))) (cons? (tl (tl (tl (tl V7775)))))))))) (cons let (cons (hd (tl V7775)) (cons (hd (tl (tl V7775))) (cons (shen.let-macro (cons let (tl (tl (tl V7775))))) ()))))) ((and (cons? V7775) (and (= let (hd V7775)) (and (cons? (tl V7775)) (and (cons? (tl (tl V7775))) (and (cons? (tl (tl (tl V7775)))) (= () (tl (tl (tl (tl V7775)))))))))) (if (variable? (hd (tl V7775))) V7775 (simple-error (shen.app (hd (tl V7775)) " is not a variable
" shen.s)))) (true V7775)))

(defun shen.abs-macro (V7776) (cond ((and (cons? V7776) (and (= /. (hd V7776)) (and (cons? (tl V7776)) (and (cons? (tl (tl V7776))) (cons? (tl (tl (tl V7776)))))))) (cons lambda (cons (hd (tl V7776)) (cons (shen.abs-macro (cons /. (tl (tl V7776)))) ())))) ((and (cons? V7776) (and (= /. (hd V7776)) (and (cons? (tl V7776)) (and (cons? (tl (tl V7776))) (= () (tl (tl (tl V7776)))))))) (if (variable? (hd (tl V7776))) (cons lambda (tl V7776)) (simple-error (shen.app (hd (tl V7776)) " is not a variable
" shen.s)))) (true V7776)))

(defun shen.cases-macro (V7779) (cond ((and (cons? V7779) (and (= cases (hd V7779)) (and (cons? (tl V7779)) (and (= true (hd (tl V7779))) (cons? (tl (tl V7779))))))) (hd (tl (tl V7779)))) ((and (cons? V7779) (and (= cases (hd V7779)) (and (cons? (tl V7779)) (and (cons? (tl (tl V7779))) (= () (tl (tl (tl V7779)))))))) (cons if (cons (hd (tl V7779)) (cons (hd (tl (tl V7779))) (cons (cons simple-error (cons "error: cases exhausted" ())) ()))))) ((and (cons? V7779) (and (= cases (hd V7779)) (and (cons? (tl V7779)) (cons? (tl (tl V7779)))))) (cons if (cons (hd (tl V7779)) (cons (hd (tl (tl V7779))) (cons (shen.cases-macro (cons cases (tl (tl (tl V7779))))) ()))))) ((and (cons? V7779) (and (= cases (hd V7779)) (and (cons? (tl V7779)) (= () (tl (tl V7779)))))) (simple-error "error: odd number of case elements
")) (true V7779)))

(defun shen.timer-macro (V7780) (cond ((and (cons? V7780) (and (= time (hd V7780)) (and (cons? (tl V7780)) (= () (tl (tl V7780)))))) (shen.let-macro (cons let (cons Start (cons (cons get-time (cons run ())) (cons Result (cons (hd (tl V7780)) (cons Finish (cons (cons get-time (cons run ())) (cons Time (cons (cons - (cons Finish (cons Start ()))) (cons Message (cons (cons pr (cons (cons cn (cons "
run time: " (cons (cons cn (cons (cons str (cons Time ())) (cons " secs
" ()))) ()))) (cons (cons stoutput ()) ()))) (cons Result ())))))))))))))) (true V7780)))

(defun shen.tuple-up (V7781) (cond ((cons? V7781) (cons @p (cons (hd V7781) (cons (shen.tuple-up (tl V7781)) ())))) (true V7781)))

(defun shen.put/get-macro (V7782) (cond ((and (cons? V7782) (and (= put (hd V7782)) (and (cons? (tl V7782)) (and (cons? (tl (tl V7782))) (and (cons? (tl (tl (tl V7782)))) (= () (tl (tl (tl (tl V7782)))))))))) (cons put (cons (hd (tl V7782)) (cons (hd (tl (tl V7782))) (cons (hd (tl (tl (tl V7782)))) (cons (cons value (cons *property-vector* ())) ())))))) ((and (cons? V7782) (and (= get (hd V7782)) (and (cons? (tl V7782)) (and (cons? (tl (tl V7782))) (= () (tl (tl (tl V7782)))))))) (cons get (cons (hd (tl V7782)) (cons (hd (tl (tl V7782))) (cons (cons value (cons *property-vector* ())) ()))))) ((and (cons? V7782) (and (= unput (hd V7782)) (and (cons? (tl V7782)) (and (cons? (tl (tl V7782))) (= () (tl (tl (tl V7782)))))))) (cons unput (cons (hd (tl V7782)) (cons (hd (tl (tl V7782))) (cons (cons value (cons *property-vector* ())) ()))))) (true V7782)))

(defun undefmacro (V7783) (do (set *macros* (remove (assoc V7783 (value *macros*)) (value *macros*))) V7783))

