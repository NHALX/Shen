(defun load (V6850) (let TC? (value shen.*tc*) (let Load (let Start (get-time run) (let Result (shen.load-help TC? (read-file V6850)) (let Finish (get-time run) (let Time (- Finish Start) (let Message (pr (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))) (let Infs (if TC? (pr (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded))))

(defun shen.load-help (V6853 V6854) (cond ((= false V6853) (shen.eval-and-print V6854)) (true (shen.check-eval-and-print V6854))))

(defun shen.eval-and-print (V6855) (map (lambda Y (pr (shen.app (eval-kl (shen.shen->kl Y)) "
" shen.s) (stoutput))) V6855))

(defun shen.check-eval-and-print (V6856) (let Table (mapcan (lambda Y (shen.typetable Y)) V6856) (let Assume (trap-error (shen.assumetypes Table) (lambda E (shen.unwind-types E Table))) (trap-error (shen.work-through V6856) (lambda E (shen.unwind-types E Table))))))

(defun shen.typetable (V6861) (cond ((and (cons? V6861) (and (= define (hd V6861)) (and (cons? (tl V6861)) (and (cons? (tl (tl V6861))) (= { (hd (tl (tl V6861)))))))) (cons (hd (tl V6861)) (cons (shen.rectify-type (shen.type-F (hd (tl V6861)) (tl (tl (tl V6861))))) ()))) ((and (cons? V6861) (and (= define (hd V6861)) (cons? (tl V6861)))) (simple-error (cn "missing { in " (shen.app (hd (tl V6861)) "
" shen.a)))) (true ())))

(defun shen.type-F (V6868 V6869) (cond ((and (cons? V6869) (= } (hd V6869))) ()) ((cons? V6869) (cons (hd V6869) (shen.type-F V6868 (tl V6869)))) (true (simple-error (cn "missing } in " (shen.app V6868 "
" shen.a))))))

(defun shen.assumetypes (V6872) (cond ((= () V6872) ()) ((and (cons? V6872) (cons? (tl V6872))) (do (declare (hd V6872) (hd (tl V6872))) (shen.assumetypes (tl (tl V6872))))) (true (simple-error "implementation error in shen.assumetype"))))

(defun shen.unwind-types (V6877 V6878) (cond ((and (cons? V6878) (cons? (hd V6878))) (do (destroy (hd (hd V6878))) (shen.unwind-types V6877 (tl V6878)))) (true (simple-error (error-to-string V6877)))))

(defun shen.work-through (V6881) (cond ((= () V6881) ()) ((and (cons? V6881) (and (cons? (tl V6881)) (and (cons? (tl (tl V6881))) (= (hd (tl V6881)) (intern ":"))))) (let Check (shen.typecheck (hd V6881) (hd (tl (tl V6881)))) (if (= Check false) (shen.type-error) (let Eval (eval-kl (shen.shen->kl (hd V6881))) (let Message (pr (shen.app Eval (cn " : " (shen.app (shen.pretty-type Check) "
" shen.r)) shen.s) (stoutput)) (shen.work-through (tl (tl (tl V6881))))))))) ((cons? V6881) (shen.work-through (cons (hd V6881) (cons (intern ":") (cons A (tl V6881)))))) (true (simple-error "implementation error in shen.work-through"))))

(defun shen.pretty-type (V6883) (cond ((and (cons? V6883) (and (cons? (hd V6883)) (and (= str (hd (hd V6883))) (and (cons? (tl (hd V6883))) (and (cons? (hd (tl (hd V6883)))) (and (= list (hd (hd (tl (hd V6883))))) (and (cons? (tl (hd (tl (hd V6883))))) (and (= () (tl (tl (hd (tl (hd V6883)))))) (and (cons? (tl (tl (hd V6883)))) (and (= () (tl (tl (tl (hd V6883))))) (and (cons? (tl V6883)) (and (= --> (hd (tl V6883))) (and (cons? (tl (tl V6883))) (and (cons? (hd (tl (tl V6883)))) (and (= str (hd (hd (tl (tl V6883))))) (and (cons? (tl (hd (tl (tl V6883))))) (and (cons? (hd (tl (hd (tl (tl V6883)))))) (and (= list (hd (hd (tl (hd (tl (tl V6883))))))) (and (cons? (tl (hd (tl (hd (tl (tl V6883))))))) (and (= () (tl (tl (hd (tl (hd (tl (tl V6883)))))))) (and (cons? (tl (tl (hd (tl (tl V6883)))))) (and (= () (tl (tl (tl (hd (tl (tl V6883))))))) (and (= () (tl (tl (tl V6883)))) (= (hd (tl (hd (tl (hd V6883))))) (hd (tl (hd (tl (hd (tl (tl V6883))))))))))))))))))))))))))))))) (cons (hd (tl (hd (tl (tl V6883))))) (cons ==> (tl (tl (hd (tl (tl V6883)))))))) (true V6883)))

(defun shen.type-error () (simple-error "type error
"))

(defun bootstrap (V6884) (let KLFile (shen.klfile V6884) (let Code (read-file V6884) (let Open (open KLFile out) (let KL (map (lambda X (shen.shen->kl-h X)) Code) (let Write (shen.write-kl KL Open) KLFile))))))

(defun shen.write-kl (V6887 V6888) (cond ((= () V6887) (close V6888)) ((and (cons? V6887) (cons? (hd V6887))) (shen.write-kl (tl V6887) (do (shen.write-kl-h (hd V6887) V6888) V6888))) ((cons? V6887) (shen.write-kl (tl V6887) V6888)) (true (shen.f-error shen.write-kl))))

(defun shen.write-kl-h (V6891 V6892) (cond ((and (cons? V6891) (and (= defun (hd V6891)) (and (cons? (tl V6891)) (and (= fail (hd (tl V6891))) (and (cons? (tl (tl V6891))) (and (= () (hd (tl (tl V6891)))) (and (cons? (tl (tl (tl V6891)))) (= () (tl (tl (tl (tl V6891)))))))))))) (pr "(defun fail () shen.fail!)" V6892)) (true (pr (shen.app V6891 "

" shen.r) V6892))))

(defun shen.klfile (V6893) (cond ((= "" V6893) ".kl") ((= ".shen" V6893) ".kl") ((shen.+string? V6893) (@s (hdstr V6893) (shen.klfile (tlstr V6893)))) (true (shen.f-error shen.klfile))))

