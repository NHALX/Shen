(defun load (V7584) (let W7585 (value shen.*tc*) (let W7586 (let W7587 (get-time run) (let W7588 (shen.load-help W7585 (read-file V7584)) (let W7589 (get-time run) (let W7590 (- W7589 W7587) (let W7591 (pr (cn "
run time: " (cn (str W7590) " secs
")) (stoutput)) W7588))))) (let W7592 (if W7585 (pr (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded))))

(defun shen.load-help (V7595 V7596) (cond ((= false V7595) (shen.eval-and-print V7596)) (true (shen.check-eval-and-print V7596))))

(defun shen.eval-and-print (V7597) (map (lambda Z7598 (pr (shen.app (eval-kl (shen.shen->kl Z7598)) "
" shen.s) (stoutput))) V7597))

(defun shen.check-eval-and-print (V7599) (let W7600 (mapcan (lambda Z7601 (shen.typetable Z7601)) V7599) (let W7602 (trap-error (shen.assumetypes W7600) (lambda Z7603 (shen.unwind-types Z7603 W7600))) (trap-error (shen.work-through V7599) (lambda Z7604 (shen.unwind-types Z7604 W7600))))))

(defun shen.typetable (V7609) (cond ((and (cons? V7609) (and (= define (hd V7609)) (and (cons? (tl V7609)) (and (cons? (tl (tl V7609))) (= { (hd (tl (tl V7609)))))))) (cons (hd (tl V7609)) (cons (shen.rectify-type (shen.type-F (hd (tl V7609)) (tl (tl (tl V7609))))) ()))) ((and (cons? V7609) (and (= define (hd V7609)) (cons? (tl V7609)))) (simple-error (cn "missing { in " (shen.app (hd (tl V7609)) "
" shen.a)))) (true ())))

(defun shen.type-F (V7616 V7617) (cond ((and (cons? V7617) (= } (hd V7617))) ()) ((cons? V7617) (cons (hd V7617) (shen.type-F V7616 (tl V7617)))) (true (simple-error (cn "missing } in " (shen.app V7616 "
" shen.a))))))

(defun shen.assumetypes (V7620) (cond ((= () V7620) ()) ((and (cons? V7620) (cons? (tl V7620))) (do (declare (hd V7620) (hd (tl V7620))) (shen.assumetypes (tl (tl V7620))))) (true (simple-error "implementation error in shen.assumetype"))))

(defun shen.unwind-types (V7625 V7626) (cond ((and (cons? V7626) (cons? (hd V7626))) (do (destroy (hd (hd V7626))) (shen.unwind-types V7625 (tl V7626)))) (true (simple-error (error-to-string V7625)))))

(defun shen.work-through (V7629) (cond ((= () V7629) ()) ((and (cons? V7629) (and (cons? (tl V7629)) (and (cons? (tl (tl V7629))) (= (hd (tl V7629)) (intern ":"))))) (let W7630 (shen.typecheck (hd V7629) (hd (tl (tl V7629)))) (if (= W7630 false) (shen.type-error) (let W7631 (eval-kl (shen.shen->kl (hd V7629))) (let W7632 (pr (shen.app W7631 (cn " : " (shen.app (shen.pretty-type W7630) "
" shen.r)) shen.s) (stoutput)) (shen.work-through (tl (tl (tl V7629))))))))) ((cons? V7629) (shen.work-through (cons (hd V7629) (cons (intern ":") (cons A (tl V7629)))))) (true (simple-error "implementation error in shen.work-through"))))

(defun shen.pretty-type (V7634) (cond ((and (cons? V7634) (and (cons? (hd V7634)) (and (= str (hd (hd V7634))) (and (cons? (tl (hd V7634))) (and (cons? (hd (tl (hd V7634)))) (and (= list (hd (hd (tl (hd V7634))))) (and (cons? (tl (hd (tl (hd V7634))))) (and (= () (tl (tl (hd (tl (hd V7634)))))) (and (cons? (tl (tl (hd V7634)))) (and (= () (tl (tl (tl (hd V7634))))) (and (cons? (tl V7634)) (and (= --> (hd (tl V7634))) (and (cons? (tl (tl V7634))) (and (cons? (hd (tl (tl V7634)))) (and (= str (hd (hd (tl (tl V7634))))) (and (cons? (tl (hd (tl (tl V7634))))) (and (cons? (hd (tl (hd (tl (tl V7634)))))) (and (= list (hd (hd (tl (hd (tl (tl V7634))))))) (and (cons? (tl (hd (tl (hd (tl (tl V7634))))))) (and (= () (tl (tl (hd (tl (hd (tl (tl V7634)))))))) (and (cons? (tl (tl (hd (tl (tl V7634)))))) (and (= () (tl (tl (tl (hd (tl (tl V7634))))))) (and (= () (tl (tl (tl V7634)))) (= (hd (tl (hd (tl (hd V7634))))) (hd (tl (hd (tl (hd (tl (tl V7634))))))))))))))))))))))))))))))) (cons (hd (tl (hd (tl (tl V7634))))) (cons ==> (tl (tl (hd (tl (tl V7634)))))))) (true V7634)))

(defun shen.type-error () (simple-error "type error
"))

(defun bootstrap (V7635) (let W7636 (shen.klfile V7635) (let W7637 (read-file V7635) (let W7638 (open W7636 out) (let W7639 (map (lambda Z7640 (shen.shen->kl-h Z7640)) W7637) (let W7641 (shen.write-kl W7639 W7638) W7636))))))

(defun shen.write-kl (V7644 V7645) (cond ((= () V7644) (close V7645)) ((and (cons? V7644) (cons? (hd V7644))) (shen.write-kl (tl V7644) (do (shen.write-kl-h (hd V7644) V7645) V7645))) ((cons? V7644) (shen.write-kl (tl V7644) V7645)) (true (shen.f-error shen.write-kl))))

(defun shen.write-kl-h (V7648 V7649) (cond ((and (cons? V7648) (and (= defun (hd V7648)) (and (cons? (tl V7648)) (and (= fail (hd (tl V7648))) (and (cons? (tl (tl V7648))) (and (= () (hd (tl (tl V7648)))) (and (cons? (tl (tl (tl V7648)))) (= () (tl (tl (tl (tl V7648)))))))))))) (pr "(defun fail () shen.fail!)" V7649)) (true (pr (shen.app V7648 "

" shen.r) V7649))))

(defun shen.klfile (V7650) (cond ((= "" V7650) ".kl") ((= ".shen" V7650) ".kl") ((shen.+string? V7650) (@s (hdstr V7650) (shen.klfile (tlstr V7650)))) (true (shen.f-error shen.klfile))))

