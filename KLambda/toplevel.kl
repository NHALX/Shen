(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (do (pr (error-to-string E) (stoutput)) (nl 0)))) (shen.loop)))))

(defun shen.credits () (do (pr "
Shen, www.shenlanguage.org, copyright (C) 2010-2022, Mark Tarver
" (stoutput)) (do (pr (cn "version: S" (shen.app (value *version*) (cn ", language: " (shen.app (value *language*) (cn ", platform: " (shen.app (value *implementation*) (cn " " (shen.app (value *release*) "
" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (pr (cn "port " (shen.app (value *port*) (cn ", ported by " (shen.app (value *porters*) "

" shen.a)) shen.a)) (stoutput)))))

(defun shen.initialise_environment () (do (set shen.*call* 0) (set shen.*infs* 0)))

(defun shen.prompt () (if (value shen.*tc*) (pr (cn "
(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (pr (cn "
(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.read-evaluate-print () (let Package (value shen.*package*) (let Lineread (shen.package-user-input Package (lineread (stinput))) (let History (shen.update-history) (shen.evaluate-lineread Lineread History (value shen.*tc*))))))

(defun shen.package-user-input (V9778 V9779) (cond ((= null V9778) V9779) (true (let Str (str V9778) (let External (external V9778) (map (lambda X (shen.pui-h Str External X)) V9779))))))

(defun shen.pui-h (V9784 V9785 V9786) (cond ((and (cons? V9786) (and (= fn (hd V9786)) (and (cons? (tl V9786)) (= () (tl (tl V9786)))))) (if (shen.internal? (hd (tl V9786)) V9784 V9785) (cons fn (cons (shen.intern-in-package V9784 (hd (tl V9786))) ())) V9786)) ((cons? V9786) (if (shen.internal? (hd V9786) V9784 V9785) (cons (shen.intern-in-package V9784 (hd V9786)) (map (lambda Y (shen.pui-h V9784 V9785 Y)) (tl V9786))) (if (cons? (hd V9786)) (map (lambda Y (shen.pui-h V9784 V9785 Y)) V9786) (cons (hd V9786) (map (lambda Y (shen.pui-h V9784 V9785 Y)) (tl V9786)))))) (true V9786)))

(defun shen.update-history () (set shen.*history* (cons (shen.trim-it (it)) (value shen.*history*))))

(defun shen.trim-it (V9787) (cond ((and (shen.+string? V9787) (shen.whitespace? (string->n (hdstr V9787)))) (shen.trim-it (tlstr V9787))) (true V9787)))

(defun shen.evaluate-lineread (V9806 V9807 V9808) (cond ((and (cons? V9806) (and (= () (tl V9806)) (and (cons? V9807) (and (= "!!" (hd V9807)) (cons? (tl V9807)))))) (let Y (read-from-string (hd (tl V9807))) (let NewHistory (set shen.*history* (cons (hd (tl V9807)) (tl V9807))) (let Print (pr (shen.app (hd (tl V9807)) "
" shen.a) (stoutput)) (shen.evaluate-lineread Y NewHistory V9808))))) ((and (cons? V9806) (and (= () (tl V9806)) (and (cons? V9807) (and (shen.+string? (hd V9807)) (= "%" (hdstr (hd V9807))))))) (let Read (hd (read-from-string (tlstr (hd V9807)))) (let Peek (shen.peek-history Read (tlstr (hd V9807)) (tl V9807)) (let NewHistory (set shen.*history* (tl V9807)) (abort))))) ((and (cons? V9806) (and (= () (tl V9806)) (and (cons? V9807) (and (shen.+string? (hd V9807)) (= "!" (hdstr (hd V9807))))))) (let Read (hd (read-from-string (tlstr (hd V9807)))) (let Match (shen.use-history Read (tlstr (hd V9807)) (tl V9807)) (let Print (pr (shen.app Match "
" shen.a) (stoutput)) (let Y (read-from-string Match) (let NewHistory (set shen.*history* (cons Match (tl V9807))) (shen.evaluate-lineread Y NewHistory V9808))))))) ((and (cons? V9806) (and (= () (tl V9806)) (and (cons? V9807) (and (shen.+string? (hd V9807)) (= "%" (hdstr (hd V9807))))))) (let Read (hd (read-from-string (tlstr (hd V9807)))) (let Peek (shen.peek-history Read (tlstr (hd V9807)) (tl V9807)) (let NewHistory (set shen.*history* (tl V9807)) (abort))))) ((= true V9808) (shen.check-eval-and-print V9806)) ((= false V9808) (shen.eval-and-print V9806)) (true (simple-error "implementation error in shen.evaluate-lineread"))))

(defun shen.use-history (V9809 V9810 V9811) (if (integer? V9809) (nth (+ 1 V9809) (reverse V9811)) (if (symbol? V9809) (shen.string-match V9810 V9811) (simple-error "! expects a number or a symbol
"))))

(defun shen.peek-history (V9812 V9813 V9814) (if (integer? V9812) (pr (cn "
" (shen.app (nth (+ 1 V9812) (reverse V9814)) "" shen.a)) (stoutput)) (if (or (= V9813 "") (symbol? V9812)) (shen.recursive-string-match 0 V9813 (reverse V9814)) (simple-error "% expects a number or a symbol
"))))

(defun shen.string-match (V9824 V9825) (cond ((= () V9825) (simple-error "
input not found")) ((and (cons? V9825) (shen.string-prefix? V9824 (hd V9825))) (hd V9825)) ((cons? V9825) (shen.string-match V9824 (tl V9825))) (true (simple-error "implementation error in shen.string-match"))))

(defun shen.string-prefix? (V9833 V9834) (cond ((= "" V9833) true) ((and (shen.+string? V9833) (shen.whitespace? (string->n (hdstr V9833)))) (shen.string-prefix? (tlstr V9833) V9834)) ((and (shen.+string? V9834) (shen.whitespace? (string->n (hdstr V9834)))) (shen.string-prefix? V9833 (tlstr V9834))) ((and (shen.+string? V9834) (= "(" (hdstr V9834))) (shen.string-prefix? V9833 (tlstr V9834))) ((and (shen.+string? V9833) (and (shen.+string? V9834) (= (hdstr V9833) (hdstr V9834)))) (shen.string-prefix? (tlstr V9833) (tlstr V9834))) (true false)))

(defun shen.recursive-string-match (V9845 V9846 V9847) (cond ((= () V9847) shen.skip) ((cons? V9847) (do (if (shen.string-prefix? V9846 (hd V9847)) (pr (shen.app V9845 (cn ". " (shen.app (hd V9847) "
" shen.a)) shen.a) (stoutput)) shen.skip) (shen.recursive-string-match (+ V9845 1) V9846 (tl V9847)))) (true (simple-error "implementation error in shen.recursive-string-match"))))

