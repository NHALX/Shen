(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda Z11851 (do (pr (error-to-string Z11851) (stoutput)) (nl 0)))) (shen.loop)))))

(defun shen.credits () (do (pr "
Shen, www.shenlanguage.org, copyright (C) 2010-2022, Mark Tarver
" (stoutput)) (do (pr (cn "version: S" (shen.app (value *version*) (cn ", language: " (shen.app (value *language*) (cn ", platform: " (shen.app (value *implementation*) (cn " " (shen.app (value *release*) "
" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (pr (cn "port " (shen.app (value *port*) (cn ", ported by " (shen.app (value *porters*) "

" shen.a)) shen.a)) (stoutput)))))

(defun shen.initialise_environment () (do (set shen.*call* 0) (set shen.*infs* 0)))

(defun shen.prompt () (if (value shen.*tc*) (pr (cn "
(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (pr (cn "
(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.read-evaluate-print () (let W11852 (value shen.*package*) (let W11853 (shen.package-user-input W11852 (lineread (stinput))) (let W11854 (shen.update-history) (shen.evaluate-lineread W11853 W11854 (value shen.*tc*))))))

(defun shen.package-user-input (V11855 V11856) (cond ((= null V11855) V11856) (true (let W11857 (str V11855) (let W11858 (external V11855) (map (lambda Z11859 (shen.pui-h W11857 W11858 Z11859)) V11856))))))

(defun shen.pui-h (V11864 V11865 V11866) (cond ((and (cons? V11866) (and (= fn (hd V11866)) (and (cons? (tl V11866)) (= () (tl (tl V11866)))))) (if (shen.internal? (hd (tl V11866)) V11864 V11865) (cons fn (cons (shen.intern-in-package V11864 (hd (tl V11866))) ())) V11866)) ((cons? V11866) (if (shen.internal? (hd V11866) V11864 V11865) (cons (shen.intern-in-package V11864 (hd V11866)) (map (lambda Z11867 (shen.pui-h V11864 V11865 Z11867)) (tl V11866))) (if (cons? (hd V11866)) (map (lambda Z11868 (shen.pui-h V11864 V11865 Z11868)) V11866) (cons (hd V11866) (map (lambda Z11869 (shen.pui-h V11864 V11865 Z11869)) (tl V11866)))))) (true V11866)))

(defun shen.update-history () (set shen.*history* (cons (shen.trim-it (it)) (value shen.*history*))))

(defun shen.trim-it (V11870) (cond ((and (shen.+string? V11870) (shen.whitespace? (string->n (hdstr V11870)))) (shen.trim-it (tlstr V11870))) (true V11870)))

(defun shen.evaluate-lineread (V11889 V11890 V11891) (cond ((and (cons? V11889) (and (= () (tl V11889)) (and (cons? V11890) (and (= "!!" (hd V11890)) (cons? (tl V11890)))))) (let W11892 (read-from-string (hd (tl V11890))) (let W11893 (set shen.*history* (cons (hd (tl V11890)) (tl V11890))) (let W11894 (pr (shen.app (hd (tl V11890)) "
" shen.a) (stoutput)) (shen.evaluate-lineread W11892 W11893 V11891))))) ((and (cons? V11889) (and (= () (tl V11889)) (and (cons? V11890) (and (shen.+string? (hd V11890)) (= "%" (hdstr (hd V11890))))))) (let W11895 (hd (read-from-string (tlstr (hd V11890)))) (let W11896 (shen.peek-history W11895 (tlstr (hd V11890)) (tl V11890)) (let W11897 (set shen.*history* (tl V11890)) (abort))))) ((and (cons? V11889) (and (= () (tl V11889)) (and (cons? V11890) (and (shen.+string? (hd V11890)) (= "!" (hdstr (hd V11890))))))) (let W11898 (hd (read-from-string (tlstr (hd V11890)))) (let W11899 (shen.use-history W11898 (tlstr (hd V11890)) (tl V11890)) (let W11900 (pr (shen.app W11899 "
" shen.a) (stoutput)) (let W11901 (read-from-string W11899) (let W11902 (set shen.*history* (cons W11899 (tl V11890))) (shen.evaluate-lineread W11901 W11902 V11891))))))) ((and (cons? V11889) (and (= () (tl V11889)) (and (cons? V11890) (and (shen.+string? (hd V11890)) (= "%" (hdstr (hd V11890))))))) (let W11903 (hd (read-from-string (tlstr (hd V11890)))) (let W11904 (shen.peek-history W11903 (tlstr (hd V11890)) (tl V11890)) (let W11905 (set shen.*history* (tl V11890)) (abort))))) ((= true V11891) (shen.check-eval-and-print V11889)) ((= false V11891) (shen.eval-and-print V11889)) (true (simple-error "implementation error in shen.evaluate-lineread"))))

(defun shen.use-history (V11906 V11907 V11908) (if (integer? V11906) (nth (+ 1 V11906) (reverse V11908)) (if (symbol? V11906) (shen.string-match V11907 V11908) (simple-error "! expects a number or a symbol
"))))

(defun shen.peek-history (V11909 V11910 V11911) (if (integer? V11909) (pr (cn "
" (shen.app (nth (+ 1 V11909) (reverse V11911)) "" shen.a)) (stoutput)) (if (or (= V11910 "") (symbol? V11909)) (shen.recursive-string-match 0 V11910 (reverse V11911)) (simple-error "% expects a number or a symbol
"))))

(defun shen.string-match (V11921 V11922) (cond ((= () V11922) (simple-error "
input not found")) ((and (cons? V11922) (shen.string-prefix? V11921 (hd V11922))) (hd V11922)) ((cons? V11922) (shen.string-match V11921 (tl V11922))) (true (simple-error "implementation error in shen.string-match"))))

(defun shen.string-prefix? (V11930 V11931) (cond ((= "" V11930) true) ((and (shen.+string? V11930) (shen.whitespace? (string->n (hdstr V11930)))) (shen.string-prefix? (tlstr V11930) V11931)) ((and (shen.+string? V11931) (shen.whitespace? (string->n (hdstr V11931)))) (shen.string-prefix? V11930 (tlstr V11931))) ((and (shen.+string? V11931) (= "(" (hdstr V11931))) (shen.string-prefix? V11930 (tlstr V11931))) ((and (shen.+string? V11930) (and (shen.+string? V11931) (= (hdstr V11930) (hdstr V11931)))) (shen.string-prefix? (tlstr V11930) (tlstr V11931))) (true false)))

(defun shen.recursive-string-match (V11942 V11943 V11944) (cond ((= () V11944) shen.skip) ((cons? V11944) (do (if (shen.string-prefix? V11943 (hd V11944)) (pr (shen.app V11942 (cn ". " (shen.app (hd V11944) "
" shen.a)) shen.a) (stoutput)) shen.skip) (shen.recursive-string-match (+ V11942 1) V11943 (tl V11944)))) (true (simple-error "implementation error in shen.recursive-string-match"))))

