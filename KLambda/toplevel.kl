(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (do (pr (error-to-string E) (stoutput)) (nl 0)))) (shen.loop)))))

(defun shen.credits () (do (pr "
Shen, www.shenlanguage.org, copyright (C) 2010-2021, Mark Tarver
" (stoutput)) (do (pr (cn "version: S" (shen.app (value *version*) (cn ", language: " (shen.app (value *language*) (cn ", platform: " (shen.app (value *implementation*) (cn " " (shen.app (value *release*) "
" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (pr (cn "port " (shen.app (value *port*) (cn ", ported by " (shen.app (value *porters*) "

" shen.a)) shen.a)) (stoutput)))))

(defun shen.initialise_environment () (do (set shen.*call* 0) (set shen.*infs* 0)))

(defun shen.prompt () (if (value shen.*tc*) (pr (cn "
(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (pr (cn "
(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.read-evaluate-print () (let Package (value shen.*package*) (let Lineread (shen.package-user-input Package (lineread (stinput))) (let History (shen.update-history) (shen.evaluate-lineread Lineread History (value shen.*tc*))))))

(defun shen.package-user-input (V9572 V9573) (cond ((= null V9572) V9573) (true (let Str (str V9572) (let External (external V9572) (map (lambda X (shen.pui-h Str External X)) V9573))))))

(defun shen.pui-h (V9578 V9579 V9580) (cond ((and (cons? V9580) (and (= fn (hd V9580)) (and (cons? (tl V9580)) (= () (tl (tl V9580)))))) (if (shen.internal? (hd (tl V9580)) V9578 V9579) (cons fn (cons (shen.intern-in-package V9578 (hd (tl V9580))) ())) V9580)) ((cons? V9580) (if (shen.internal? (hd V9580) V9578 V9579) (cons (shen.intern-in-package V9578 (hd V9580)) (map (lambda Y (shen.pui-h V9578 V9579 Y)) (tl V9580))) (if (cons? (hd V9580)) (map (lambda Y (shen.pui-h V9578 V9579 Y)) V9580) (cons (hd V9580) (map (lambda Y (shen.pui-h V9578 V9579 Y)) (tl V9580)))))) (true V9580)))

(defun shen.update-history () (set shen.*history* (cons (it) (value shen.*history*))))

(defun shen.evaluate-lineread (V9591 V9592 V9593) (cond ((and (cons? V9591) (and (= () (tl V9591)) (and (cons? V9592) (and (= "!!" (hd V9592)) (cons? (tl V9592)))))) (let Y (read-from-string (hd (tl V9592))) (let NewHistory (set shen.*history* (cons (hd (tl V9592)) (tl V9592))) (let Print (pr (shen.app (hd (tl V9592)) "
" shen.a) (stoutput)) (shen.evaluate-lineread Y NewHistory V9593))))) ((and (cons? V9591) (and (= () (tl V9591)) (and (cons? V9592) (and (shen.+string? (hd V9592)) (= "%" (hdstr (hd V9592))))))) (let Read (hd (read-from-string (tlstr (hd V9592)))) (let Peek (shen.peek-history Read (tlstr (hd V9592)) (tl V9592)) (let NewHistory (set shen.*history* (tl V9592)) (abort))))) ((and (cons? V9591) (and (= () (tl V9591)) (and (cons? V9592) (and (shen.+string? (hd V9592)) (= "!" (hdstr (hd V9592))))))) (let Read (hd (read-from-string (tlstr (hd V9592)))) (let Match (shen.use-history Read (tlstr (hd V9592)) (tl V9592)) (let Print (pr (shen.app Match "
" shen.a) (stoutput)) (let Y (read-from-string Match) (let NewHistory (set shen.*history* (cons Match (tl V9592))) (shen.evaluate-lineread Y NewHistory V9593))))))) ((and (cons? V9591) (and (= () (tl V9591)) (and (cons? V9592) (and (shen.+string? (hd V9592)) (= "%" (hdstr (hd V9592))))))) (let Read (hd (read-from-string (tlstr (hd V9592)))) (let Peek (shen.peek-history Read (tlstr (hd V9592)) (tl V9592)) (let NewHistory (set shen.*history* (tl V9592)) (abort))))) ((= true V9593) (shen.check-eval-and-print V9591)) ((= false V9593) (shen.eval-and-print V9591)) (true (simple-error "implementation error in shen.evaluate-lineread"))))

(defun shen.use-history (V9594 V9595 V9596) (if (integer? V9594) (nth (+ 1 V9594) (reverse V9596)) (if (symbol? V9594) (shen.string-match V9595 V9596) (simple-error "! expects a number or a symbol
"))))

(defun shen.peek-history (V9597 V9598 V9599) (if (integer? V9597) (pr (cn "
" (shen.app (nth (+ 1 V9597) (reverse V9599)) "" shen.a)) (stoutput)) (if (or (= V9598 "") (symbol? V9597)) (shen.recursive-string-match 0 V9598 (reverse V9599)) (simple-error "% expects a number or a symbol
"))))

(defun shen.string-match (V9609 V9610) (cond ((= () V9610) (simple-error "
input not found")) ((and (cons? V9610) (shen.string-prefix? V9609 (hd V9610))) (hd V9610)) ((cons? V9610) (shen.string-match V9609 (tl V9610))) (true (simple-error "implementation error in shen.string-match"))))

(defun shen.string-prefix? (V9618 V9619) (cond ((= "" V9618) true) ((and (shen.+string? V9618) (shen.whitespace? (string->n (hdstr V9618)))) (shen.string-prefix? (tlstr V9618) V9619)) ((and (shen.+string? V9619) (shen.whitespace? (string->n (hdstr V9619)))) (shen.string-prefix? V9618 (tlstr V9619))) ((and (shen.+string? V9619) (= "(" (hdstr V9619))) (shen.string-prefix? V9618 (tlstr V9619))) ((and (shen.+string? V9618) (and (shen.+string? V9619) (= (hdstr V9618) (hdstr V9619)))) (shen.string-prefix? (tlstr V9618) (tlstr V9619))) (true false)))

(defun shen.recursive-string-match (V9630 V9631 V9632) (cond ((= () V9632) shen.skip) ((cons? V9632) (do (if (shen.string-prefix? V9631 (hd V9632)) (pr (shen.app V9630 (cn ". " (shen.app (hd V9632) "
" shen.a)) shen.a) (stoutput)) shen.skip) (shen.recursive-string-match (+ V9630 1) V9631 (tl V9632)))) (true (simple-error "implementation error in shen.recursive-string-match"))))

