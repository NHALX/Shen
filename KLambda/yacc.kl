(defun compile (V6772 V6773) (let W6774 (V6772 (cons V6773 (cons shen.no-action ()))) (if (shen.parsed? W6774) (shen.objectcode W6774) (simple-error "parse failure
"))))

(defun shen.parsed? (V6779) (cond ((shen.parse-failure? V6779) false) ((and (cons? V6779) (cons? (hd V6779))) (do (set shen.*residue* (hd V6779)) (simple-error (cn "syntax error here: " (shen.app (hd V6779) "
 ..." shen.r))))) (true true)))

(defun shen.parse-failure? (V6780) (= V6780 (fail)))

(defun shen.objectcode (V6783) (cond ((and (cons? V6783) (and (cons? (tl V6783)) (= () (tl (tl V6783))))) (hd (tl V6783))) (true (simple-error (shen.app V6783 " is not a YACC stream
" shen.s)))))

(defun shen.yacc->shen (V6784) (compile (lambda Z6785 (shen.<yacc> Z6785)) V6784))

(defun shen.<yacc> (V6786) (let W6787 (if (shen.non-empty-stream? V6786) (let W6788 (shen.hds V6786) (let W6789 (shen.tls V6786) (let W6790 (shen.<yaccsig> W6789) (if (shen.parse-failure? W6790) (shen.parse-failure) (let W6791 (shen.<c-rules> W6790) (if (shen.parse-failure? W6791) (shen.parse-failure) (shen.comb (shen.in-> W6791) (let W6792 (gensym S) (let W6793 (append (cons define (cons W6788 ())) (append (shen.<-out W6790) (cons W6792 (cons -> (cons (shen.c-rules->shen (shen.<-out W6790) W6792 (shen.<-out W6791)) ()))))) W6793))))))))) (shen.parse-failure)) (if (shen.parse-failure? W6787) (shen.parse-failure) W6787)))

(defun shen.<yaccsig> (V6794) (let W6795 (if (shen.non-empty-stream? V6794) (let W6796 (shen.hds V6794) (let W6797 (shen.tls V6794) (if (shen.ccons? W6797) (let W6798 (shen.comb (shen.hds W6797) (shen.<-out W6797)) (if (shen.=hd? W6798 list) (let W6799 (shen.tls W6798) (if (shen.non-empty-stream? W6799) (let W6800 (shen.hds W6799) (let W6801 (shen.tls W6799) (let W6802 (shen.<end> W6801) (if (shen.parse-failure? W6802) (shen.parse-failure) (if (shen.=hd? (shen.tlstream W6797) ==>) (let W6803 (shen.tls (shen.tlstream W6797)) (if (shen.non-empty-stream? W6803) (let W6804 (shen.hds W6803) (let W6805 (shen.tls W6803) (if (shen.non-empty-stream? W6805) (let W6806 (shen.hds W6805) (let W6807 (shen.tls W6805) (if (and (= { W6796) (= } W6806)) (shen.comb (shen.in-> W6807) (let W6808 (gensym C) (cons { (cons (cons str (cons (cons list (cons W6800 ())) (cons W6808 ()))) (cons --> (cons (cons str (cons (cons list (cons W6800 ())) (cons W6804 ()))) (cons } ()))))))) (shen.parse-failure)))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (shen.parse-failure))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W6795) (let W6809 (let W6810 (<e> V6794) (if (shen.parse-failure? W6810) (shen.parse-failure) (shen.comb (shen.in-> W6810) ()))) (if (shen.parse-failure? W6809) (shen.parse-failure) W6809)) W6795)))

(defun shen.<c-rules> (V6811) (let W6812 (let W6813 (shen.<c-rule> V6811) (if (shen.parse-failure? W6813) (shen.parse-failure) (let W6814 (shen.<c-rules> W6813) (if (shen.parse-failure? W6814) (shen.parse-failure) (shen.comb (shen.in-> W6814) (cons (shen.<-out W6813) (shen.<-out W6814))))))) (if (shen.parse-failure? W6812) (let W6815 (let W6816 (<!> V6811) (if (shen.parse-failure? W6816) (shen.parse-failure) (shen.comb (shen.in-> W6816) (if (empty? (shen.<-out W6816)) () (simple-error (cn "YACC syntax error here:
 " (shen.app (shen.<-out W6816) "
 ..." shen.r))))))) (if (shen.parse-failure? W6815) (shen.parse-failure) W6815)) W6812)))

(defun shen.<c-rule> (V6817) (let W6818 (let W6819 (shen.<syntax> V6817) (if (shen.parse-failure? W6819) (shen.parse-failure) (let W6820 (shen.<semantics> W6819) (if (shen.parse-failure? W6820) (shen.parse-failure) (let W6821 (shen.<sc> W6820) (if (shen.parse-failure? W6821) (shen.parse-failure) (shen.comb (shen.in-> W6821) (cons (shen.<-out W6819) (cons (shen.<-out W6820) ()))))))))) (if (shen.parse-failure? W6818) (let W6822 (let W6823 (shen.<syntax> V6817) (if (shen.parse-failure? W6823) (shen.parse-failure) (let W6824 (shen.<sc> W6823) (if (shen.parse-failure? W6824) (shen.parse-failure) (shen.comb (shen.in-> W6824) (cons (shen.<-out W6823) (cons (shen.autocomplete (shen.<-out W6823)) ()))))))) (if (shen.parse-failure? W6822) (shen.parse-failure) W6822)) W6818)))

(defun shen.autocomplete (V6825) (cond ((and (cons? V6825) (and (= () (tl V6825)) (shen.non-terminal? (hd V6825)))) (hd V6825)) ((and (cons? V6825) (shen.non-terminal? (hd V6825))) (cons append (cons (hd V6825) (cons (shen.autocomplete (tl V6825)) ())))) ((cons? V6825) (cons cons (cons (shen.autocomplete (hd V6825)) (cons (shen.autocomplete (tl V6825)) ())))) (true V6825)))

(defun shen.non-terminal? (V6826) (and (symbol? V6826) (let W6827 (explode V6826) (compile (lambda Z6828 (shen.<non-terminal?> Z6828)) W6827))))

(defun shen.<non-terminal?> (V6829) (let W6830 (let W6831 (shen.<packagenames> V6829) (if (shen.parse-failure? W6831) (shen.parse-failure) (let W6832 (shen.<non-terminal-name> W6831) (if (shen.parse-failure? W6832) (shen.parse-failure) (shen.comb (shen.in-> W6832) true))))) (if (shen.parse-failure? W6830) (let W6833 (let W6834 (shen.<non-terminal-name> V6829) (if (shen.parse-failure? W6834) (shen.parse-failure) (shen.comb (shen.in-> W6834) true))) (if (shen.parse-failure? W6833) (let W6835 (let W6836 (<!> V6829) (if (shen.parse-failure? W6836) (shen.parse-failure) (shen.comb (shen.in-> W6836) false))) (if (shen.parse-failure? W6835) (shen.parse-failure) W6835)) W6833)) W6830)))

(defun shen.<packagenames> (V6837) (let W6838 (let W6839 (shen.<packagename> V6837) (if (shen.parse-failure? W6839) (shen.parse-failure) (if (shen.=hd? W6839 ".") (let W6840 (shen.tls W6839) (let W6841 (shen.<packagenames> W6840) (if (shen.parse-failure? W6841) (shen.parse-failure) (shen.comb (shen.in-> W6841) shen.skip)))) (shen.parse-failure)))) (if (shen.parse-failure? W6838) (let W6842 (let W6843 (shen.<packagename> V6837) (if (shen.parse-failure? W6843) (shen.parse-failure) (if (shen.=hd? W6843 ".") (let W6844 (shen.tls W6843) (shen.comb (shen.in-> W6844) shen.skip)) (shen.parse-failure)))) (if (shen.parse-failure? W6842) (shen.parse-failure) W6842)) W6838)))

(defun shen.<packagename> (V6845) (let W6846 (let W6847 (shen.<packagechar> V6845) (if (shen.parse-failure? W6847) (shen.parse-failure) (let W6848 (shen.<packagename> W6847) (if (shen.parse-failure? W6848) (shen.parse-failure) (shen.comb (shen.in-> W6848) shen.skip))))) (if (shen.parse-failure? W6846) (let W6849 (let W6850 (<e> V6845) (if (shen.parse-failure? W6850) (shen.parse-failure) (shen.comb (shen.in-> W6850) shen.skip))) (if (shen.parse-failure? W6849) (shen.parse-failure) W6849)) W6846)))

(defun shen.<packagechar> (V6851) (let W6852 (if (shen.non-empty-stream? V6851) (let W6853 (shen.hds V6851) (let W6854 (shen.tls V6851) (if (not (= W6853 ".")) (shen.comb (shen.in-> W6854) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W6852) (shen.parse-failure) W6852)))

(defun shen.<non-terminal-name> (V6855) (let W6856 (if (shen.=hd? V6855 "<") (let W6857 (shen.tls V6855) (let W6858 (<!> W6857) (if (shen.parse-failure? W6858) (shen.parse-failure) (if (let W6859 (reverse (shen.<-out W6858)) (and (cons? W6859) (= (hd W6859) ">"))) (shen.comb (shen.in-> W6858) shen.skip) (shen.parse-failure))))) (shen.parse-failure)) (if (shen.parse-failure? W6856) (shen.parse-failure) W6856)))

(defun shen.semicolon? (V6860) (= V6860 (intern ";")))

(defun shen.<colon-equal> (V6861) (let W6862 (if (shen.non-empty-stream? V6861) (let W6863 (shen.hds V6861) (let W6864 (shen.tls V6861) (if (shen.colon-equal? W6863) (shen.comb (shen.in-> W6864) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W6862) (shen.parse-failure) W6862)))

(defun shen.colon-equal? (V6865) (= (intern ":=") V6865))

(defun shen.<syntax> (V6866) (let W6867 (let W6868 (shen.<syntax-item> V6866) (if (shen.parse-failure? W6868) (shen.parse-failure) (let W6869 (shen.<syntax> W6868) (if (shen.parse-failure? W6869) (shen.parse-failure) (shen.comb (shen.in-> W6869) (cons (shen.<-out W6868) (shen.<-out W6869))))))) (if (shen.parse-failure? W6867) (let W6870 (let W6871 (shen.<syntax-item> V6866) (if (shen.parse-failure? W6871) (shen.parse-failure) (shen.comb (shen.in-> W6871) (cons (shen.<-out W6871) ())))) (if (shen.parse-failure? W6870) (shen.parse-failure) W6870)) W6867)))

(defun shen.<syntax-item> (V6872) (let W6873 (if (shen.non-empty-stream? V6872) (let W6874 (shen.hds V6872) (let W6875 (shen.tls V6872) (if (shen.syntax-item? W6874) (shen.comb (shen.in-> W6875) W6874) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W6873) (shen.parse-failure) W6873)))

(defun shen.syntax-item? (V6878) (cond ((shen.colon-equal? V6878) false) ((shen.semicolon? V6878) false) ((atom? V6878) true) ((and (cons? V6878) (and (= cons (hd V6878)) (and (cons? (tl V6878)) (and (cons? (tl (tl V6878))) (= () (tl (tl (tl V6878)))))))) (and (shen.syntax-item? (hd (tl V6878))) (shen.syntax-item? (hd (tl (tl V6878)))))) (true false)))

(defun shen.<semantics> (V6879) (let W6880 (let W6881 (shen.<colon-equal> V6879) (if (shen.parse-failure? W6881) (shen.parse-failure) (if (shen.non-empty-stream? W6881) (let W6882 (shen.hds W6881) (let W6883 (shen.tls W6881) (if (shen.=hd? W6883 where) (let W6884 (shen.tls W6883) (if (shen.non-empty-stream? W6884) (let W6885 (shen.hds W6884) (let W6886 (shen.tls W6884) (if (not (shen.semicolon? W6882)) (shen.comb (shen.in-> W6886) (cons where (cons W6885 (cons W6882 ())))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure)))) (if (shen.parse-failure? W6880) (let W6887 (let W6888 (shen.<colon-equal> V6879) (if (shen.parse-failure? W6888) (shen.parse-failure) (if (shen.non-empty-stream? W6888) (let W6889 (shen.hds W6888) (let W6890 (shen.tls W6888) (if (not (shen.semicolon? W6889)) (shen.comb (shen.in-> W6890) W6889) (shen.parse-failure)))) (shen.parse-failure)))) (if (shen.parse-failure? W6887) (shen.parse-failure) W6887)) W6880)))

(defun shen.c-rules->shen (V6899 V6900 V6901) (cond ((= () V6901) (cons shen.parse-failure ())) ((cons? V6901) (shen.combine-c-code (shen.c-rule->shen V6899 (hd V6901) V6900) (shen.c-rules->shen V6899 V6900 (tl V6901)))) (true (simple-error "implementation error in shen.c-rules->shen
"))))

(defun shen.parse-failure () (fail))

(defun shen.combine-c-code (V6902 V6903) (cons let (cons Result (cons V6902 (cons (cons if (cons (cons shen.parse-failure? (cons Result ())) (cons V6903 (cons Result ())))) ())))))

(defun shen.c-rule->shen (V6910 V6911 V6912) (cond ((and (cons? V6911) (and (cons? (tl V6911)) (= () (tl (tl V6911))))) (shen.yacc-syntax V6910 V6912 (hd V6911) (hd (tl V6911)))) (true (simple-error "implementation error in shen.c-rule->shen
"))))

(defun shen.yacc-syntax (V6921 V6922 V6923 V6924) (cond ((and (= () V6923) (and (cons? V6924) (and (= where (hd V6924)) (and (cons? (tl V6924)) (and (cons? (tl (tl V6924))) (= () (tl (tl (tl V6924))))))))) (cons if (cons (shen.process-yacc-semantics (hd (tl V6924))) (cons (shen.yacc-syntax V6921 V6922 () (hd (tl (tl V6924)))) (cons (cons shen.parse-failure ()) ()))))) ((= () V6923) (shen.yacc-semantics V6921 V6922 V6924)) ((cons? V6923) (if (shen.non-terminal? (hd V6923)) (shen.non-terminalcode V6921 V6922 (hd V6923) (tl V6923) V6924) (if (variable? (hd V6923)) (shen.variablecode V6921 V6922 (hd V6923) (tl V6923) V6924) (if (= _ (hd V6923)) (shen.wildcardcode V6921 V6922 (hd V6923) (tl V6923) V6924) (if (atom? (hd V6923)) (shen.terminalcode V6921 V6922 (hd V6923) (tl V6923) V6924) (if (cons? (hd V6923)) (shen.conscode V6921 V6922 (hd V6923) (tl V6923) V6924) (simple-error "implementation error in shen.yacc-syntax
"))))))) (true (simple-error "implementation error in shen.yacc-syntax
"))))

(defun shen.non-terminalcode (V6925 V6926 V6927 V6928 V6929) (let W6930 (concat Parse V6927) (cons let (cons W6930 (cons (cons V6927 (cons V6926 ())) (cons (cons if (cons (cons shen.parse-failure? (cons W6930 ())) (cons (cons shen.parse-failure ()) (cons (shen.yacc-syntax V6925 W6930 V6928 V6929) ())))) ()))))))

(defun shen.variablecode (V6931 V6932 V6933 V6934 V6935) (let W6936 (gensym News) (cons if (cons (cons shen.non-empty-stream? (cons V6932 ())) (cons (cons let (cons V6933 (cons (cons shen.hds (cons V6932 ())) (cons W6936 (cons (cons shen.tls (cons V6932 ())) (cons (shen.yacc-syntax V6931 W6936 V6934 V6935) ())))))) (cons (cons shen.parse-failure ()) ()))))))

(defun shen.wildcardcode (V6937 V6938 V6939 V6940 V6941) (let W6942 (gensym News) (cons if (cons (cons shen.non-empty-stream? (cons V6938 ())) (cons (cons let (cons W6942 (cons (cons shen.tls (cons V6938 ())) (cons (shen.yacc-syntax V6937 W6942 V6940 V6941) ())))) (cons (cons shen.parse-failure ()) ()))))))

(defun shen.terminalcode (V6943 V6944 V6945 V6946 V6947) (let W6948 (gensym News) (cons if (cons (cons shen.=hd? (cons V6944 (cons V6945 ()))) (cons (cons let (cons W6948 (cons (cons shen.tls (cons V6944 ())) (cons (shen.yacc-syntax V6943 W6948 V6946 V6947) ())))) (cons (cons shen.parse-failure ()) ()))))))

(defun shen.conscode (V6949 V6950 V6951 V6952 V6953) (cons if (cons (cons shen.ccons? (cons V6950 ())) (cons (cons let (cons SynCons (cons (cons shen.comb (cons (cons shen.hds (cons V6950 ())) (cons (cons shen.<-out (cons V6950 ())) ()))) (cons (shen.yacc-syntax V6949 SynCons (append (shen.decons V6951) (cons shen.<end> ())) (cons shen.pushsemantics (cons (cons shen.tlstream (cons V6950 ())) (cons V6952 (cons V6953 ()))))) ())))) (cons (cons shen.parse-failure ()) ())))))

(defun shen.decons (V6954) (cond ((and (cons? V6954) (and (= cons (hd V6954)) (and (cons? (tl V6954)) (and (cons? (tl (tl V6954))) (= () (tl (tl (tl V6954)))))))) (cons (hd (tl V6954)) (shen.decons (hd (tl (tl V6954)))))) (true V6954)))

(defun shen.ccons? (V6961) (cond ((and (cons? V6961) (and (cons? (hd V6961)) (and (cons? (tl V6961)) (= () (tl (tl V6961)))))) (cons? (hd (hd V6961)))) (true false)))

(defun shen.non-empty-stream? (V6970) (cond ((and (cons? V6970) (cons? (hd V6970))) true) (true false)))

(defun shen.hds (V6971) (hd (hd V6971)))

(defun shen.hdstream (V6976) (cond ((and (cons? V6976) (and (cons? (hd V6976)) (and (cons? (tl V6976)) (= () (tl (tl V6976)))))) (cons (hd (hd V6976)) (tl V6976))) (true (simple-error "implementation error in shen.hdstream
"))))

(defun shen.comb (V6977 V6978) (cons V6977 (cons V6978 ())))

(defun shen.tlstream (V6983) (cond ((and (cons? V6983) (and (cons? (hd V6983)) (and (cons? (tl V6983)) (= () (tl (tl V6983)))))) (cons (tl (hd V6983)) (tl V6983))) (true (simple-error "implementation error in shen.tlstream
"))))

(defun shen.=hd? (V6993 V6994) (cond ((and (cons? V6993) (and (cons? (hd V6993)) (= (hd (hd V6993)) V6994))) true) (true false)))

(defun shen.tls (V6999) (cond ((and (cons? V6999) (and (cons? (hd V6999)) (and (cons? (tl V6999)) (= () (tl (tl V6999)))))) (cons (tl (hd V6999)) (tl V6999))) (true (simple-error "implementation error in shen.tls
"))))

(defun shen.yacc-semantics (V7002 V7003 V7004) (cond ((and (cons? V7004) (and (= shen.pushsemantics (hd V7004)) (and (cons? (tl V7004)) (and (cons? (tl (tl V7004))) (and (cons? (tl (tl (tl V7004)))) (= () (tl (tl (tl (tl V7004)))))))))) (shen.yacc-syntax V7002 (hd (tl V7004)) (hd (tl (tl V7004))) (hd (tl (tl (tl V7004)))))) (true (let W7005 (shen.process-yacc-semantics V7004) (let W7006 (shen.use-type-info V7002 W7005) (cons shen.comb (cons (cons shen.in-> (cons V7003 ())) (cons W7006 ()))))))))

(defun shen.use-type-info (V7010 V7011) (cond ((and (cons? V7010) (and (= { (hd V7010)) (and (cons? (tl V7010)) (and (cons? (hd (tl V7010))) (and (= str (hd (hd (tl V7010)))) (and (cons? (tl (hd (tl V7010)))) (and (cons? (hd (tl (hd (tl V7010))))) (and (= list (hd (hd (tl (hd (tl V7010)))))) (and (cons? (tl (hd (tl (hd (tl V7010)))))) (and (= () (tl (tl (hd (tl (hd (tl V7010))))))) (and (cons? (tl (tl (hd (tl V7010))))) (and (= () (tl (tl (tl (hd (tl V7010)))))) (and (cons? (tl (tl V7010))) (and (= --> (hd (tl (tl V7010)))) (and (cons? (tl (tl (tl V7010)))) (and (cons? (hd (tl (tl (tl V7010))))) (and (= str (hd (hd (tl (tl (tl V7010)))))) (and (cons? (tl (hd (tl (tl (tl V7010)))))) (and (cons? (hd (tl (hd (tl (tl (tl V7010))))))) (and (= list (hd (hd (tl (hd (tl (tl (tl V7010)))))))) (and (cons? (tl (hd (tl (hd (tl (tl (tl V7010)))))))) (and (= () (tl (tl (hd (tl (hd (tl (tl (tl V7010))))))))) (and (cons? (tl (tl (hd (tl (tl (tl V7010))))))) (and (= () (tl (tl (tl (hd (tl (tl (tl V7010)))))))) (and (cons? (tl (tl (tl (tl V7010))))) (and (= } (hd (tl (tl (tl (tl V7010)))))) (and (= () (tl (tl (tl (tl (tl V7010)))))) (and (= (hd (tl (hd (tl (hd (tl V7010)))))) (hd (tl (hd (tl (hd (tl (tl (tl V7010))))))))) (shen.monomorphic? (hd (tl (tl (hd (tl (tl (tl V7010)))))))))))))))))))))))))))))))))))) (cons type (cons V7011 (tl (tl (hd (tl (tl (tl V7010))))))))) (true V7011)))

(defun shen.monomorphic? (V7014) (cond ((variable? V7014) false) ((cons? V7014) (and (shen.monomorphic? (hd V7014)) (shen.monomorphic? (tl V7014)))) (true true)))

(defun shen.process-yacc-semantics (V7015) (cond ((cons? V7015) (map (lambda Z7016 (shen.process-yacc-semantics Z7016)) V7015)) ((shen.non-terminal? V7015) (cons shen.<-out (cons (concat Parse V7015) ()))) (true V7015)))

(defun shen.<-out (V7021) (cond ((and (cons? V7021) (and (cons? (tl V7021)) (= () (tl (tl V7021))))) (hd (tl V7021))) (true (simple-error "implementation error in shen.<-out
"))))

(defun shen.in-> (V7026) (cond ((and (cons? V7026) (and (cons? (tl V7026)) (= () (tl (tl V7026))))) (hd V7026)) (true (simple-error "implementation error in shen.in->
"))))

(defun <!> (V7031) (cond ((and (cons? V7031) (and (cons? (tl V7031)) (= () (tl (tl V7031))))) (cons () (cons (hd V7031) ()))) (true (simple-error "implementation error in <!>
"))))

(defun <e> (V7036) (cond ((and (cons? V7036) (and (cons? (tl V7036)) (= () (tl (tl V7036))))) (cons (hd V7036) (cons () ()))) (true (simple-error "implementation error in <e>
"))))

(defun shen.<end> (V7039) (cond ((and (cons? V7039) (and (= () (hd V7039)) (and (cons? (tl V7039)) (= () (tl (tl V7039)))))) V7039) (true (shen.parse-failure))))

