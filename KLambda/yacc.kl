(defun compile (V1164 V1165) (let W1166 (V1164 (cons V1165 (cons shen.no-action ()))) (if (shen.parsed? W1166) (shen.objectcode W1166) (simple-error "parse failure
"))))

(defun shen.parsed? (V1171) (cond ((shen.parse-failure? V1171) false) ((and (cons? V1171) (cons? (hd V1171))) (do (set shen.*residue* (hd V1171)) (simple-error (cn "syntax error here: " (shen.app (hd V1171) "
 ..." shen.r))))) (true true)))

(defun shen.parse-failure? (V1172) (= V1172 (fail)))

(defun shen.objectcode (V1175) (cond ((and (cons? V1175) (and (cons? (tl V1175)) (= () (tl (tl V1175))))) (hd (tl V1175))) (true (simple-error (shen.app V1175 " is not a YACC stream
" shen.s)))))

(defun shen.yacc->shen (V1176) (compile (lambda Z1177 (shen.<yacc> Z1177)) V1176))

(defun shen.<yacc> (V1178) (let W1179 (if (shen.non-empty-stream? V1178) (let W1180 (shen.hds V1178) (let W1181 (shen.tls V1178) (let W1182 (shen.<yaccsig> W1181) (if (shen.parse-failure? W1182) (shen.parse-failure) (let W1183 (shen.<c-rules> W1182) (if (shen.parse-failure? W1183) (shen.parse-failure) (shen.comb (shen.in-> W1183) (let W1184 (gensym S) (let W1185 (append (cons define (cons W1180 ())) (append (shen.<-out W1182) (cons W1184 (cons -> (cons (shen.c-rules->shen (shen.<-out W1182) W1184 (shen.<-out W1183)) ()))))) W1185))))))))) (shen.parse-failure)) (if (shen.parse-failure? W1179) (shen.parse-failure) W1179)))

(defun shen.<yaccsig> (V1186) (let W1187 (if (shen.non-empty-stream? V1186) (let W1188 (shen.hds V1186) (let W1189 (shen.tls V1186) (if (shen.ccons? W1189) (let W1190 (shen.comb (shen.hds W1189) (shen.<-out W1189)) (if (shen.=hd? W1190 list) (let W1191 (shen.tls W1190) (if (shen.non-empty-stream? W1191) (let W1192 (shen.hds W1191) (let W1193 (shen.tls W1191) (let W1194 (shen.<end> W1193) (if (shen.parse-failure? W1194) (shen.parse-failure) (if (shen.=hd? (shen.tlstream W1189) ==>) (let W1195 (shen.tls (shen.tlstream W1189)) (if (shen.non-empty-stream? W1195) (let W1196 (shen.hds W1195) (let W1197 (shen.tls W1195) (if (shen.non-empty-stream? W1197) (let W1198 (shen.hds W1197) (let W1199 (shen.tls W1197) (if (and (= { W1188) (= } W1198)) (shen.comb (shen.in-> W1199) (let W1200 (gensym C) (cons { (cons (cons str (cons (cons list (cons W1192 ())) (cons W1200 ()))) (cons --> (cons (cons str (cons (cons list (cons W1192 ())) (cons W1196 ()))) (cons } ()))))))) (shen.parse-failure)))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (shen.parse-failure))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W1187) (let W1201 (let W1202 (<e> V1186) (if (shen.parse-failure? W1202) (shen.parse-failure) (shen.comb (shen.in-> W1202) ()))) (if (shen.parse-failure? W1201) (shen.parse-failure) W1201)) W1187)))

(defun shen.<c-rules> (V1203) (let W1204 (let W1205 (shen.<c-rule> V1203) (if (shen.parse-failure? W1205) (shen.parse-failure) (let W1206 (shen.<c-rules> W1205) (if (shen.parse-failure? W1206) (shen.parse-failure) (shen.comb (shen.in-> W1206) (cons (shen.<-out W1205) (shen.<-out W1206))))))) (if (shen.parse-failure? W1204) (let W1207 (let W1208 (<!> V1203) (if (shen.parse-failure? W1208) (shen.parse-failure) (shen.comb (shen.in-> W1208) (if (empty? (shen.<-out W1208)) () (simple-error (cn "YACC syntax error here:
 " (shen.app (shen.<-out W1208) "
 ..." shen.r))))))) (if (shen.parse-failure? W1207) (shen.parse-failure) W1207)) W1204)))

(defun shen.<c-rule> (V1209) (let W1210 (let W1211 (shen.<syntax> V1209) (if (shen.parse-failure? W1211) (shen.parse-failure) (let W1212 (shen.<semantics> W1211) (if (shen.parse-failure? W1212) (shen.parse-failure) (let W1213 (shen.<sc> W1212) (if (shen.parse-failure? W1213) (shen.parse-failure) (shen.comb (shen.in-> W1213) (cons (shen.<-out W1211) (cons (shen.<-out W1212) ()))))))))) (if (shen.parse-failure? W1210) (let W1214 (let W1215 (shen.<syntax> V1209) (if (shen.parse-failure? W1215) (shen.parse-failure) (let W1216 (shen.<sc> W1215) (if (shen.parse-failure? W1216) (shen.parse-failure) (shen.comb (shen.in-> W1216) (cons (shen.<-out W1215) (cons (shen.autocomplete (shen.<-out W1215)) ()))))))) (if (shen.parse-failure? W1214) (shen.parse-failure) W1214)) W1210)))

(defun shen.autocomplete (V1217) (cond ((and (cons? V1217) (and (= () (tl V1217)) (shen.non-terminal? (hd V1217)))) (hd V1217)) ((and (cons? V1217) (shen.non-terminal? (hd V1217))) (cons append (cons (hd V1217) (cons (shen.autocomplete (tl V1217)) ())))) ((cons? V1217) (cons cons (cons (shen.autocomplete (hd V1217)) (cons (shen.autocomplete (tl V1217)) ())))) (true V1217)))

(defun shen.non-terminal? (V1218) (and (symbol? V1218) (let W1219 (explode V1218) (compile (lambda Z1220 (shen.<non-terminal?> Z1220)) W1219))))

(defun shen.<non-terminal?> (V1221) (let W1222 (let W1223 (shen.<packagenames> V1221) (if (shen.parse-failure? W1223) (shen.parse-failure) (let W1224 (shen.<non-terminal-name> W1223) (if (shen.parse-failure? W1224) (shen.parse-failure) (shen.comb (shen.in-> W1224) true))))) (if (shen.parse-failure? W1222) (let W1225 (let W1226 (shen.<non-terminal-name> V1221) (if (shen.parse-failure? W1226) (shen.parse-failure) (shen.comb (shen.in-> W1226) true))) (if (shen.parse-failure? W1225) (let W1227 (let W1228 (<!> V1221) (if (shen.parse-failure? W1228) (shen.parse-failure) (shen.comb (shen.in-> W1228) false))) (if (shen.parse-failure? W1227) (shen.parse-failure) W1227)) W1225)) W1222)))

(defun shen.<packagenames> (V1229) (let W1230 (let W1231 (shen.<packagename> V1229) (if (shen.parse-failure? W1231) (shen.parse-failure) (if (shen.=hd? W1231 ".") (let W1232 (shen.tls W1231) (let W1233 (shen.<packagenames> W1232) (if (shen.parse-failure? W1233) (shen.parse-failure) (shen.comb (shen.in-> W1233) shen.skip)))) (shen.parse-failure)))) (if (shen.parse-failure? W1230) (let W1234 (let W1235 (shen.<packagename> V1229) (if (shen.parse-failure? W1235) (shen.parse-failure) (if (shen.=hd? W1235 ".") (let W1236 (shen.tls W1235) (shen.comb (shen.in-> W1236) shen.skip)) (shen.parse-failure)))) (if (shen.parse-failure? W1234) (shen.parse-failure) W1234)) W1230)))

(defun shen.<packagename> (V1237) (let W1238 (let W1239 (shen.<packagechar> V1237) (if (shen.parse-failure? W1239) (shen.parse-failure) (let W1240 (shen.<packagename> W1239) (if (shen.parse-failure? W1240) (shen.parse-failure) (shen.comb (shen.in-> W1240) shen.skip))))) (if (shen.parse-failure? W1238) (let W1241 (let W1242 (<e> V1237) (if (shen.parse-failure? W1242) (shen.parse-failure) (shen.comb (shen.in-> W1242) shen.skip))) (if (shen.parse-failure? W1241) (shen.parse-failure) W1241)) W1238)))

(defun shen.<packagechar> (V1243) (let W1244 (if (shen.non-empty-stream? V1243) (let W1245 (shen.hds V1243) (let W1246 (shen.tls V1243) (if (not (= W1245 ".")) (shen.comb (shen.in-> W1246) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W1244) (shen.parse-failure) W1244)))

(defun shen.<non-terminal-name> (V1247) (let W1248 (if (shen.=hd? V1247 "<") (let W1249 (shen.tls V1247) (let W1250 (<!> W1249) (if (shen.parse-failure? W1250) (shen.parse-failure) (if (let W1251 (reverse (shen.<-out W1250)) (and (cons? W1251) (= (hd W1251) ">"))) (shen.comb (shen.in-> W1250) shen.skip) (shen.parse-failure))))) (shen.parse-failure)) (if (shen.parse-failure? W1248) (shen.parse-failure) W1248)))

(defun shen.semicolon? (V1252) (= V1252 (intern ";")))

(defun shen.<colon-equal> (V1253) (let W1254 (if (shen.non-empty-stream? V1253) (let W1255 (shen.hds V1253) (let W1256 (shen.tls V1253) (if (shen.colon-equal? W1255) (shen.comb (shen.in-> W1256) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W1254) (shen.parse-failure) W1254)))

(defun shen.colon-equal? (V1257) (= (intern ":=") V1257))

(defun shen.<syntax> (V1258) (let W1259 (let W1260 (shen.<syntax-item> V1258) (if (shen.parse-failure? W1260) (shen.parse-failure) (let W1261 (shen.<syntax> W1260) (if (shen.parse-failure? W1261) (shen.parse-failure) (shen.comb (shen.in-> W1261) (cons (shen.<-out W1260) (shen.<-out W1261))))))) (if (shen.parse-failure? W1259) (let W1262 (let W1263 (shen.<syntax-item> V1258) (if (shen.parse-failure? W1263) (shen.parse-failure) (shen.comb (shen.in-> W1263) (cons (shen.<-out W1263) ())))) (if (shen.parse-failure? W1262) (shen.parse-failure) W1262)) W1259)))

(defun shen.<syntax-item> (V1264) (let W1265 (if (shen.non-empty-stream? V1264) (let W1266 (shen.hds V1264) (let W1267 (shen.tls V1264) (if (shen.syntax-item? W1266) (shen.comb (shen.in-> W1267) W1266) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W1265) (shen.parse-failure) W1265)))

(defun shen.syntax-item? (V1270) (cond ((shen.colon-equal? V1270) false) ((shen.semicolon? V1270) false) ((atom? V1270) true) ((and (cons? V1270) (and (= cons (hd V1270)) (and (cons? (tl V1270)) (and (cons? (tl (tl V1270))) (= () (tl (tl (tl V1270)))))))) (and (shen.syntax-item? (hd (tl V1270))) (shen.syntax-item? (hd (tl (tl V1270)))))) (true false)))

(defun shen.<semantics> (V1271) (let W1272 (let W1273 (shen.<colon-equal> V1271) (if (shen.parse-failure? W1273) (shen.parse-failure) (if (shen.non-empty-stream? W1273) (let W1274 (shen.hds W1273) (let W1275 (shen.tls W1273) (if (shen.=hd? W1275 where) (let W1276 (shen.tls W1275) (if (shen.non-empty-stream? W1276) (let W1277 (shen.hds W1276) (let W1278 (shen.tls W1276) (if (not (shen.semicolon? W1274)) (shen.comb (shen.in-> W1278) (cons where (cons W1277 (cons W1274 ())))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure)))) (if (shen.parse-failure? W1272) (let W1279 (let W1280 (shen.<colon-equal> V1271) (if (shen.parse-failure? W1280) (shen.parse-failure) (if (shen.non-empty-stream? W1280) (let W1281 (shen.hds W1280) (let W1282 (shen.tls W1280) (if (not (shen.semicolon? W1281)) (shen.comb (shen.in-> W1282) W1281) (shen.parse-failure)))) (shen.parse-failure)))) (if (shen.parse-failure? W1279) (shen.parse-failure) W1279)) W1272)))

(defun shen.c-rules->shen (V1291 V1292 V1293) (cond ((= () V1293) (cons shen.parse-failure ())) ((cons? V1293) (shen.combine-c-code (shen.c-rule->shen V1291 (hd V1293) V1292) (shen.c-rules->shen V1291 V1292 (tl V1293)))) (true (simple-error "implementation error in shen.c-rules->shen
"))))

(defun shen.parse-failure () (fail))

(defun shen.combine-c-code (V1294 V1295) (cons let (cons Result (cons V1294 (cons (cons if (cons (cons shen.parse-failure? (cons Result ())) (cons V1295 (cons Result ())))) ())))))

(defun shen.c-rule->shen (V1302 V1303 V1304) (cond ((and (cons? V1303) (and (cons? (tl V1303)) (= () (tl (tl V1303))))) (shen.yacc-syntax V1302 V1304 (hd V1303) (hd (tl V1303)))) (true (simple-error "implementation error in shen.c-rule->shen
"))))

(defun shen.yacc-syntax (V1313 V1314 V1315 V1316) (cond ((and (= () V1315) (and (cons? V1316) (and (= where (hd V1316)) (and (cons? (tl V1316)) (and (cons? (tl (tl V1316))) (= () (tl (tl (tl V1316))))))))) (cons if (cons (shen.process-yacc-semantics (hd (tl V1316))) (cons (shen.yacc-syntax V1313 V1314 () (hd (tl (tl V1316)))) (cons (cons shen.parse-failure ()) ()))))) ((= () V1315) (shen.yacc-semantics V1313 V1314 V1316)) ((cons? V1315) (if (shen.non-terminal? (hd V1315)) (shen.non-terminalcode V1313 V1314 (hd V1315) (tl V1315) V1316) (if (variable? (hd V1315)) (shen.variablecode V1313 V1314 (hd V1315) (tl V1315) V1316) (if (= _ (hd V1315)) (shen.wildcardcode V1313 V1314 (hd V1315) (tl V1315) V1316) (if (atom? (hd V1315)) (shen.terminalcode V1313 V1314 (hd V1315) (tl V1315) V1316) (if (cons? (hd V1315)) (shen.conscode V1313 V1314 (hd V1315) (tl V1315) V1316) (simple-error "implementation error in shen.yacc-syntax
"))))))) (true (simple-error "implementation error in shen.yacc-syntax
"))))

(defun shen.non-terminalcode (V1317 V1318 V1319 V1320 V1321) (let W1322 (concat Parse V1319) (cons let (cons W1322 (cons (cons V1319 (cons V1318 ())) (cons (cons if (cons (cons shen.parse-failure? (cons W1322 ())) (cons (cons shen.parse-failure ()) (cons (shen.yacc-syntax V1317 W1322 V1320 V1321) ())))) ()))))))

(defun shen.variablecode (V1323 V1324 V1325 V1326 V1327) (let W1328 (gensym News) (cons if (cons (cons shen.non-empty-stream? (cons V1324 ())) (cons (cons let (cons V1325 (cons (cons shen.hds (cons V1324 ())) (cons W1328 (cons (cons shen.tls (cons V1324 ())) (cons (shen.yacc-syntax V1323 W1328 V1326 V1327) ())))))) (cons (cons shen.parse-failure ()) ()))))))

(defun shen.wildcardcode (V1329 V1330 V1331 V1332 V1333) (let W1334 (gensym News) (cons if (cons (cons shen.non-empty-stream? (cons V1330 ())) (cons (cons let (cons W1334 (cons (cons shen.tls (cons V1330 ())) (cons (shen.yacc-syntax V1329 W1334 V1332 V1333) ())))) (cons (cons shen.parse-failure ()) ()))))))

(defun shen.terminalcode (V1335 V1336 V1337 V1338 V1339) (let W1340 (gensym News) (cons if (cons (cons shen.=hd? (cons V1336 (cons V1337 ()))) (cons (cons let (cons W1340 (cons (cons shen.tls (cons V1336 ())) (cons (shen.yacc-syntax V1335 W1340 V1338 V1339) ())))) (cons (cons shen.parse-failure ()) ()))))))

(defun shen.conscode (V1341 V1342 V1343 V1344 V1345) (cons if (cons (cons shen.ccons? (cons V1342 ())) (cons (cons let (cons SynCons (cons (cons shen.comb (cons (cons shen.hds (cons V1342 ())) (cons (cons shen.<-out (cons V1342 ())) ()))) (cons (shen.yacc-syntax V1341 SynCons (append (shen.decons V1343) (cons shen.<end> ())) (cons shen.pushsemantics (cons (cons shen.tlstream (cons V1342 ())) (cons V1344 (cons V1345 ()))))) ())))) (cons (cons shen.parse-failure ()) ())))))

(defun shen.decons (V1346) (cond ((and (cons? V1346) (and (= cons (hd V1346)) (and (cons? (tl V1346)) (and (cons? (tl (tl V1346))) (= () (tl (tl (tl V1346)))))))) (cons (hd (tl V1346)) (shen.decons (hd (tl (tl V1346)))))) (true V1346)))

(defun shen.ccons? (V1353) (cond ((and (cons? V1353) (and (cons? (hd V1353)) (and (cons? (tl V1353)) (= () (tl (tl V1353)))))) (cons? (hd (hd V1353)))) (true false)))

(defun shen.non-empty-stream? (V1362) (cond ((and (cons? V1362) (cons? (hd V1362))) true) (true false)))

(defun shen.hds (V1363) (hd (hd V1363)))

(defun shen.hdstream (V1368) (cond ((and (cons? V1368) (and (cons? (hd V1368)) (and (cons? (tl V1368)) (= () (tl (tl V1368)))))) (cons (hd (hd V1368)) (tl V1368))) (true (simple-error "implementation error in shen.hdstream
"))))

(defun shen.comb (V1369 V1370) (cons V1369 (cons V1370 ())))

(defun shen.tlstream (V1375) (cond ((and (cons? V1375) (and (cons? (hd V1375)) (and (cons? (tl V1375)) (= () (tl (tl V1375)))))) (cons (tl (hd V1375)) (tl V1375))) (true (simple-error "implementation error in shen.tlstream
"))))

(defun shen.=hd? (V1385 V1386) (cond ((and (cons? V1385) (and (cons? (hd V1385)) (= (hd (hd V1385)) V1386))) true) (true false)))

(defun shen.tls (V1391) (cond ((and (cons? V1391) (and (cons? (hd V1391)) (and (cons? (tl V1391)) (= () (tl (tl V1391)))))) (cons (tl (hd V1391)) (tl V1391))) (true (simple-error "implementation error in shen.tls
"))))

(defun shen.yacc-semantics (V1394 V1395 V1396) (cond ((and (cons? V1396) (and (= shen.pushsemantics (hd V1396)) (and (cons? (tl V1396)) (and (cons? (tl (tl V1396))) (and (cons? (tl (tl (tl V1396)))) (= () (tl (tl (tl (tl V1396)))))))))) (shen.yacc-syntax V1394 (hd (tl V1396)) (hd (tl (tl V1396))) (hd (tl (tl (tl V1396)))))) (true (let W1397 (shen.process-yacc-semantics V1396) (let W1398 (shen.use-type-info V1394 W1397) (cons shen.comb (cons (cons shen.in-> (cons V1395 ())) (cons W1398 ()))))))))

(defun shen.use-type-info (V1402 V1403) (cond ((and (cons? V1402) (and (= { (hd V1402)) (and (cons? (tl V1402)) (and (cons? (hd (tl V1402))) (and (= str (hd (hd (tl V1402)))) (and (cons? (tl (hd (tl V1402)))) (and (cons? (hd (tl (hd (tl V1402))))) (and (= list (hd (hd (tl (hd (tl V1402)))))) (and (cons? (tl (hd (tl (hd (tl V1402)))))) (and (= () (tl (tl (hd (tl (hd (tl V1402))))))) (and (cons? (tl (tl (hd (tl V1402))))) (and (= () (tl (tl (tl (hd (tl V1402)))))) (and (cons? (tl (tl V1402))) (and (= --> (hd (tl (tl V1402)))) (and (cons? (tl (tl (tl V1402)))) (and (cons? (hd (tl (tl (tl V1402))))) (and (= str (hd (hd (tl (tl (tl V1402)))))) (and (cons? (tl (hd (tl (tl (tl V1402)))))) (and (cons? (hd (tl (hd (tl (tl (tl V1402))))))) (and (= list (hd (hd (tl (hd (tl (tl (tl V1402)))))))) (and (cons? (tl (hd (tl (hd (tl (tl (tl V1402)))))))) (and (= () (tl (tl (hd (tl (hd (tl (tl (tl V1402))))))))) (and (cons? (tl (tl (hd (tl (tl (tl V1402))))))) (and (= () (tl (tl (tl (hd (tl (tl (tl V1402)))))))) (and (cons? (tl (tl (tl (tl V1402))))) (and (= } (hd (tl (tl (tl (tl V1402)))))) (and (= () (tl (tl (tl (tl (tl V1402)))))) (= (hd (tl (hd (tl (hd (tl V1402)))))) (hd (tl (hd (tl (hd (tl (tl (tl V1402)))))))))))))))))))))))))))))))))))) (cons type (cons V1403 (tl (tl (hd (tl (tl (tl V1402))))))))) (true V1403)))

(defun shen.process-yacc-semantics (V1404) (cond ((cons? V1404) (map (lambda Z1405 (shen.process-yacc-semantics Z1405)) V1404)) ((shen.non-terminal? V1404) (cons shen.<-out (cons (concat Parse V1404) ()))) (true V1404)))

(defun shen.<-out (V1410) (cond ((and (cons? V1410) (and (cons? (tl V1410)) (= () (tl (tl V1410))))) (hd (tl V1410))) (true (simple-error "implementation error in shen.<-out
"))))

(defun shen.in-> (V1415) (cond ((and (cons? V1415) (and (cons? (tl V1415)) (= () (tl (tl V1415))))) (hd V1415)) (true (simple-error "implementation error in shen.in->
"))))

(defun <!> (V1420) (cond ((and (cons? V1420) (and (cons? (tl V1420)) (= () (tl (tl V1420))))) (cons () (cons (hd V1420) ()))) (true (simple-error "implementation error in <!>
"))))

(defun <e> (V1425) (cond ((and (cons? V1425) (and (cons? (tl V1425)) (= () (tl (tl V1425))))) (cons (hd V1425) (cons () ()))) (true (simple-error "implementation error in <e>
"))))

(defun shen.<end> (V1428) (cond ((and (cons? V1428) (and (= () (hd V1428)) (and (cons? (tl V1428)) (= () (tl (tl V1428)))))) V1428) (true (shen.parse-failure))))

