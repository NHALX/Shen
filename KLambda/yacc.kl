(defun compile (V6283 V6284) (let Compile (V6283 (cons V6284 (cons shen.no-action ()))) (if (shen.parsed? Compile) (shen.objectcode Compile) (simple-error "parse failure
"))))

(defun shen.parsed? (V6289) (cond ((shen.parse-failure? V6289) false) ((and (cons? V6289) (cons? (hd V6289))) (do (set shen.*residue* (hd V6289)) (simple-error (cn "syntax error here: " (shen.app (hd V6289) "
 ..." shen.r))))) (true true)))

(defun shen.parse-failure? (V6290) (= V6290 (fail)))

(defun shen.objectcode (V6293) (cond ((and (cons? V6293) (and (cons? (tl V6293)) (= () (tl (tl V6293))))) (hd (tl V6293))) (true (simple-error (shen.app V6293 " is not a YACC stream
" shen.s)))))

(defun shen.yacc->shen (V6294) (compile (lambda X (shen.<yacc> X)) V6294))

(defun shen.<yacc> (V6295) (let Result (if (shen.non-empty-stream? V6295) (let F (shen.hds V6295) (let News6176 (shen.tls V6295) (let Parseshen.<yaccsig> (shen.<yaccsig> News6176) (if (shen.parse-failure? Parseshen.<yaccsig>) (shen.parse-failure) (let Parseshen.<c-rules> (shen.<c-rules> Parseshen.<yaccsig>) (if (shen.parse-failure? Parseshen.<c-rules>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<c-rules>) (let Stream (gensym S) (let Def (append (cons define (cons F ())) (append (shen.<-out Parseshen.<yaccsig>) (cons Stream (cons -> (cons (shen.c-rules->shen (shen.<-out Parseshen.<yaccsig>) Stream (shen.<-out Parseshen.<c-rules>)) ()))))) Def))))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<yaccsig> (V6296) (let Result (if (shen.non-empty-stream? V6296) (let LC (shen.hds V6296) (let News6178 (shen.tls V6296) (if (shen.ccons? News6178) (let SynCons (shen.comb (shen.hds News6178) (shen.<-out News6178)) (if (shen.=hd? SynCons list) (let News6179 (shen.tls SynCons) (if (shen.non-empty-stream? News6179) (let A (shen.hds News6179) (let News6180 (shen.tls News6179) (let Parseshen.<end> (shen.<end> News6180) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (if (shen.=hd? (shen.tlstream News6178) ==>) (let News6181 (shen.tls (shen.tlstream News6178)) (if (shen.non-empty-stream? News6181) (let B (shen.hds News6181) (let News6182 (shen.tls News6181) (if (shen.non-empty-stream? News6182) (let RC (shen.hds News6182) (let News6183 (shen.tls News6182) (if (and (= { LC) (= } RC)) (shen.comb (shen.in-> News6183) (let C (gensym C) (cons { (cons (cons str (cons (cons list (cons A ())) (cons C ()))) (cons --> (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons } ()))))))) (shen.parse-failure)))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (shen.parse-failure))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V6296) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<c-rules> (V6297) (let Result (let Parseshen.<c-rule> (shen.<c-rule> V6297) (if (shen.parse-failure? Parseshen.<c-rule>) (shen.parse-failure) (let Parseshen.<c-rules> (shen.<c-rules> Parseshen.<c-rule>) (if (shen.parse-failure? Parseshen.<c-rules>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<c-rules>) (cons (shen.<-out Parseshen.<c-rule>) (shen.<-out Parseshen.<c-rules>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<!> (<!> V6297) (if (shen.parse-failure? Parse<!>) (shen.parse-failure) (shen.comb (shen.in-> Parse<!>) (if (empty? (shen.<-out Parse<!>)) () (simple-error (cn "YACC syntax error here:
 " (shen.app (shen.<-out Parse<!>) "
 ..." shen.r))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<c-rule> (V6298) (let Result (let Parseshen.<syntax> (shen.<syntax> V6298) (if (shen.parse-failure? Parseshen.<syntax>) (shen.parse-failure) (let Parseshen.<semantics> (shen.<semantics> Parseshen.<syntax>) (if (shen.parse-failure? Parseshen.<semantics>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<semantics>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (cons (shen.<-out Parseshen.<syntax>) (cons (shen.<-out Parseshen.<semantics>) ()))))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<syntax> (shen.<syntax> V6298) (if (shen.parse-failure? Parseshen.<syntax>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<syntax>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (cons (shen.<-out Parseshen.<syntax>) (cons (shen.autocomplete (shen.<-out Parseshen.<syntax>)) ()))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.autocomplete (V6299) (cond ((and (cons? V6299) (and (= () (tl V6299)) (shen.non-terminal? (hd V6299)))) (hd V6299)) ((and (cons? V6299) (shen.non-terminal? (hd V6299))) (cons append (cons (hd V6299) (cons (shen.autocomplete (tl V6299)) ())))) ((cons? V6299) (cons cons (cons (shen.autocomplete (hd V6299)) (cons (shen.autocomplete (tl V6299)) ())))) (true V6299)))

(defun shen.non-terminal? (V6300) (and (symbol? V6300) (let Explode (explode V6300) (compile (lambda X (shen.<non-terminal?> X)) Explode))))

(defun shen.<non-terminal?> (V6301) (let Result (let Parseshen.<packagenames> (shen.<packagenames> V6301) (if (shen.parse-failure? Parseshen.<packagenames>) (shen.parse-failure) (let Parseshen.<non-terminal-name> (shen.<non-terminal-name> Parseshen.<packagenames>) (if (shen.parse-failure? Parseshen.<non-terminal-name>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<non-terminal-name>) true))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<non-terminal-name> (shen.<non-terminal-name> V6301) (if (shen.parse-failure? Parseshen.<non-terminal-name>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<non-terminal-name>) true))) (if (shen.parse-failure? Result) (let Result (let Parse<!> (<!> V6301) (if (shen.parse-failure? Parse<!>) (shen.parse-failure) (shen.comb (shen.in-> Parse<!>) false))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)))

(defun shen.<packagenames> (V6302) (let Result (let Parseshen.<packagename> (shen.<packagename> V6302) (if (shen.parse-failure? Parseshen.<packagename>) (shen.parse-failure) (if (shen.=hd? Parseshen.<packagename> ".") (let News6188 (shen.tls Parseshen.<packagename>) (let Parseshen.<packagenames> (shen.<packagenames> News6188) (if (shen.parse-failure? Parseshen.<packagenames>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<packagenames>) shen.skip)))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<packagename> (shen.<packagename> V6302) (if (shen.parse-failure? Parseshen.<packagename>) (shen.parse-failure) (if (shen.=hd? Parseshen.<packagename> ".") (let News6189 (shen.tls Parseshen.<packagename>) (shen.comb (shen.in-> News6189) shen.skip)) (shen.parse-failure)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<packagename> (V6303) (let Result (let Parseshen.<packagechar> (shen.<packagechar> V6303) (if (shen.parse-failure? Parseshen.<packagechar>) (shen.parse-failure) (let Parseshen.<packagename> (shen.<packagename> Parseshen.<packagechar>) (if (shen.parse-failure? Parseshen.<packagename>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<packagename>) shen.skip))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V6303) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) shen.skip))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<packagechar> (V6304) (let Result (if (shen.non-empty-stream? V6304) (let X (shen.hds V6304) (let News6192 (shen.tls V6304) (if (not (= X ".")) (shen.comb (shen.in-> News6192) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<non-terminal-name> (V6305) (let Result (if (shen.=hd? V6305 "<") (let News6194 (shen.tls V6305) (let Parse<!> (<!> News6194) (if (shen.parse-failure? Parse<!>) (shen.parse-failure) (if (let Reverse (reverse (shen.<-out Parse<!>)) (and (cons? Reverse) (= (hd Reverse) ">"))) (shen.comb (shen.in-> Parse<!>) shen.skip) (shen.parse-failure))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.semicolon? (V6306) (= V6306 (intern ";")))

(defun shen.<colon-equal> (V6307) (let Result (if (shen.non-empty-stream? V6307) (let X (shen.hds V6307) (let News6196 (shen.tls V6307) (if (shen.colon-equal? X) (shen.comb (shen.in-> News6196) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.colon-equal? (V6308) (= (intern ":=") V6308))

(defun shen.<syntax> (V6309) (let Result (let Parseshen.<syntax-item> (shen.<syntax-item> V6309) (if (shen.parse-failure? Parseshen.<syntax-item>) (shen.parse-failure) (let Parseshen.<syntax> (shen.<syntax> Parseshen.<syntax-item>) (if (shen.parse-failure? Parseshen.<syntax>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<syntax>) (cons (shen.<-out Parseshen.<syntax-item>) (shen.<-out Parseshen.<syntax>))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<syntax-item> (shen.<syntax-item> V6309) (if (shen.parse-failure? Parseshen.<syntax-item>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<syntax-item>) (cons (shen.<-out Parseshen.<syntax-item>) ())))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<syntax-item> (V6310) (let Result (if (shen.non-empty-stream? V6310) (let X (shen.hds V6310) (let News6199 (shen.tls V6310) (if (shen.syntax-item? X) (shen.comb (shen.in-> News6199) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.syntax-item? (V6313) (cond ((shen.colon-equal? V6313) false) ((shen.semicolon? V6313) false) ((atom? V6313) true) ((and (cons? V6313) (and (= cons (hd V6313)) (and (cons? (tl V6313)) (and (cons? (tl (tl V6313))) (= () (tl (tl (tl V6313)))))))) (and (shen.syntax-item? (hd (tl V6313))) (shen.syntax-item? (hd (tl (tl V6313)))))) (true false)))

(defun shen.<semantics> (V6314) (let Result (let Parseshen.<colon-equal> (shen.<colon-equal> V6314) (if (shen.parse-failure? Parseshen.<colon-equal>) (shen.parse-failure) (if (shen.non-empty-stream? Parseshen.<colon-equal>) (let Semantics (shen.hds Parseshen.<colon-equal>) (let News6201 (shen.tls Parseshen.<colon-equal>) (if (shen.=hd? News6201 where) (let News6202 (shen.tls News6201) (if (shen.non-empty-stream? News6202) (let Guard (shen.hds News6202) (let News6203 (shen.tls News6202) (if (not (shen.semicolon? Semantics)) (shen.comb (shen.in-> News6203) (cons where (cons Guard (cons Semantics ())))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<colon-equal> (shen.<colon-equal> V6314) (if (shen.parse-failure? Parseshen.<colon-equal>) (shen.parse-failure) (if (shen.non-empty-stream? Parseshen.<colon-equal>) (let Semantics (shen.hds Parseshen.<colon-equal>) (let News6204 (shen.tls Parseshen.<colon-equal>) (if (not (shen.semicolon? Semantics)) (shen.comb (shen.in-> News6204) Semantics) (shen.parse-failure)))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.c-rules->shen (V6323 V6324 V6325) (cond ((= () V6325) (cons shen.parse-failure ())) ((cons? V6325) (shen.combine-c-code (shen.c-rule->shen V6323 (hd V6325) V6324) (shen.c-rules->shen V6323 V6324 (tl V6325)))) (true (simple-error "implementation error in shen.c-rules->shen
"))))

(defun shen.parse-failure () (fail))

(defun shen.combine-c-code (V6326 V6327) (cons let (cons Result (cons V6326 (cons (cons if (cons (cons shen.parse-failure? (cons Result ())) (cons V6327 (cons Result ())))) ())))))

(defun shen.c-rule->shen (V6334 V6335 V6336) (cond ((and (cons? V6335) (and (cons? (tl V6335)) (= () (tl (tl V6335))))) (shen.yacc-syntax V6334 V6336 (hd V6335) (hd (tl V6335)))) (true (simple-error "implementation error in shen.c-rule->shen
"))))

(defun shen.yacc-syntax (V6345 V6346 V6347 V6348) (cond ((and (= () V6347) (and (cons? V6348) (and (= where (hd V6348)) (and (cons? (tl V6348)) (and (cons? (tl (tl V6348))) (= () (tl (tl (tl V6348))))))))) (cons if (cons (shen.process-yacc-semantics (hd (tl V6348))) (cons (shen.yacc-syntax V6345 V6346 () (hd (tl (tl V6348)))) (cons (cons shen.parse-failure ()) ()))))) ((= () V6347) (shen.yacc-semantics V6345 V6346 V6348)) ((cons? V6347) (if (shen.non-terminal? (hd V6347)) (shen.non-terminalcode V6345 V6346 (hd V6347) (tl V6347) V6348) (if (variable? (hd V6347)) (shen.variablecode V6345 V6346 (hd V6347) (tl V6347) V6348) (if (= _ (hd V6347)) (shen.wildcardcode V6345 V6346 (hd V6347) (tl V6347) V6348) (if (atom? (hd V6347)) (shen.terminalcode V6345 V6346 (hd V6347) (tl V6347) V6348) (if (cons? (hd V6347)) (shen.conscode V6345 V6346 (hd V6347) (tl V6347) V6348) (simple-error "implementation error in shen.yacc-syntax
"))))))) (true (simple-error "implementation error in shen.yacc-syntax
"))))

(defun shen.non-terminalcode (V6349 V6350 V6351 V6352 V6353) (let ApplyNonTerminal (concat Parse V6351) (cons let (cons ApplyNonTerminal (cons (cons V6351 (cons V6350 ())) (cons (cons if (cons (cons shen.parse-failure? (cons ApplyNonTerminal ())) (cons (cons shen.parse-failure ()) (cons (shen.yacc-syntax V6349 ApplyNonTerminal V6352 V6353) ())))) ()))))))

(defun shen.variablecode (V6354 V6355 V6356 V6357 V6358) (let NewStream (gensym News) (cons if (cons (cons shen.non-empty-stream? (cons V6355 ())) (cons (cons let (cons V6356 (cons (cons shen.hds (cons V6355 ())) (cons NewStream (cons (cons shen.tls (cons V6355 ())) (cons (shen.yacc-syntax V6354 NewStream V6357 V6358) ())))))) (cons (cons shen.parse-failure ()) ()))))))

(defun shen.wildcardcode (V6359 V6360 V6361 V6362 V6363) (let NewStream (gensym News) (cons if (cons (cons shen.non-empty-stream? (cons V6360 ())) (cons (cons let (cons NewStream (cons (cons shen.tls (cons V6360 ())) (cons (shen.yacc-syntax V6359 NewStream V6362 V6363) ())))) (cons (cons shen.parse-failure ()) ()))))))

(defun shen.terminalcode (V6364 V6365 V6366 V6367 V6368) (let NewStream (gensym News) (cons if (cons (cons shen.=hd? (cons V6365 (cons V6366 ()))) (cons (cons let (cons NewStream (cons (cons shen.tls (cons V6365 ())) (cons (shen.yacc-syntax V6364 NewStream V6367 V6368) ())))) (cons (cons shen.parse-failure ()) ()))))))

(defun shen.conscode (V6369 V6370 V6371 V6372 V6373) (cons if (cons (cons shen.ccons? (cons V6370 ())) (cons (cons let (cons SynCons (cons (cons shen.comb (cons (cons shen.hds (cons V6370 ())) (cons (cons shen.<-out (cons V6370 ())) ()))) (cons (shen.yacc-syntax V6369 SynCons (append (shen.decons V6371) (cons shen.<end> ())) (cons shen.pushsemantics (cons (cons shen.tlstream (cons V6370 ())) (cons V6372 (cons V6373 ()))))) ())))) (cons (cons shen.parse-failure ()) ())))))

(defun shen.decons (V6374) (cond ((and (cons? V6374) (and (= cons (hd V6374)) (and (cons? (tl V6374)) (and (cons? (tl (tl V6374))) (= () (tl (tl (tl V6374)))))))) (cons (hd (tl V6374)) (shen.decons (hd (tl (tl V6374)))))) (true V6374)))

(defun shen.ccons? (V6381) (cond ((and (cons? V6381) (and (cons? (hd V6381)) (and (cons? (tl V6381)) (= () (tl (tl V6381)))))) (cons? (hd (hd V6381)))) (true false)))

(defun shen.non-empty-stream? (V6390) (cond ((and (cons? V6390) (cons? (hd V6390))) true) (true false)))

(defun shen.hds (V6391) (hd (hd V6391)))

(defun shen.hdstream (V6396) (cond ((and (cons? V6396) (and (cons? (hd V6396)) (and (cons? (tl V6396)) (= () (tl (tl V6396)))))) (cons (hd (hd V6396)) (tl V6396))) (true (simple-error "implementation error in shen.hdstream
"))))

(defun shen.comb (V6397 V6398) (cons V6397 (cons V6398 ())))

(defun shen.tlstream (V6403) (cond ((and (cons? V6403) (and (cons? (hd V6403)) (and (cons? (tl V6403)) (= () (tl (tl V6403)))))) (cons (tl (hd V6403)) (tl V6403))) (true (simple-error "implementation error in shen.tlstream
"))))

(defun shen.=hd? (V6413 V6414) (cond ((and (cons? V6413) (and (cons? (hd V6413)) (= (hd (hd V6413)) V6414))) true) (true false)))

(defun shen.tls (V6419) (cond ((and (cons? V6419) (and (cons? (hd V6419)) (and (cons? (tl V6419)) (= () (tl (tl V6419)))))) (cons (tl (hd V6419)) (tl V6419))) (true (simple-error "implementation error in shen.tls
"))))

(defun shen.yacc-semantics (V6422 V6423 V6424) (cond ((and (cons? V6424) (and (= shen.pushsemantics (hd V6424)) (and (cons? (tl V6424)) (and (cons? (tl (tl V6424))) (and (cons? (tl (tl (tl V6424)))) (= () (tl (tl (tl (tl V6424)))))))))) (shen.yacc-syntax V6422 (hd (tl V6424)) (hd (tl (tl V6424))) (hd (tl (tl (tl V6424)))))) (true (let Process (shen.process-yacc-semantics V6424) (let Annotate (shen.use-type-info V6422 Process) (cons shen.comb (cons (cons shen.in-> (cons V6423 ())) (cons Annotate ()))))))))

(defun shen.use-type-info (V6428 V6429) (cond ((and (cons? V6428) (and (= { (hd V6428)) (and (cons? (tl V6428)) (and (cons? (hd (tl V6428))) (and (= str (hd (hd (tl V6428)))) (and (cons? (tl (hd (tl V6428)))) (and (cons? (hd (tl (hd (tl V6428))))) (and (= list (hd (hd (tl (hd (tl V6428)))))) (and (cons? (tl (hd (tl (hd (tl V6428)))))) (and (= () (tl (tl (hd (tl (hd (tl V6428))))))) (and (cons? (tl (tl (hd (tl V6428))))) (and (= () (tl (tl (tl (hd (tl V6428)))))) (and (cons? (tl (tl V6428))) (and (= --> (hd (tl (tl V6428)))) (and (cons? (tl (tl (tl V6428)))) (and (cons? (hd (tl (tl (tl V6428))))) (and (= str (hd (hd (tl (tl (tl V6428)))))) (and (cons? (tl (hd (tl (tl (tl V6428)))))) (and (cons? (hd (tl (hd (tl (tl (tl V6428))))))) (and (= list (hd (hd (tl (hd (tl (tl (tl V6428)))))))) (and (cons? (tl (hd (tl (hd (tl (tl (tl V6428)))))))) (and (= () (tl (tl (hd (tl (hd (tl (tl (tl V6428))))))))) (and (cons? (tl (tl (hd (tl (tl (tl V6428))))))) (and (= () (tl (tl (tl (hd (tl (tl (tl V6428)))))))) (and (cons? (tl (tl (tl (tl V6428))))) (and (= } (hd (tl (tl (tl (tl V6428)))))) (and (= () (tl (tl (tl (tl (tl V6428)))))) (= (hd (tl (hd (tl (hd (tl V6428)))))) (hd (tl (hd (tl (hd (tl (tl (tl V6428)))))))))))))))))))))))))))))))))))) (cons type (cons V6429 (tl (tl (hd (tl (tl (tl V6428))))))))) (true V6429)))

(defun shen.process-yacc-semantics (V6430) (cond ((cons? V6430) (map (lambda Z (shen.process-yacc-semantics Z)) V6430)) ((shen.non-terminal? V6430) (cons shen.<-out (cons (concat Parse V6430) ()))) (true V6430)))

(defun shen.<-out (V6435) (cond ((and (cons? V6435) (and (cons? (tl V6435)) (= () (tl (tl V6435))))) (hd (tl V6435))) (true (simple-error "implementation error in shen.<-out
"))))

(defun shen.in-> (V6440) (cond ((and (cons? V6440) (and (cons? (tl V6440)) (= () (tl (tl V6440))))) (hd V6440)) (true (simple-error "implementation error in shen.in->
"))))

(defun <!> (V6445) (cond ((and (cons? V6445) (and (cons? (tl V6445)) (= () (tl (tl V6445))))) (cons () (cons (hd V6445) ()))) (true (simple-error "implementation error in <!>
"))))

(defun <e> (V6450) (cond ((and (cons? V6450) (and (cons? (tl V6450)) (= () (tl (tl V6450))))) (cons (hd V6450) (cons () ()))) (true (simple-error "implementation error in <e>
"))))

(defun shen.<end> (V6453) (cond ((and (cons? V6453) (and (= () (hd V6453)) (and (cons? (tl V6453)) (= () (tl (tl V6453)))))) V6453) (true (shen.parse-failure))))

