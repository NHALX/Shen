(defun cl.kl-to-lisp (V6683) (cl.kl-to-lisp-h () V6683))

(defun cl.kl-to-lisp-h (V6691 V6692) (cond ((= T (MEMBER V6692 V6691)) V6692) ((and (cons? V6692) (and (= type (hd V6692)) (and (cons? (tl V6692)) (and (cons? (tl (tl V6692))) (= () (tl (tl (tl V6692)))))))) (cl.kl-to-lisp-h V6691 (hd (tl V6692)))) ((and (cons? V6692) (and (= protect (hd V6692)) (and (cons? (tl V6692)) (= () (tl (tl V6692)))))) (cl.kl-to-lisp-h V6691 (hd (tl V6692)))) ((and (cons? V6692) (and (= lambda (hd V6692)) (and (cons? (tl V6692)) (and (cons? (tl (tl V6692))) (and (= () (tl (tl (tl V6692)))) (= (hd (tl V6692)) T)))))) (cl.kl-to-lisp-h V6691 (cl.rectify-t V6692))) ((and (cons? V6692) (and (= lambda (hd V6692)) (and (cons? (tl V6692)) (and (cons? (tl (tl V6692))) (= () (tl (tl (tl V6692)))))))) (cons FUNCTION (cons (cons LAMBDA (cons (cons (hd (tl V6692)) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V6692)) V6691) (hd (tl (tl V6692)))) ()))) ()))) ((and (cons? V6692) (and (= let (hd V6692)) (and (cons? (tl V6692)) (and (cons? (tl (tl V6692))) (and (cons? (tl (tl (tl V6692)))) (and (= () (tl (tl (tl (tl V6692))))) (= (hd (tl V6692)) T))))))) (cl.kl-to-lisp-h V6691 (cl.rectify-t V6692))) ((and (cons? V6692) (and (= let (hd V6692)) (and (cons? (tl V6692)) (and (cons? (tl (tl V6692))) (and (cons? (tl (tl (tl V6692)))) (= () (tl (tl (tl (tl V6692)))))))))) (cons LET (cons (cons (cons (hd (tl V6692)) (cons (cl.kl-to-lisp-h V6691 (hd (tl (tl V6692)))) ())) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V6692)) V6691) (hd (tl (tl (tl V6692))))) ())))) ((and (cons? V6692) (and (= defun (hd V6692)) (and (cons? (tl V6692)) (and (cons? (tl (tl V6692))) (and (cons? (tl (tl (tl V6692)))) (= () (tl (tl (tl (tl V6692)))))))))) (cons DEFUN (cons (hd (tl V6692)) (cons (hd (tl (tl V6692))) (cons (cl.kl-to-lisp-h (hd (tl (tl V6692))) (hd (tl (tl (tl V6692))))) ()))))) ((and (cons? V6692) (= cond (hd V6692))) (cons COND (CL.MAPCAR (lambda Z6693 (cl.cond-code V6691 Z6693)) (tl V6692)))) ((and (cons? V6692) (or (= T (MEMBER (hd V6692) V6691)) (cons? (hd V6692)))) (let W6694 (CL.MAPCAR (lambda Z6695 (cl.kl-to-lisp-h V6691 Z6695)) V6692) (cl.currylisp W6694))) ((and (cons? V6692) (cl.fastsymbol? (hd V6692))) (let W6696 (CL.MAPCAR (lambda Z6697 (cl.kl-to-lisp-h V6691 Z6697)) (tl V6692)) (let W6698 (cl.maplispsym (hd V6692)) (cl.optimise-application (cons W6698 W6696))))) ((or (number? V6692) (or (string? V6692) (empty? V6692))) V6692) (true (cons QUOTE (cons V6692 ())))))

(defun cl.rectify-t (V6699) (SUBST (GENSYM "x") T V6699))

(defun cl.currylisp (V6700) (cond ((and (cons? V6700) (and (cons? (tl V6700)) (cons? (tl (tl V6700))))) (cl.currylisp (cons (cons FUNCALL (cons (hd V6700) (cons (hd (tl V6700)) ()))) (tl (tl V6700))))) ((and (cons? V6700) (and (cons? (tl V6700)) (= () (tl (tl V6700))))) (cons FUNCALL V6700)) ((and (cons? V6700) (= () (tl V6700))) (cons FUNCALL V6700)) (true V6700)))

(defun cl.optimise-application (V6701) (cond ((and (cons? V6701) (and (= protect (hd V6701)) (and (cons? (tl V6701)) (= () (tl (tl V6701)))))) (cl.optimise-application (hd (tl V6701)))) ((and (cons? V6701) (and (= hd (hd V6701)) (and (cons? (tl V6701)) (= () (tl (tl V6701)))))) (cons CAR (cons (cl.optimise-application (hd (tl V6701))) ()))) ((and (cons? V6701) (and (= tl (hd V6701)) (and (cons? (tl V6701)) (= () (tl (tl V6701)))))) (cons CDR (cons (cl.optimise-application (hd (tl V6701))) ()))) ((and (cons? V6701) (and (= cons (hd V6701)) (and (cons? (tl V6701)) (and (cons? (tl (tl V6701))) (= () (tl (tl (tl V6701)))))))) (cons CONS (cons (cl.optimise-application (hd (tl V6701))) (cons (cl.optimise-application (hd (tl (tl V6701)))) ())))) ((and (cons? V6701) (and (= append (hd V6701)) (and (cons? (tl V6701)) (and (cons? (tl (tl V6701))) (= () (tl (tl (tl V6701)))))))) (cons APPEND (cons (cl.optimise-application (hd (tl V6701))) (cons (cl.optimise-application (hd (tl (tl V6701)))) ())))) ((and (cons? V6701) (and (= reverse (hd V6701)) (and (cons? (tl V6701)) (= () (tl (tl V6701)))))) (cons REVERSE (cons (cl.optimise-application (hd (tl V6701))) ()))) ((and (cons? V6701) (and (= length (hd V6701)) (and (cons? (tl V6701)) (= () (tl (tl V6701)))))) (cons CL.LIST-LENGTH (cons (cl.optimise-application (hd (tl V6701))) ()))) ((and (cons? V6701) (and (= if (hd V6701)) (and (cons? (tl V6701)) (and (cons? (tl (tl V6701))) (and (cons? (tl (tl (tl V6701)))) (= () (tl (tl (tl (tl V6701)))))))))) (cons IF (cons (cl.wrap (hd (tl V6701))) (cons (cl.optimise-application (hd (tl (tl V6701)))) (cons (cl.optimise-application (hd (tl (tl (tl V6701))))) ()))))) ((and (cons? V6701) (and (= value (hd V6701)) (and (cons? (tl V6701)) (and (cons? (hd (tl V6701))) (and (cons? (tl (hd (tl V6701)))) (and (= () (tl (tl (hd (tl V6701))))) (and (= () (tl (tl V6701))) (= (hd (hd (tl V6701))) QUOTE)))))))) (hd (tl (hd (tl V6701))))) ((and (cons? V6701) (and (= map (hd V6701)) (and (cons? (tl V6701)) (and (cons? (tl (tl V6701))) (= () (tl (tl (tl V6701)))))))) (cons CL.MAPCAR (tl V6701))) ((and (cons? V6701) (and (= + (hd V6701)) (and (cons? (tl V6701)) (and (= 1 (hd (tl V6701))) (and (cons? (tl (tl V6701))) (= () (tl (tl (tl V6701))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl (tl V6701)))) ()))) ((and (cons? V6701) (and (= + (hd V6701)) (and (cons? (tl V6701)) (and (cons? (tl (tl V6701))) (and (= 1 (hd (tl (tl V6701)))) (= () (tl (tl (tl V6701))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl V6701))) ()))) ((and (cons? V6701) (and (= - (hd V6701)) (and (cons? (tl V6701)) (and (cons? (tl (tl V6701))) (and (= 1 (hd (tl (tl V6701)))) (= () (tl (tl (tl V6701))))))))) (cons (intern "1-") (cons (cl.optimise-application (hd (tl V6701))) ()))) ((cons? V6701) (CL.MAPCAR (lambda Z6702 (cl.optimise-application Z6702)) V6701)) (true V6701)))

(defun cl.cond-code (V6707 V6708) (cond ((and (cons? V6708) (and (cons? (tl V6708)) (= () (tl (tl V6708))))) (let W6709 (cl.wrap (cl.kl-to-lisp-h V6707 (hd V6708))) (let W6710 (cl.kl-to-lisp-h V6707 (hd (tl V6708))) (cons W6709 (cons W6710 ()))))) (true (simple-error "implementation error in shen.cond-code"))))

(defun cl.wrap (V6711) (cond ((and (cons? V6711) (and (cons? (tl V6711)) (and (= true (hd (tl V6711))) (and (= () (tl (tl V6711))) (= (hd V6711) QUOTE))))) T) ((and (cons? V6711) (and (= cons? (hd V6711)) (and (cons? (tl V6711)) (= () (tl (tl V6711)))))) (cons CONSP (tl V6711))) ((and (cons? V6711) (and (= string? (hd V6711)) (and (cons? (tl V6711)) (= () (tl (tl V6711)))))) (cons STRINGP (tl V6711))) ((and (cons? V6711) (and (= number? (hd V6711)) (and (cons? (tl V6711)) (= () (tl (tl V6711)))))) (cons NUMBERP (tl V6711))) ((and (cons? V6711) (and (= empty? (hd V6711)) (and (cons? (tl V6711)) (= () (tl (tl V6711)))))) (cons NULL (tl V6711))) ((and (cons? V6711) (and (= and (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (= () (tl (tl (tl V6711)))))))) (cons AND (cons (cl.wrap (hd (tl V6711))) (cons (cl.wrap (hd (tl (tl V6711)))) ())))) ((and (cons? V6711) (and (= or (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (= () (tl (tl (tl V6711)))))))) (cons OR (cons (cl.wrap (hd (tl V6711))) (cons (cl.wrap (hd (tl (tl V6711)))) ())))) ((and (cons? V6711) (and (= not (hd V6711)) (and (cons? (tl V6711)) (= () (tl (tl V6711)))))) (cons NOT (cons (cl.wrap (hd (tl V6711))) ()))) ((and (cons? V6711) (and (= cl.equal? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (and (= () (hd (tl (tl V6711)))) (= () (tl (tl (tl V6711))))))))) (cons NULL (cons (hd (tl V6711)) ()))) ((and (cons? V6711) (and (= cl.equal? (hd V6711)) (and (cons? (tl V6711)) (and (= () (hd (tl V6711))) (and (cons? (tl (tl V6711))) (= () (tl (tl (tl V6711))))))))) (cons NULL (tl (tl V6711)))) ((and (cons? V6711) (and (= cl.equal? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (and (cons? (hd (tl (tl V6711)))) (and (cons? (tl (hd (tl (tl V6711))))) (and (= () (tl (tl (hd (tl (tl V6711)))))) (and (= () (tl (tl (tl V6711)))) (and (= (hd (hd (tl (tl V6711)))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl (tl V6711))))))))))))))) (cons EQ (tl V6711))) ((and (cons? V6711) (and (= cl.equal? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (hd (tl V6711))) (and (cons? (tl (hd (tl V6711)))) (and (= () (tl (tl (hd (tl V6711))))) (and (cons? (tl (tl V6711))) (and (= () (tl (tl (tl V6711)))) (and (= (hd (hd (tl V6711))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl V6711)))))))))))))) (cons EQ (tl V6711))) ((and (cons? V6711) (and (= cl.equal? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (hd (tl V6711))) (and (= fail (hd (hd (tl V6711)))) (and (= () (tl (hd (tl V6711)))) (and (cons? (tl (tl V6711))) (= () (tl (tl (tl V6711))))))))))) (cons EQ (tl V6711))) ((and (cons? V6711) (and (= cl.equal? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (and (cons? (hd (tl (tl V6711)))) (and (= fail (hd (hd (tl (tl V6711))))) (and (= () (tl (hd (tl (tl V6711))))) (= () (tl (tl (tl V6711))))))))))) (cons EQ (tl V6711))) ((and (cons? V6711) (and (= cl.equal? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (and (= () (tl (tl (tl V6711)))) (string? (hd (tl V6711)))))))) (cons EQUAL (tl V6711))) ((and (cons? V6711) (and (= cl.equal? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (and (= () (tl (tl (tl V6711)))) (string? (hd (tl (tl V6711))))))))) (cons EQUAL (tl V6711))) ((and (cons? V6711) (and (= cl.equal? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (and (= () (tl (tl (tl V6711)))) (number? (hd (tl V6711)))))))) (cons EQUALP (tl V6711))) ((and (cons? V6711) (and (= cl.equal? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (and (= () (tl (tl (tl V6711)))) (number? (hd (tl (tl V6711))))))))) (cons EQUALP (tl V6711))) ((and (cons? V6711) (and (= cl.equal? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (= () (tl (tl (tl V6711)))))))) (cons cl.ABSEQUAL (tl V6711))) ((and (cons? V6711) (and (= cl.greater? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (= () (tl (tl (tl V6711)))))))) (cons > (tl V6711))) ((and (cons? V6711) (and (= cl.greater-than-or-equal-to? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (= () (tl (tl (tl V6711)))))))) (cons >= (tl V6711))) ((and (cons? V6711) (and (= cl.less? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (= () (tl (tl (tl V6711)))))))) (cons < (tl V6711))) ((and (cons? V6711) (and (= cl.less-than-or-equal-to? (hd V6711)) (and (cons? (tl V6711)) (and (cons? (tl (tl V6711))) (= () (tl (tl (tl V6711)))))))) (cons <= (tl V6711))) (true (cons cl.wrapper (cons V6711 ())))))

(defun cl.fastsymbol? (V6718) (cond ((cons? V6718) false) ((= () V6718) false) ((string? V6718) false) ((number? V6718) false) (true true)))

(defun cl.wrapper (V6719) (cond ((= true V6719) T) ((= false V6719) ()) (true (simple-error "boolean expected"))))

(defun cl.maplispsym (V6720) (cond ((= = V6720) cl.equal?) ((= > V6720) cl.greater?) ((= < V6720) cl.less?) ((= >= V6720) cl.greater-than-or-equal-to?) ((= <= V6720) cl.less-than-or-equal-to?) ((= + V6720) cl.add) ((= - V6720) cl.subtract) ((= / V6720) cl.divide) ((= * V6720) cl.multiply) (true V6720)))

