(defun cl.kl-to-lisp (V9932) (cl.kl-to-lisp-h () V9932))

(defun cl.kl-to-lisp-h (V9940 V9941) (cond ((= T (MEMBER V9941 V9940)) V9941) ((and (cons? V9941) (and (= type (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (= () (tl (tl (tl V9941)))))))) (cl.kl-to-lisp-h V9940 (hd (tl V9941)))) ((and (cons? V9941) (and (= protect (hd V9941)) (and (cons? (tl V9941)) (= () (tl (tl V9941)))))) (cl.kl-to-lisp-h V9940 (hd (tl V9941)))) ((and (cons? V9941) (and (= lambda (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (and (= () (tl (tl (tl V9941)))) (= (hd (tl V9941)) T)))))) (cl.kl-to-lisp-h V9940 (cl.rectify-t V9941))) ((and (cons? V9941) (and (= lambda (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (= () (tl (tl (tl V9941)))))))) (cons FUNCTION (cons (cons LAMBDA (cons (cons (hd (tl V9941)) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V9941)) V9940) (hd (tl (tl V9941)))) ()))) ()))) ((and (cons? V9941) (and (= let (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (and (cons? (tl (tl (tl V9941)))) (and (= () (tl (tl (tl (tl V9941))))) (= (hd (tl V9941)) T))))))) (cl.kl-to-lisp-h V9940 (cl.rectify-t V9941))) ((and (cons? V9941) (and (= let (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (and (cons? (tl (tl (tl V9941)))) (= () (tl (tl (tl (tl V9941)))))))))) (cons LET (cons (cons (cons (hd (tl V9941)) (cons (cl.kl-to-lisp-h V9940 (hd (tl (tl V9941)))) ())) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V9941)) V9940) (hd (tl (tl (tl V9941))))) ())))) ((and (cons? V9941) (and (= defun (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (and (cons? (tl (tl (tl V9941)))) (= () (tl (tl (tl (tl V9941)))))))))) (cons DEFUN (cons (hd (tl V9941)) (cons (hd (tl (tl V9941))) (cons (cl.kl-to-lisp-h (hd (tl (tl V9941))) (hd (tl (tl (tl V9941))))) ()))))) ((and (cons? V9941) (= cond (hd V9941))) (cons COND (CL.MAPCAR (lambda C (cl.cond-code V9940 C)) (tl V9941)))) ((and (cons? V9941) (or (= T (MEMBER (hd V9941) V9940)) (cons? (hd V9941)))) (let Lisp (CL.MAPCAR (lambda Y (cl.kl-to-lisp-h V9940 Y)) V9941) (cl.currylisp Lisp))) ((and (cons? V9941) (cl.fastsymbol? (hd V9941))) (let LispX (CL.MAPCAR (lambda Y (cl.kl-to-lisp-h V9940 Y)) (tl V9941)) (let LispF (cl.maplispsym (hd V9941)) (cl.optimise-application (cons LispF LispX))))) ((or (number? V9941) (or (string? V9941) (empty? V9941))) V9941) (true (cons QUOTE (cons V9941 ())))))

(defun cl.rectify-t (V9942) (SUBST (GENSYM "x") T V9942))

(defun cl.currylisp (V9943) (cond ((and (cons? V9943) (and (cons? (tl V9943)) (cons? (tl (tl V9943))))) (cl.currylisp (cons (cons FUNCALL (cons (hd V9943) (cons (hd (tl V9943)) ()))) (tl (tl V9943))))) ((and (cons? V9943) (and (cons? (tl V9943)) (= () (tl (tl V9943))))) (cons FUNCALL V9943)) ((and (cons? V9943) (= () (tl V9943))) (cons FUNCALL V9943)) (true V9943)))

(defun cl.optimise-application (V9944) (cond ((and (cons? V9944) (and (= protect (hd V9944)) (and (cons? (tl V9944)) (= () (tl (tl V9944)))))) (cl.optimise-application (hd (tl V9944)))) ((and (cons? V9944) (and (= hd (hd V9944)) (and (cons? (tl V9944)) (= () (tl (tl V9944)))))) (cons CAR (cons (cl.optimise-application (hd (tl V9944))) ()))) ((and (cons? V9944) (and (= tl (hd V9944)) (and (cons? (tl V9944)) (= () (tl (tl V9944)))))) (cons CDR (cons (cl.optimise-application (hd (tl V9944))) ()))) ((and (cons? V9944) (and (= cons (hd V9944)) (and (cons? (tl V9944)) (and (cons? (tl (tl V9944))) (= () (tl (tl (tl V9944)))))))) (cons CONS (cons (cl.optimise-application (hd (tl V9944))) (cons (cl.optimise-application (hd (tl (tl V9944)))) ())))) ((and (cons? V9944) (and (= append (hd V9944)) (and (cons? (tl V9944)) (and (cons? (tl (tl V9944))) (= () (tl (tl (tl V9944)))))))) (cons APPEND (cons (cl.optimise-application (hd (tl V9944))) (cons (cl.optimise-application (hd (tl (tl V9944)))) ())))) ((and (cons? V9944) (and (= reverse (hd V9944)) (and (cons? (tl V9944)) (= () (tl (tl V9944)))))) (cons REVERSE (cons (cl.optimise-application (hd (tl V9944))) ()))) ((and (cons? V9944) (and (= length (hd V9944)) (and (cons? (tl V9944)) (= () (tl (tl V9944)))))) (cons CL.LIST-LENGTH (cons (cl.optimise-application (hd (tl V9944))) ()))) ((and (cons? V9944) (and (= if (hd V9944)) (and (cons? (tl V9944)) (and (cons? (tl (tl V9944))) (and (cons? (tl (tl (tl V9944)))) (= () (tl (tl (tl (tl V9944)))))))))) (cons IF (cons (cl.wrap (hd (tl V9944))) (cons (cl.optimise-application (hd (tl (tl V9944)))) (cons (cl.optimise-application (hd (tl (tl (tl V9944))))) ()))))) ((and (cons? V9944) (and (= value (hd V9944)) (and (cons? (tl V9944)) (and (cons? (hd (tl V9944))) (and (cons? (tl (hd (tl V9944)))) (and (= () (tl (tl (hd (tl V9944))))) (and (= () (tl (tl V9944))) (= (hd (hd (tl V9944))) QUOTE)))))))) (hd (tl (hd (tl V9944))))) ((and (cons? V9944) (and (= map (hd V9944)) (and (cons? (tl V9944)) (and (cons? (tl (tl V9944))) (= () (tl (tl (tl V9944)))))))) (cons CL.MAPCAR (tl V9944))) ((and (cons? V9944) (and (= + (hd V9944)) (and (cons? (tl V9944)) (and (= 1 (hd (tl V9944))) (and (cons? (tl (tl V9944))) (= () (tl (tl (tl V9944))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl (tl V9944)))) ()))) ((and (cons? V9944) (and (= + (hd V9944)) (and (cons? (tl V9944)) (and (cons? (tl (tl V9944))) (and (= 1 (hd (tl (tl V9944)))) (= () (tl (tl (tl V9944))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl V9944))) ()))) ((and (cons? V9944) (and (= - (hd V9944)) (and (cons? (tl V9944)) (and (cons? (tl (tl V9944))) (and (= 1 (hd (tl (tl V9944)))) (= () (tl (tl (tl V9944))))))))) (cons (intern "1-") (cons (cl.optimise-application (hd (tl V9944))) ()))) ((cons? V9944) (CL.MAPCAR (lambda Z (cl.optimise-application Z)) V9944)) (true V9944)))

(defun cl.cond-code (V9949 V9950) (cond ((and (cons? V9950) (and (cons? (tl V9950)) (= () (tl (tl V9950))))) (let LispTest (cl.wrap (cl.kl-to-lisp-h V9949 (hd V9950))) (let LispResult (cl.kl-to-lisp-h V9949 (hd (tl V9950))) (cons LispTest (cons LispResult ()))))) (true (simple-error "implementation error in shen.cond-code"))))

(defun cl.wrap (V9951) (cond ((and (cons? V9951) (and (cons? (tl V9951)) (and (= true (hd (tl V9951))) (and (= () (tl (tl V9951))) (= (hd V9951) QUOTE))))) T) ((and (cons? V9951) (and (= cons? (hd V9951)) (and (cons? (tl V9951)) (= () (tl (tl V9951)))))) (cons CONSP (tl V9951))) ((and (cons? V9951) (and (= string? (hd V9951)) (and (cons? (tl V9951)) (= () (tl (tl V9951)))))) (cons STRINGP (tl V9951))) ((and (cons? V9951) (and (= number? (hd V9951)) (and (cons? (tl V9951)) (= () (tl (tl V9951)))))) (cons NUMBERP (tl V9951))) ((and (cons? V9951) (and (= empty? (hd V9951)) (and (cons? (tl V9951)) (= () (tl (tl V9951)))))) (cons NULL (tl V9951))) ((and (cons? V9951) (and (= and (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (= () (tl (tl (tl V9951)))))))) (cons AND (cons (cl.wrap (hd (tl V9951))) (cons (cl.wrap (hd (tl (tl V9951)))) ())))) ((and (cons? V9951) (and (= or (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (= () (tl (tl (tl V9951)))))))) (cons OR (cons (cl.wrap (hd (tl V9951))) (cons (cl.wrap (hd (tl (tl V9951)))) ())))) ((and (cons? V9951) (and (= not (hd V9951)) (and (cons? (tl V9951)) (= () (tl (tl V9951)))))) (cons NOT (cons (cl.wrap (hd (tl V9951))) ()))) ((and (cons? V9951) (and (= cl.equal? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (and (= () (hd (tl (tl V9951)))) (= () (tl (tl (tl V9951))))))))) (cons NULL (cons (hd (tl V9951)) ()))) ((and (cons? V9951) (and (= cl.equal? (hd V9951)) (and (cons? (tl V9951)) (and (= () (hd (tl V9951))) (and (cons? (tl (tl V9951))) (= () (tl (tl (tl V9951))))))))) (cons NULL (tl (tl V9951)))) ((and (cons? V9951) (and (= cl.equal? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (and (cons? (hd (tl (tl V9951)))) (and (cons? (tl (hd (tl (tl V9951))))) (and (= () (tl (tl (hd (tl (tl V9951)))))) (and (= () (tl (tl (tl V9951)))) (and (= (hd (hd (tl (tl V9951)))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl (tl V9951))))))))))))))) (cons EQ (tl V9951))) ((and (cons? V9951) (and (= cl.equal? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (hd (tl V9951))) (and (cons? (tl (hd (tl V9951)))) (and (= () (tl (tl (hd (tl V9951))))) (and (cons? (tl (tl V9951))) (and (= () (tl (tl (tl V9951)))) (and (= (hd (hd (tl V9951))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl V9951)))))))))))))) (cons EQ (tl V9951))) ((and (cons? V9951) (and (= cl.equal? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (hd (tl V9951))) (and (= fail (hd (hd (tl V9951)))) (and (= () (tl (hd (tl V9951)))) (and (cons? (tl (tl V9951))) (= () (tl (tl (tl V9951))))))))))) (cons EQ (tl V9951))) ((and (cons? V9951) (and (= cl.equal? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (and (cons? (hd (tl (tl V9951)))) (and (= fail (hd (hd (tl (tl V9951))))) (and (= () (tl (hd (tl (tl V9951))))) (= () (tl (tl (tl V9951))))))))))) (cons EQ (tl V9951))) ((and (cons? V9951) (and (= cl.equal? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (and (= () (tl (tl (tl V9951)))) (string? (hd (tl V9951)))))))) (cons EQUAL (tl V9951))) ((and (cons? V9951) (and (= cl.equal? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (and (= () (tl (tl (tl V9951)))) (string? (hd (tl (tl V9951))))))))) (cons EQUAL (tl V9951))) ((and (cons? V9951) (and (= cl.equal? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (and (= () (tl (tl (tl V9951)))) (number? (hd (tl V9951)))))))) (cons EQL (tl V9951))) ((and (cons? V9951) (and (= cl.equal? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (and (= () (tl (tl (tl V9951)))) (number? (hd (tl (tl V9951))))))))) (cons EQL (tl V9951))) ((and (cons? V9951) (and (= cl.equal? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (= () (tl (tl (tl V9951)))))))) (cons shen.ABSEQUAL (tl V9951))) ((and (cons? V9951) (and (= cl.greater? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (= () (tl (tl (tl V9951)))))))) (cons > (tl V9951))) ((and (cons? V9951) (and (= cl.greater-than-or-equal-to? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (= () (tl (tl (tl V9951)))))))) (cons >= (tl V9951))) ((and (cons? V9951) (and (= cl.less? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (= () (tl (tl (tl V9951)))))))) (cons < (tl V9951))) ((and (cons? V9951) (and (= cl.less-than-or-equal-to? (hd V9951)) (and (cons? (tl V9951)) (and (cons? (tl (tl V9951))) (= () (tl (tl (tl V9951)))))))) (cons <= (tl V9951))) (true (cons cl.wrapper (cons V9951 ())))))

(defun cl.fastsymbol? (V9958) (cond ((cons? V9958) false) ((= () V9958) false) ((string? V9958) false) ((number? V9958) false) (true true)))

(defun cl.wrapper (V9959) (cond ((= true V9959) T) ((= false V9959) ()) (true (simple-error "boolean expected"))))

(defun cl.maplispsym (V9960) (cond ((= = V9960) cl.equal?) ((= > V9960) cl.greater?) ((= < V9960) cl.less?) ((= >= V9960) cl.greater-than-or-equal-to?) ((= <= V9960) cl.less-than-or-equal-to?) ((= + V9960) cl.add) ((= - V9960) cl.subtract) ((= / V9960) cl.divide) ((= * V9960) cl.multiply) (true V9960)))

