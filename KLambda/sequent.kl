(defun shen.<datatype> (V9625) (let W9626 (if (shen.non-empty-stream? V9625) (let W9627 (shen.hds V9625) (let W9628 (shen.tls V9625) (let W9629 (shen.<datatype-rules> W9628) (if (shen.parse-failure? W9629) (shen.parse-failure) (shen.comb (shen.in-> W9629) (let W9630 (shen.rules->prolog W9627 (shen.<-out W9629)) (shen.remember-datatype W9627 (fn W9627)))))))) (shen.parse-failure)) (if (shen.parse-failure? W9626) (shen.parse-failure) W9626)))

(defun shen.<datatype-rules> (V9631) (let W9632 (let W9633 (shen.<datatype-rule> V9631) (if (shen.parse-failure? W9633) (shen.parse-failure) (let W9634 (shen.<datatype-rules> W9633) (if (shen.parse-failure? W9634) (shen.parse-failure) (shen.comb (shen.in-> W9634) (append (shen.<-out W9633) (shen.<-out W9634))))))) (if (shen.parse-failure? W9632) (let W9635 (let W9636 (<!> V9631) (if (shen.parse-failure? W9636) (shen.parse-failure) (shen.comb (shen.in-> W9636) (if (empty? (shen.<-out W9636)) () (simple-error (cn "datatype syntax error here:
 " (shen.app (shen.<-out W9636) "
 ..." shen.r))))))) (if (shen.parse-failure? W9635) (shen.parse-failure) W9635)) W9632)))

(defun shen.<datatype-rule> (V9637) (let W9638 (let W9639 (shen.<single> V9637) (if (shen.parse-failure? W9639) (shen.parse-failure) (shen.comb (shen.in-> W9639) (shen.<-out W9639)))) (if (shen.parse-failure? W9638) (let W9640 (let W9641 (shen.<double> V9637) (if (shen.parse-failure? W9641) (shen.parse-failure) (shen.comb (shen.in-> W9641) (shen.<-out W9641)))) (if (shen.parse-failure? W9640) (shen.parse-failure) W9640)) W9638)))

(defun shen.<single> (V9642) (let W9643 (let W9644 (shen.<sides> V9642) (if (shen.parse-failure? W9644) (shen.parse-failure) (let W9645 (shen.<prems> W9644) (if (shen.parse-failure? W9645) (shen.parse-failure) (let W9646 (shen.<sng> W9645) (if (shen.parse-failure? W9646) (shen.parse-failure) (let W9647 (shen.<conc> W9646) (if (shen.parse-failure? W9647) (shen.parse-failure) (let W9648 (shen.<sc> W9647) (if (shen.parse-failure? W9648) (shen.parse-failure) (shen.comb (shen.in-> W9648) (cons (cons (shen.<-out W9644) (cons (shen.<-out W9645) (cons (shen.<-out W9647) ()))) ())))))))))))) (if (shen.parse-failure? W9643) (shen.parse-failure) W9643)))

(defun shen.<double> (V9649) (let W9650 (let W9651 (shen.<sides> V9649) (if (shen.parse-failure? W9651) (shen.parse-failure) (let W9652 (shen.<formulae> W9651) (if (shen.parse-failure? W9652) (shen.parse-failure) (let W9653 (shen.<dbl> W9652) (if (shen.parse-failure? W9653) (shen.parse-failure) (let W9654 (shen.<formula> W9653) (if (shen.parse-failure? W9654) (shen.parse-failure) (let W9655 (shen.<sc> W9654) (if (shen.parse-failure? W9655) (shen.parse-failure) (shen.comb (shen.in-> W9655) (shen.lr-rule (shen.<-out W9651) (shen.<-out W9652) (cons () (cons (shen.<-out W9654) ())))))))))))))) (if (shen.parse-failure? W9650) (shen.parse-failure) W9650)))

(defun shen.<formulae> (V9656) (let W9657 (let W9658 (shen.<formula> V9656) (if (shen.parse-failure? W9658) (shen.parse-failure) (let W9659 (shen.<sc> W9658) (if (shen.parse-failure? W9659) (shen.parse-failure) (let W9660 (shen.<formulae> W9659) (if (shen.parse-failure? W9660) (shen.parse-failure) (shen.comb (shen.in-> W9660) (cons (cons () (cons (shen.<-out W9658) ())) (shen.<-out W9660))))))))) (if (shen.parse-failure? W9657) (let W9661 (let W9662 (shen.<formula> V9656) (if (shen.parse-failure? W9662) (shen.parse-failure) (let W9663 (shen.<sc> W9662) (if (shen.parse-failure? W9663) (shen.parse-failure) (shen.comb (shen.in-> W9663) (cons (cons () (cons (shen.<-out W9662) ())) ())))))) (if (shen.parse-failure? W9661) (shen.parse-failure) W9661)) W9657)))

(defun shen.<conc> (V9664) (let W9665 (let W9666 (shen.<ass> V9664) (if (shen.parse-failure? W9666) (shen.parse-failure) (if (shen.=hd? W9666 >>) (let W9667 (shen.tls W9666) (let W9668 (shen.<formula> W9667) (if (shen.parse-failure? W9668) (shen.parse-failure) (shen.comb (shen.in-> W9668) (cons (shen.<-out W9666) (cons (shen.<-out W9668) ())))))) (shen.parse-failure)))) (if (shen.parse-failure? W9665) (let W9669 (let W9670 (shen.<formula> V9664) (if (shen.parse-failure? W9670) (shen.parse-failure) (shen.comb (shen.in-> W9670) (cons () (cons (shen.<-out W9670) ()))))) (if (shen.parse-failure? W9669) (shen.parse-failure) W9669)) W9665)))

(defun shen.<prems> (V9671) (let W9672 (let W9673 (shen.<prem> V9671) (if (shen.parse-failure? W9673) (shen.parse-failure) (let W9674 (shen.<sc> W9673) (if (shen.parse-failure? W9674) (shen.parse-failure) (let W9675 (shen.<prems> W9674) (if (shen.parse-failure? W9675) (shen.parse-failure) (shen.comb (shen.in-> W9675) (cons (shen.<-out W9673) (shen.<-out W9675))))))))) (if (shen.parse-failure? W9672) (let W9676 (let W9677 (<e> V9671) (if (shen.parse-failure? W9677) (shen.parse-failure) (shen.comb (shen.in-> W9677) ()))) (if (shen.parse-failure? W9676) (shen.parse-failure) W9676)) W9672)))

(defun shen.<prem> (V9678) (let W9679 (if (shen.=hd? V9678 !) (let W9680 (shen.tls V9678) (shen.comb (shen.in-> W9680) !)) (shen.parse-failure)) (if (shen.parse-failure? W9679) (let W9681 (let W9682 (shen.<ass> V9678) (if (shen.parse-failure? W9682) (shen.parse-failure) (if (shen.=hd? W9682 >>) (let W9683 (shen.tls W9682) (let W9684 (shen.<formula> W9683) (if (shen.parse-failure? W9684) (shen.parse-failure) (shen.comb (shen.in-> W9684) (cons (shen.<-out W9682) (cons (shen.<-out W9684) ())))))) (shen.parse-failure)))) (if (shen.parse-failure? W9681) (let W9685 (let W9686 (shen.<formula> V9678) (if (shen.parse-failure? W9686) (shen.parse-failure) (shen.comb (shen.in-> W9686) (cons () (cons (shen.<-out W9686) ()))))) (if (shen.parse-failure? W9685) (shen.parse-failure) W9685)) W9681)) W9679)))

(defun shen.<ass> (V9687) (let W9688 (let W9689 (shen.<formula> V9687) (if (shen.parse-failure? W9689) (shen.parse-failure) (let W9690 (shen.<iscomma> W9689) (if (shen.parse-failure? W9690) (shen.parse-failure) (let W9691 (shen.<ass> W9690) (if (shen.parse-failure? W9691) (shen.parse-failure) (shen.comb (shen.in-> W9691) (cons (shen.<-out W9689) (shen.<-out W9691))))))))) (if (shen.parse-failure? W9688) (let W9692 (let W9693 (shen.<formula> V9687) (if (shen.parse-failure? W9693) (shen.parse-failure) (shen.comb (shen.in-> W9693) (cons (shen.<-out W9693) ())))) (if (shen.parse-failure? W9692) (let W9694 (let W9695 (<e> V9687) (if (shen.parse-failure? W9695) (shen.parse-failure) (shen.comb (shen.in-> W9695) ()))) (if (shen.parse-failure? W9694) (shen.parse-failure) W9694)) W9692)) W9688)))

(defun shen.<iscomma> (V9696) (let W9697 (if (shen.non-empty-stream? V9696) (let W9698 (shen.hds V9696) (let W9699 (shen.tls V9696) (if (= W9698 (intern ",")) (shen.comb (shen.in-> W9699) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W9697) (shen.parse-failure) W9697)))

(defun shen.<formula> (V9700) (let W9701 (let W9702 (shen.<expr> V9700) (if (shen.parse-failure? W9702) (shen.parse-failure) (let W9703 (shen.<iscolon> W9702) (if (shen.parse-failure? W9703) (shen.parse-failure) (let W9704 (shen.<type> W9703) (if (shen.parse-failure? W9704) (shen.parse-failure) (shen.comb (shen.in-> W9704) (cons (shen.curry (shen.<-out W9702)) (cons (intern ":") (cons (shen.rectify-type (shen.<-out W9704)) ())))))))))) (if (shen.parse-failure? W9701) (let W9705 (let W9706 (shen.<expr> V9700) (if (shen.parse-failure? W9706) (shen.parse-failure) (shen.comb (shen.in-> W9706) (shen.<-out W9706)))) (if (shen.parse-failure? W9705) (shen.parse-failure) W9705)) W9701)))

(defun shen.<iscolon> (V9707) (let W9708 (if (shen.non-empty-stream? V9707) (let W9709 (shen.hds V9707) (let W9710 (shen.tls V9707) (if (= W9709 (intern ":")) (shen.comb (shen.in-> W9710) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W9708) (shen.parse-failure) W9708)))

(defun shen.<sides> (V9711) (let W9712 (let W9713 (shen.<side> V9711) (if (shen.parse-failure? W9713) (shen.parse-failure) (let W9714 (shen.<sides> W9713) (if (shen.parse-failure? W9714) (shen.parse-failure) (shen.comb (shen.in-> W9714) (cons (shen.<-out W9713) (shen.<-out W9714))))))) (if (shen.parse-failure? W9712) (let W9715 (let W9716 (<e> V9711) (if (shen.parse-failure? W9716) (shen.parse-failure) (shen.comb (shen.in-> W9716) ()))) (if (shen.parse-failure? W9715) (shen.parse-failure) W9715)) W9712)))

(defun shen.<side> (V9717) (let W9718 (if (shen.=hd? V9717 if) (let W9719 (shen.tls V9717) (if (shen.non-empty-stream? W9719) (let W9720 (shen.hds W9719) (let W9721 (shen.tls W9719) (shen.comb (shen.in-> W9721) (cons if (cons W9720 ()))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W9718) (let W9722 (if (shen.=hd? V9717 let) (let W9723 (shen.tls V9717) (if (shen.non-empty-stream? W9723) (let W9724 (shen.hds W9723) (let W9725 (shen.tls W9723) (if (shen.non-empty-stream? W9725) (let W9726 (shen.hds W9725) (let W9727 (shen.tls W9725) (shen.comb (shen.in-> W9727) (cons let (cons W9724 (cons W9726 ())))))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W9722) (let W9728 (if (shen.=hd? V9717 shen.let!) (let W9729 (shen.tls V9717) (if (shen.non-empty-stream? W9729) (let W9730 (shen.hds W9729) (let W9731 (shen.tls W9729) (if (shen.non-empty-stream? W9731) (let W9732 (shen.hds W9731) (let W9733 (shen.tls W9731) (shen.comb (shen.in-> W9733) (cons shen.let! (cons W9730 (cons W9732 ())))))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W9728) (shen.parse-failure) W9728)) W9722)) W9718)))

(defun shen.lr-rule (V9740 V9741 V9742) (cond ((and (cons? V9742) (and (= () (hd V9742)) (and (cons? (tl V9742)) (= () (tl (tl V9742)))))) (let W9743 (gensym P) (let W9744 (cons (tl V9742) (cons W9743 ())) (let W9745 (cons (shen.coll-formulae V9741) (cons W9743 ())) (let W9746 (cons V9740 (cons (cons W9745 ()) (cons W9744 ()))) (let W9747 (cons V9740 (cons V9741 (cons V9742 ()))) (cons W9747 (cons W9746 ())))))))) (true (simple-error "implementation error in shen.lr-rule"))))

(defun shen.coll-formulae (V9750) (cond ((= () V9750) ()) ((and (cons? V9750) (and (cons? (hd V9750)) (and (= () (hd (hd V9750))) (and (cons? (tl (hd V9750))) (= () (tl (tl (hd V9750)))))))) (cons (hd (tl (hd V9750))) (shen.coll-formulae (tl V9750)))) (true (simple-error "implementation error in shen.coll-formulae"))))

(defun shen.<expr> (V9751) (let W9752 (if (shen.non-empty-stream? V9751) (let W9753 (shen.hds V9751) (let W9754 (shen.tls V9751) (if (not (shen.key-in-sequent-calculus? W9753)) (shen.comb (shen.in-> W9754) (macroexpand W9753)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W9752) (shen.parse-failure) W9752)))

(defun shen.key-in-sequent-calculus? (V9755) (or (element? V9755 (cons >> (cons (intern ";") (cons (intern ",") (cons (intern ":") (cons <-- ())))))) (or (shen.sng? V9755) (shen.dbl? V9755))))

(defun shen.<type> (V9756) (let W9757 (let W9758 (shen.<expr> V9756) (if (shen.parse-failure? W9758) (shen.parse-failure) (shen.comb (shen.in-> W9758) (shen.<-out W9758)))) (if (shen.parse-failure? W9757) (shen.parse-failure) W9757)))

(defun shen.<dbl> (V9759) (let W9760 (if (shen.non-empty-stream? V9759) (let W9761 (shen.hds V9759) (let W9762 (shen.tls V9759) (if (shen.dbl? W9761) (shen.comb (shen.in-> W9762) W9761) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W9760) (shen.parse-failure) W9760)))

(defun shen.<sng> (V9763) (let W9764 (if (shen.non-empty-stream? V9763) (let W9765 (shen.hds V9763) (let W9766 (shen.tls V9763) (if (shen.sng? W9765) (shen.comb (shen.in-> W9766) W9765) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W9764) (shen.parse-failure) W9764)))

(defun shen.sng? (V9767) (and (symbol? V9767) (shen.sng-h? (str V9767))))

(defun shen.sng-h? (V9770) (cond ((= "___" V9770) true) ((and (shen.+string? V9770) (= "_" (hdstr V9770))) (shen.sng-h? (tlstr V9770))) (true false)))

(defun shen.dbl? (V9771) (and (symbol? V9771) (shen.dbl-h? (str V9771))))

(defun shen.dbl-h? (V9774) (cond ((= "===" V9774) true) ((and (shen.+string? V9774) (= "=" (hdstr V9774))) (shen.dbl-h? (tlstr V9774))) (true false)))

(defun shen.remember-datatype (V9775 V9776) (do (set shen.*datatypes* (shen.assoc-> V9775 V9776 (value shen.*datatypes*))) (do (set shen.*alldatatypes* (shen.assoc-> V9775 V9776 (value shen.*alldatatypes*))) V9775)))

(defun shen.rules->prolog (V9777 V9778) (let W9779 (mapcan (lambda Z9780 (shen.rule->clause Z9780)) V9778) (eval (cons defprolog (cons V9777 W9779)))))

(defun shen.rule->clause (V9783) (cond ((and (cons? V9783) (and (cons? (tl V9783)) (and (cons? (tl (tl V9783))) (and (cons? (hd (tl (tl V9783)))) (and (cons? (tl (hd (tl (tl V9783))))) (and (= () (tl (tl (hd (tl (tl V9783)))))) (= () (tl (tl (tl V9783)))))))))) (let W9784 (shen.extract-vars V9783) (let W9785 (append (shen.nvars (length (hd (hd (tl (tl V9783)))))) (cons Delta ())) (let W9786 (shen.extract-vars (hd (tl (hd (tl (tl V9783)))))) (let W9787 (shen.compile-consequent (hd (tl (hd (tl (tl V9783))))) W9785) (let W9788 (shen.goals W9784 (hd (hd (tl (tl V9783)))) (hd V9783) (hd (tl V9783)) W9785 W9786) (append W9787 (append (cons <-- ()) (append W9788 (cons (intern ";") ())))))))))) (true (simple-error "implementation error in shen.rule->clause"))))

(defun shen.compile-consequent (V9795 V9796) (cond ((cons? V9796) (cons (shen.optimise-typing V9795) (cons (hd V9796) ()))) (true (simple-error "implementation error in shen.compile-consequent"))))

(defun shen.nvars (V9797) (cond ((= 0 V9797) ()) (true (cons (gensym V) (shen.nvars (- V9797 1))))))

(defun shen.optimise-typing (V9798) (cond ((and (cons? V9798) (and (cons? (tl V9798)) (and (cons? (tl (tl V9798))) (and (= () (tl (tl (tl V9798)))) (= (hd (tl V9798)) (intern ":")))))) (let W9799 (shen.expand-mode-forms (cons - (cons (cons (hd V9798) (cons (hd (tl V9798)) (cons (cons + (tl (tl V9798))) ()))) ()))) (shen.cons-form-with-modes W9799))) (true (let W9800 (shen.expand-mode-forms (cons + (cons V9798 ()))) (shen.cons-form-with-modes W9800)))))

(defun shen.expand-mode-forms (V9801) (cond ((and (cons? V9801) (and (= + (hd V9801)) (and (cons? (tl V9801)) (= () (tl (tl V9801)))))) (cons mode (cons (shen.expand-mode-forms (hd (tl V9801))) (cons + ())))) ((and (cons? V9801) (and (= - (hd V9801)) (and (cons? (tl V9801)) (= () (tl (tl V9801)))))) (cons mode (cons (shen.expand-mode-forms (hd (tl V9801))) (cons - ())))) ((cons? V9801) (map (lambda Z9802 (shen.expand-mode-forms Z9802)) V9801)) (true V9801)))

(defun shen.cons-form-with-modes (V9803) (cond ((and (cons? V9803) (and (= mode (hd V9803)) (and (cons? (tl V9803)) (and (cons? (tl (tl V9803))) (= () (tl (tl (tl V9803)))))))) (cons (hd (tl (tl V9803))) (cons (shen.cons-form-with-modes (hd (tl V9803))) ()))) ((and (cons? V9803) (and (= bar! (hd V9803)) (and (cons? (tl V9803)) (= () (tl (tl V9803)))))) (hd (tl V9803))) ((cons? V9803) (cons cons (cons (shen.cons-form-with-modes (hd V9803)) (cons (shen.cons-form-with-modes (tl V9803)) ())))) (true V9803)))

(defun shen.goals (V9804 V9805 V9806 V9807 V9808 V9809) (let W9810 (shen.compile-assumptions V9805 V9804 V9808 V9809) (let W9811 (shen.compile-side-conditions V9806) (let W9812 (shen.compile-premises V9807 V9808) (append W9810 (append W9811 W9812))))))

(defun shen.compile-assumptions (V9827 V9828 V9829 V9830) (cond ((= () V9827) ()) ((and (cons? V9827) (and (cons? V9829) (cons? (tl V9829)))) (let W9831 (append (shen.extract-vars (hd V9827)) V9830) (cons (shen.compile-assumption (hd V9827) (hd V9829) (hd (tl V9829)) V9828 V9830) (shen.compile-assumptions (tl V9827) V9828 (tl V9829) W9831)))) (true (simple-error "implementation error in shen.compile-assumptions"))))

(defun shen.compile-assumption (V9832 V9833 V9834 V9835 V9836) (let W9837 (gensym shen.search) (let W9838 (shen.compile-search-procedure W9837 V9832 V9833 V9834 V9835 V9836) (cons W9837 (cons V9833 (cons () (cons V9834 V9835)))))))

(defun shen.compile-search-procedure (V9839 V9840 V9841 V9842 V9843 V9844) (let W9845 (gensym Previous) (let W9846 (shen.foundit! V9840 V9841 W9845 V9842 V9843 V9844) (let W9847 (shen.keep-looking V9839 V9841 W9845 V9842 V9843) (eval (cons defprolog (cons V9839 (append W9846 W9847))))))))

(defun shen.foundit! (V9848 V9849 V9850 V9851 V9852 V9853) (let W9854 (shen.passive V9848 V9853) (let W9855 (shen.tabulate-passive W9854) (let W9856 (shen.head-foundit! V9848 V9849 V9850 V9851 V9852 W9855) (let W9857 (shen.body-foundit! V9849 V9850 V9851 W9855) (append W9856 (append (cons <-- ()) (append W9857 (cons (intern ";") ())))))))))

(defun shen.keep-looking (V9858 V9859 V9860 V9861 V9862) (let W9863 (gensym V) (let W9864 (cons (cons - (cons (cons cons (cons W9863 (cons V9859 ()))) ())) (cons V9860 (cons V9861 V9862))) (let W9865 (cons (cons V9858 (cons V9859 (cons (cons cons (cons W9863 (cons V9860 ()))) (cons V9861 V9862)))) ()) (append W9864 (append (cons <-- ()) (append W9865 (cons (intern ";") ()))))))))

(defun shen.passive (V9870 V9871) (cond ((cons? V9870) (union (shen.passive (hd V9870) V9871) (shen.passive (tl V9870) V9871))) ((shen.passive? V9870 V9871) (cons V9870 ())) (true ())))

(defun shen.passive? (V9872 V9873) (and (not (element? V9872 V9873)) (variable? V9872)))

(defun shen.tabulate-passive (V9874) (map (lambda Z9875 (cons Z9875 (gensym V))) V9874))

(defun shen.head-foundit! (V9876 V9877 V9878 V9879 V9880 V9881) (let W9882 (shen.optimise-passive V9880 V9881) (cons (cons - (cons (cons cons (cons (shen.optimise-typing V9876) (cons V9877 ()))) ())) (cons V9878 (cons V9879 W9882)))))

(defun shen.optimise-passive (V9883 V9884) (map (lambda Z9885 (shen.optimise-passive-h Z9885 V9884)) V9883))

(defun shen.optimise-passive-h (V9886 V9887) (let W9888 (assoc V9886 V9887) (if (empty? W9888) V9886 (tl W9888))))

(defun shen.body-foundit! (V9897 V9898 V9899 V9900) (cond ((= () V9900) (cons (cons bind (cons V9899 (cons (cons append (cons (cons 1 (cons V9898 ())) (cons (cons 1 (cons V9897 ())) ()))) ()))) ())) ((and (cons? V9900) (cons? (hd V9900))) (cons (cons bind (cons (tl (hd V9900)) (cons (hd (hd V9900)) ()))) (shen.body-foundit! V9897 V9898 V9899 (tl V9900)))) (true (simple-error "implementation error in shen.body-foundit!"))))

(defun shen.compile-side-conditions (V9901) (map (lambda Z9902 (shen.compile-side-condition Z9902)) V9901))

(defun shen.compile-side-condition (V9905) (cond ((and (cons? V9905) (and (= let (hd V9905)) (and (cons? (tl V9905)) (and (cons? (tl (tl V9905))) (= () (tl (tl (tl V9905)))))))) (cons is (tl V9905))) ((and (cons? V9905) (and (= shen.let! (hd V9905)) (and (cons? (tl V9905)) (and (cons? (tl (tl V9905))) (= () (tl (tl (tl V9905)))))))) (cons is! (tl V9905))) ((and (cons? V9905) (and (= if (hd V9905)) (and (cons? (tl V9905)) (= () (tl (tl V9905)))))) (cons when (tl V9905))) (true (simple-error "implementation error in shen.compile-side-condition"))))

(defun shen.compile-premises (V9906 V9907) (let W9908 (hd (reverse V9907)) (map (lambda Z9909 (shen.compile-premise Z9909 W9908)) V9906)))

(defun shen.compile-premise (V9916 V9917) (cond ((= ! V9916) !) ((and (cons? V9916) (and (cons? (tl V9916)) (= () (tl (tl V9916))))) (shen.compile-premise-h (reverse (hd V9916)) (hd (tl V9916)) V9917)) (true (simple-error "implementation error in shen.premise"))))

(defun shen.compile-premise-h (V9924 V9925 V9926) (cond ((= () V9924) (cons shen.system-S (cons (shen.cons-form-no-modes V9925) (cons V9926 ())))) ((cons? V9924) (shen.compile-premise-h (tl V9924) V9925 (cons cons (cons (shen.cons-form-no-modes (hd V9924)) (cons V9926 ()))))) (true (simple-error "implementation error in shen.compile-premise-h"))))

(defun shen.cons-form-no-modes (V9927) (cond ((and (cons? V9927) (and (= bar! (hd V9927)) (and (cons? (tl V9927)) (= () (tl (tl V9927)))))) (hd (tl V9927))) ((cons? V9927) (cons cons (cons (shen.cons-form-no-modes (hd V9927)) (cons (shen.cons-form-no-modes (tl V9927)) ())))) (true V9927)))

(defun preclude (V9928) (let W9929 (map (lambda Z9930 (shen.intern-type Z9930)) V9928) (let W9931 (value shen.*datatypes*) (let W9932 (shen.remove-datatypes W9929 W9931) (let W9933 (set shen.*datatypes* W9932) (shen.show-datatypes W9933))))))

(defun shen.remove-datatypes (V9938 V9939) (cond ((= () V9938) V9939) ((cons? V9938) (shen.remove-datatypes (tl V9938) (shen.unassoc (hd V9938) V9939))) (true (simple-error "implementation error in shen.remove-datatypes"))))

(defun shen.unassoc (V9949 V9950) (cond ((= () V9950) ()) ((and (cons? V9950) (and (cons? (hd V9950)) (= V9949 (hd (hd V9950))))) (tl V9950)) ((cons? V9950) (cons (hd V9950) (shen.unassoc V9949 (tl V9950)))) (true (simple-error "implementation error in shen.unassoc"))))

(defun shen.show-datatypes (V9951) (map (lambda Z9952 (hd Z9952)) V9951))

(defun include (V9953) (let W9954 (map (lambda Z9955 (shen.intern-type Z9955)) V9953) (let W9956 (map (lambda Z9957 (shen.remember-datatype Z9957 (fn Z9957))) W9954) (let W9958 (value shen.*datatypes*) (shen.show-datatypes W9958)))))

(defun preclude-all-but (V9959) (let W9960 (set shen.*datatypes* ()) (let W9961 (map (lambda Z9962 (shen.intern-type Z9962)) V9959) (let W9963 (map (lambda Z9964 (shen.remember-datatype Z9964 (fn Z9964))) W9961) (shen.show-datatypes (value shen.*datatypes*))))))

(defun include-all-but (V9965) (let W9966 (map (lambda Z9967 (shen.intern-type Z9967)) V9965) (let W9968 (value shen.*alldatatypes*) (let W9969 (set shen.*datatypes* (shen.remove-datatypes W9966 W9968)) (shen.show-datatypes W9969)))))

