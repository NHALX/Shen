(defun shen.<datatype> (V8397) (let Result (if (shen.non-empty-stream? V8397) (let D (shen.hds V8397) (let News8257 (shen.tls V8397) (let Parseshen.<datatype-rules> (shen.<datatype-rules> News8257) (if (shen.parse-failure? Parseshen.<datatype-rules>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<datatype-rules>) (let Prolog (shen.rules->prolog D (shen.<-out Parseshen.<datatype-rules>)) (shen.remember-datatype D (fn D)))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<datatype-rules> (V8398) (let Result (let Parseshen.<datatype-rule> (shen.<datatype-rule> V8398) (if (shen.parse-failure? Parseshen.<datatype-rule>) (shen.parse-failure) (let Parseshen.<datatype-rules> (shen.<datatype-rules> Parseshen.<datatype-rule>) (if (shen.parse-failure? Parseshen.<datatype-rules>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<datatype-rules>) (append (shen.<-out Parseshen.<datatype-rule>) (shen.<-out Parseshen.<datatype-rules>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<!> (<!> V8398) (if (shen.parse-failure? Parse<!>) (shen.parse-failure) (shen.comb (shen.in-> Parse<!>) (if (empty? (shen.<-out Parse<!>)) () (simple-error (cn "datatype syntax error here:
 " (shen.app (shen.<-out Parse<!>) "
 ..." shen.r))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<datatype-rule> (V8399) (let Result (let Parseshen.<single> (shen.<single> V8399) (if (shen.parse-failure? Parseshen.<single>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<single>) (shen.<-out Parseshen.<single>)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<double> (shen.<double> V8399) (if (shen.parse-failure? Parseshen.<double>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<double>) (shen.<-out Parseshen.<double>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<single> (V8400) (let Result (let Parseshen.<sides> (shen.<sides> V8400) (if (shen.parse-failure? Parseshen.<sides>) (shen.parse-failure) (let Parseshen.<prems> (shen.<prems> Parseshen.<sides>) (if (shen.parse-failure? Parseshen.<prems>) (shen.parse-failure) (let Parseshen.<sng> (shen.<sng> Parseshen.<prems>) (if (shen.parse-failure? Parseshen.<sng>) (shen.parse-failure) (let Parseshen.<conc> (shen.<conc> Parseshen.<sng>) (if (shen.parse-failure? Parseshen.<conc>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<conc>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (cons (cons (shen.<-out Parseshen.<sides>) (cons (shen.<-out Parseshen.<prems>) (cons (shen.<-out Parseshen.<conc>) ()))) ())))))))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<double> (V8401) (let Result (let Parseshen.<sides> (shen.<sides> V8401) (if (shen.parse-failure? Parseshen.<sides>) (shen.parse-failure) (let Parseshen.<formulae> (shen.<formulae> Parseshen.<sides>) (if (shen.parse-failure? Parseshen.<formulae>) (shen.parse-failure) (let Parseshen.<dbl> (shen.<dbl> Parseshen.<formulae>) (if (shen.parse-failure? Parseshen.<dbl>) (shen.parse-failure) (let Parseshen.<formula> (shen.<formula> Parseshen.<dbl>) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<formula>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (shen.lr-rule (shen.<-out Parseshen.<sides>) (shen.<-out Parseshen.<formulae>) (cons () (cons (shen.<-out Parseshen.<formula>) ())))))))))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<formulae> (V8402) (let Result (let Parseshen.<formula> (shen.<formula> V8402) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<formula>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (let Parseshen.<formulae> (shen.<formulae> Parseshen.<sc>) (if (shen.parse-failure? Parseshen.<formulae>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<formulae>) (cons (cons () (cons (shen.<-out Parseshen.<formula>) ())) (shen.<-out Parseshen.<formulae>))))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<formula> (shen.<formula> V8402) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<formula>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (cons (cons () (cons (shen.<-out Parseshen.<formula>) ())) ())))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<conc> (V8403) (let Result (let Parseshen.<ass> (shen.<ass> V8403) (if (shen.parse-failure? Parseshen.<ass>) (shen.parse-failure) (if (shen.=hd? Parseshen.<ass> >>) (let News8264 (shen.tls Parseshen.<ass>) (let Parseshen.<formula> (shen.<formula> News8264) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<formula>) (cons (shen.<-out Parseshen.<ass>) (cons (shen.<-out Parseshen.<formula>) ())))))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<formula> (shen.<formula> V8403) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<formula>) (cons () (cons (shen.<-out Parseshen.<formula>) ()))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<prems> (V8404) (let Result (let Parseshen.<prem> (shen.<prem> V8404) (if (shen.parse-failure? Parseshen.<prem>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<prem>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (let Parseshen.<prems> (shen.<prems> Parseshen.<sc>) (if (shen.parse-failure? Parseshen.<prems>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<prems>) (cons (shen.<-out Parseshen.<prem>) (shen.<-out Parseshen.<prems>))))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V8404) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<prem> (V8405) (let Result (if (shen.=hd? V8405 !) (let News8267 (shen.tls V8405) (shen.comb (shen.in-> News8267) !)) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (let Parseshen.<ass> (shen.<ass> V8405) (if (shen.parse-failure? Parseshen.<ass>) (shen.parse-failure) (if (shen.=hd? Parseshen.<ass> >>) (let News8268 (shen.tls Parseshen.<ass>) (let Parseshen.<formula> (shen.<formula> News8268) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<formula>) (cons (shen.<-out Parseshen.<ass>) (cons (shen.<-out Parseshen.<formula>) ())))))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<formula> (shen.<formula> V8405) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<formula>) (cons () (cons (shen.<-out Parseshen.<formula>) ()))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)))

(defun shen.<ass> (V8406) (let Result (let Parseshen.<formula> (shen.<formula> V8406) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (let Parseshen.<iscomma> (shen.<iscomma> Parseshen.<formula>) (if (shen.parse-failure? Parseshen.<iscomma>) (shen.parse-failure) (let Parseshen.<ass> (shen.<ass> Parseshen.<iscomma>) (if (shen.parse-failure? Parseshen.<ass>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<ass>) (cons (shen.<-out Parseshen.<formula>) (shen.<-out Parseshen.<ass>))))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<formula> (shen.<formula> V8406) (if (shen.parse-failure? Parseshen.<formula>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<formula>) (cons (shen.<-out Parseshen.<formula>) ())))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V8406) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)))

(defun shen.<iscomma> (V8407) (let Result (if (shen.non-empty-stream? V8407) (let X (shen.hds V8407) (let News8271 (shen.tls V8407) (if (= X (intern ",")) (shen.comb (shen.in-> News8271) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<formula> (V8408) (let Result (let Parseshen.<expr> (shen.<expr> V8408) (if (shen.parse-failure? Parseshen.<expr>) (shen.parse-failure) (let Parseshen.<iscolon> (shen.<iscolon> Parseshen.<expr>) (if (shen.parse-failure? Parseshen.<iscolon>) (shen.parse-failure) (let Parseshen.<type> (shen.<type> Parseshen.<iscolon>) (if (shen.parse-failure? Parseshen.<type>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<type>) (cons (shen.curry (shen.<-out Parseshen.<expr>)) (cons (intern ":") (cons (shen.rectify-type (shen.<-out Parseshen.<type>)) ())))))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<expr> (shen.<expr> V8408) (if (shen.parse-failure? Parseshen.<expr>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<expr>) (shen.<-out Parseshen.<expr>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<iscolon> (V8409) (let Result (if (shen.non-empty-stream? V8409) (let X (shen.hds V8409) (let News8274 (shen.tls V8409) (if (= X (intern ":")) (shen.comb (shen.in-> News8274) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<sides> (V8410) (let Result (let Parseshen.<side> (shen.<side> V8410) (if (shen.parse-failure? Parseshen.<side>) (shen.parse-failure) (let Parseshen.<sides> (shen.<sides> Parseshen.<side>) (if (shen.parse-failure? Parseshen.<sides>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sides>) (cons (shen.<-out Parseshen.<side>) (shen.<-out Parseshen.<sides>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V8410) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<side> (V8411) (let Result (if (shen.=hd? V8411 if) (let News8277 (shen.tls V8411) (if (shen.non-empty-stream? News8277) (let P (shen.hds News8277) (let News8278 (shen.tls News8277) (shen.comb (shen.in-> News8278) (cons if (cons P ()))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.=hd? V8411 let) (let News8279 (shen.tls V8411) (if (shen.non-empty-stream? News8279) (let X (shen.hds News8279) (let News8280 (shen.tls News8279) (if (shen.non-empty-stream? News8280) (let Y (shen.hds News8280) (let News8281 (shen.tls News8280) (shen.comb (shen.in-> News8281) (cons let (cons X (cons Y ())))))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.=hd? V8411 shen.let!) (let News8282 (shen.tls V8411) (if (shen.non-empty-stream? News8282) (let X (shen.hds News8282) (let News8283 (shen.tls News8282) (if (shen.non-empty-stream? News8283) (let Y (shen.hds News8283) (let News8284 (shen.tls News8283) (shen.comb (shen.in-> News8284) (cons shen.let! (cons X (cons Y ())))))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)))

(defun shen.lr-rule (V8418 V8419 V8420) (cond ((and (cons? V8420) (and (= () (hd V8420)) (and (cons? (tl V8420)) (= () (tl (tl V8420)))))) (let P (gensym P) (let LConc (cons (tl V8420) (cons P ())) (let LPrem (cons (shen.coll-formulae V8419) (cons P ())) (let Left (cons V8418 (cons (cons LPrem ()) (cons LConc ()))) (let Right (cons V8418 (cons V8419 (cons V8420 ()))) (cons Right (cons Left ())))))))) (true (simple-error "implementation error in shen.lr-rule"))))

(defun shen.coll-formulae (V8423) (cond ((= () V8423) ()) ((and (cons? V8423) (and (cons? (hd V8423)) (and (= () (hd (hd V8423))) (and (cons? (tl (hd V8423))) (= () (tl (tl (hd V8423)))))))) (cons (hd (tl (hd V8423))) (shen.coll-formulae (tl V8423)))) (true (simple-error "implementation error in shen.coll-formulae"))))

(defun shen.<expr> (V8424) (let Result (if (shen.non-empty-stream? V8424) (let X (shen.hds V8424) (let News8286 (shen.tls V8424) (if (not (shen.key-in-sequent-calculus? X)) (shen.comb (shen.in-> News8286) (macroexpand X)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.key-in-sequent-calculus? (V8425) (or (element? V8425 (cons >> (cons (intern ";") (cons (intern ",") (cons (intern ":") (cons <-- ())))))) (or (shen.sng? V8425) (shen.dbl? V8425))))

(defun shen.<type> (V8426) (let Result (let Parseshen.<expr> (shen.<expr> V8426) (if (shen.parse-failure? Parseshen.<expr>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<expr>) (shen.<-out Parseshen.<expr>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<dbl> (V8427) (let Result (if (shen.non-empty-stream? V8427) (let X (shen.hds V8427) (let News8289 (shen.tls V8427) (if (shen.dbl? X) (shen.comb (shen.in-> News8289) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<sng> (V8428) (let Result (if (shen.non-empty-stream? V8428) (let X (shen.hds V8428) (let News8291 (shen.tls V8428) (if (shen.sng? X) (shen.comb (shen.in-> News8291) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.sng? (V8429) (and (symbol? V8429) (shen.sng-h? (str V8429))))

(defun shen.sng-h? (V8432) (cond ((= "___" V8432) true) ((and (shen.+string? V8432) (= "_" (hdstr V8432))) (shen.sng-h? (tlstr V8432))) (true false)))

(defun shen.dbl? (V8433) (and (symbol? V8433) (shen.dbl-h? (str V8433))))

(defun shen.dbl-h? (V8436) (cond ((= "===" V8436) true) ((and (shen.+string? V8436) (= "=" (hdstr V8436))) (shen.dbl-h? (tlstr V8436))) (true false)))

(defun shen.remember-datatype (V8437 V8438) (do (set shen.*datatypes* (shen.assoc-> V8437 V8438 (value shen.*datatypes*))) (do (set shen.*alldatatypes* (shen.assoc-> V8437 V8438 (value shen.*alldatatypes*))) V8437)))

(defun shen.rules->prolog (V8439 V8440) (let Clauses (mapcan (lambda Rule (shen.rule->clause Rule)) V8440) (eval (cons defprolog (cons V8439 Clauses)))))

(defun shen.rule->clause (V8443) (cond ((and (cons? V8443) (and (cons? (tl V8443)) (and (cons? (tl (tl V8443))) (and (cons? (hd (tl (tl V8443)))) (and (cons? (tl (hd (tl (tl V8443))))) (and (= () (tl (tl (hd (tl (tl V8443)))))) (= () (tl (tl (tl V8443)))))))))) (let Constraints (shen.extract-vars V8443) (let HypVs (append (shen.nvars (length (hd (hd (tl (tl V8443)))))) (cons Delta ())) (let Active (shen.extract-vars (hd (tl (hd (tl (tl V8443)))))) (let Head (shen.compile-consequent (hd (tl (hd (tl (tl V8443))))) HypVs) (let Goals (shen.goals Constraints (hd (hd (tl (tl V8443)))) (hd V8443) (hd (tl V8443)) HypVs Active) (append Head (append (cons <-- ()) (append Goals (cons (intern ";") ())))))))))) (true (simple-error "implementation error in shen.rule->clause"))))

(defun shen.compile-consequent (V8450 V8451) (cond ((cons? V8451) (cons (shen.optimise-typing V8450) (cons (hd V8451) ()))) (true (simple-error "implementation error in shen.compile-consequent"))))

(defun shen.nvars (V8452) (cond ((= 0 V8452) ()) (true (cons (gensym V) (shen.nvars (- V8452 1))))))

(defun shen.optimise-typing (V8453) (cond ((and (cons? V8453) (and (cons? (tl V8453)) (and (cons? (tl (tl V8453))) (and (= () (tl (tl (tl V8453)))) (= (hd (tl V8453)) (intern ":")))))) (let Expand (shen.expand-mode-forms (cons - (cons (cons (hd V8453) (cons (hd (tl V8453)) (cons (cons + (tl (tl V8453))) ()))) ()))) (shen.cons-form-with-modes Expand))) (true (let Expand (shen.expand-mode-forms (cons + (cons V8453 ()))) (shen.cons-form-with-modes Expand)))))

(defun shen.expand-mode-forms (V8454) (cond ((and (cons? V8454) (and (= + (hd V8454)) (and (cons? (tl V8454)) (= () (tl (tl V8454)))))) (cons mode (cons (shen.expand-mode-forms (hd (tl V8454))) (cons + ())))) ((and (cons? V8454) (and (= - (hd V8454)) (and (cons? (tl V8454)) (= () (tl (tl V8454)))))) (cons mode (cons (shen.expand-mode-forms (hd (tl V8454))) (cons - ())))) ((cons? V8454) (map (lambda Z (shen.expand-mode-forms Z)) V8454)) (true V8454)))

(defun shen.cons-form-with-modes (V8455) (cond ((and (cons? V8455) (and (= mode (hd V8455)) (and (cons? (tl V8455)) (and (cons? (tl (tl V8455))) (= () (tl (tl (tl V8455)))))))) (cons (hd (tl (tl V8455))) (cons (shen.cons-form-with-modes (hd (tl V8455))) ()))) ((and (cons? V8455) (and (= bar! (hd V8455)) (and (cons? (tl V8455)) (= () (tl (tl V8455)))))) (hd (tl V8455))) ((cons? V8455) (cons cons (cons (shen.cons-form-with-modes (hd V8455)) (cons (shen.cons-form-with-modes (tl V8455)) ())))) (true V8455)))

(defun shen.goals (V8456 V8457 V8458 V8459 V8460 V8461) (let GoalsAs (shen.compile-assumptions V8457 V8456 V8460 V8461) (let GoalsS (shen.compile-side-conditions V8458) (let GoalsP (shen.compile-premises V8459 V8460) (append GoalsAs (append GoalsS GoalsP))))))

(defun shen.compile-assumptions (V8476 V8477 V8478 V8479) (cond ((= () V8476) ()) ((and (cons? V8476) (and (cons? V8478) (cons? (tl V8478)))) (let NewActive (append (shen.extract-vars (hd V8476)) V8479) (cons (shen.compile-assumption (hd V8476) (hd V8478) (hd (tl V8478)) V8477 V8479) (shen.compile-assumptions (tl V8476) V8477 (tl V8478) NewActive)))) (true (simple-error "implementation error in shen.compile-assumptions"))))

(defun shen.compile-assumption (V8480 V8481 V8482 V8483 V8484) (let F (gensym shen.search) (let Compile (shen.compile-search-procedure F V8480 V8481 V8482 V8483 V8484) (cons F (cons V8481 (cons () (cons V8482 V8483)))))))

(defun shen.compile-search-procedure (V8485 V8486 V8487 V8488 V8489 V8490) (let Past (gensym Previous) (let Base (shen.foundit! V8486 V8487 Past V8488 V8489 V8490) (let Recursive (shen.keep-looking V8485 V8487 Past V8488 V8489) (eval (cons defprolog (cons V8485 (append Base Recursive))))))))

(defun shen.foundit! (V8491 V8492 V8493 V8494 V8495 V8496) (let Passive (shen.passive V8491 V8496) (let Table (shen.tabulate-passive Passive) (let Head (shen.head-foundit! V8491 V8492 V8493 V8494 V8495 Table) (let Body (shen.body-foundit! V8492 V8493 V8494 Table) (append Head (append (cons <-- ()) (append Body (cons (intern ";") ())))))))))

(defun shen.keep-looking (V8497 V8498 V8499 V8500 V8501) (let X (gensym V) (let Head (cons (cons - (cons (cons cons (cons X (cons V8498 ()))) ())) (cons V8499 (cons V8500 V8501))) (let Body (cons (cons V8497 (cons V8498 (cons (cons cons (cons X (cons V8499 ()))) (cons V8500 V8501)))) ()) (append Head (append (cons <-- ()) (append Body (cons (intern ";") ()))))))))

(defun shen.passive (V8506 V8507) (cond ((cons? V8506) (union (shen.passive (hd V8506) V8507) (shen.passive (tl V8506) V8507))) ((shen.passive? V8506 V8507) (cons V8506 ())) (true ())))

(defun shen.passive? (V8508 V8509) (and (not (element? V8508 V8509)) (variable? V8508)))

(defun shen.tabulate-passive (V8510) (map (lambda X (cons X (gensym V))) V8510))

(defun shen.head-foundit! (V8511 V8512 V8513 V8514 V8515 V8516) (let Optimise (shen.optimise-passive V8515 V8516) (cons (cons - (cons (cons cons (cons (shen.optimise-typing V8511) (cons V8512 ()))) ())) (cons V8513 (cons V8514 Optimise)))))

(defun shen.optimise-passive (V8517 V8518) (map (lambda C (shen.optimise-passive-h C V8518)) V8517))

(defun shen.optimise-passive-h (V8519 V8520) (let Entry (assoc V8519 V8520) (if (empty? Entry) V8519 (tl Entry))))

(defun shen.body-foundit! (V8529 V8530 V8531 V8532) (cond ((= () V8532) (cons (cons bind (cons V8531 (cons (cons append (cons (cons 1 (cons V8530 ())) (cons (cons 1 (cons V8529 ())) ()))) ()))) ())) ((and (cons? V8532) (cons? (hd V8532))) (cons (cons bind (cons (tl (hd V8532)) (cons (hd (hd V8532)) ()))) (shen.body-foundit! V8529 V8530 V8531 (tl V8532)))) (true (simple-error "implementation error in shen.body-foundit!"))))

(defun shen.compile-side-conditions (V8533) (map (lambda X (shen.compile-side-condition X)) V8533))

(defun shen.compile-side-condition (V8536) (cond ((and (cons? V8536) (and (= let (hd V8536)) (and (cons? (tl V8536)) (and (cons? (tl (tl V8536))) (= () (tl (tl (tl V8536)))))))) (cons is (tl V8536))) ((and (cons? V8536) (and (= shen.let! (hd V8536)) (and (cons? (tl V8536)) (and (cons? (tl (tl V8536))) (= () (tl (tl (tl V8536)))))))) (cons is! (tl V8536))) ((and (cons? V8536) (and (= if (hd V8536)) (and (cons? (tl V8536)) (= () (tl (tl V8536)))))) (cons when (tl V8536))) (true (simple-error "implementation error in shen.compile-side-condition"))))

(defun shen.compile-premises (V8537 V8538) (let Hyp (hd (reverse V8538)) (map (lambda X (shen.compile-premise X Hyp)) V8537)))

(defun shen.compile-premise (V8545 V8546) (cond ((= ! V8545) !) ((and (cons? V8545) (and (cons? (tl V8545)) (= () (tl (tl V8545))))) (shen.compile-premise-h (reverse (hd V8545)) (hd (tl V8545)) V8546)) (true (simple-error "implementation error in shen.premise"))))

(defun shen.compile-premise-h (V8553 V8554 V8555) (cond ((= () V8553) (cons shen.system-S (cons (shen.cons-form-no-modes V8554) (cons V8555 ())))) ((cons? V8553) (shen.compile-premise-h (tl V8553) V8554 (cons cons (cons (shen.cons-form-no-modes (hd V8553)) (cons V8555 ()))))) (true (simple-error "implementation error in shen.compile-premise-h"))))

(defun shen.cons-form-no-modes (V8556) (cond ((and (cons? V8556) (and (= bar! (hd V8556)) (and (cons? (tl V8556)) (= () (tl (tl V8556)))))) (hd (tl V8556))) ((cons? V8556) (cons cons (cons (shen.cons-form-no-modes (hd V8556)) (cons (shen.cons-form-no-modes (tl V8556)) ())))) (true V8556)))

(defun preclude (V8557) (let InternTypes (map (lambda X (shen.intern-type X)) V8557) (let Datatypes (value shen.*datatypes*) (let Remove (shen.remove-datatypes InternTypes Datatypes) (let NewDatatypes (set shen.*datatypes* Remove) (shen.show-datatypes NewDatatypes))))))

(defun shen.remove-datatypes (V8562 V8563) (cond ((= () V8562) V8563) ((cons? V8562) (shen.remove-datatypes (tl V8562) (shen.unassoc (hd V8562) V8563))) (true (simple-error "implementation error in shen.remove-datatypes"))))

(defun shen.unassoc (V8573 V8574) (cond ((= () V8574) ()) ((and (cons? V8574) (and (cons? (hd V8574)) (= V8573 (hd (hd V8574))))) (tl V8574)) ((cons? V8574) (cons (hd V8574) (shen.unassoc V8573 (tl V8574)))) (true (simple-error "implementation error in shen.unassoc"))))

(defun shen.show-datatypes (V8575) (map (lambda X (hd X)) V8575))

(defun include (V8576) (let InternTypes (map (lambda X (shen.intern-type X)) V8576) (let Remember (map (lambda D (shen.remember-datatype D (fn D))) InternTypes) (let Datatypes (value shen.*datatypes*) (shen.show-datatypes Datatypes)))))

(defun preclude-all-but (V8577) (let Initialise (set shen.*datatypes* ()) (let InternTypes (map (lambda X (shen.intern-type X)) V8577) (let NewDatatypes (map (lambda D (shen.remember-datatype D (fn D))) InternTypes) (shen.show-datatypes (value shen.*datatypes*))))))

(defun include-all-but (V8578) (let InternTypes (map (lambda X (shen.intern-type X)) V8578) (let AllDatatypes (value shen.*alldatatypes*) (let Datatypes (set shen.*datatypes* (shen.remove-datatypes InternTypes AllDatatypes)) (shen.show-datatypes Datatypes)))))

