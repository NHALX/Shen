(defun shen.<datatype> (V4014) (let W4015 (if (shen.non-empty-stream? V4014) (let W4016 (shen.hds V4014) (let W4017 (shen.tls V4014) (let W4018 (shen.<datatype-rules> W4017) (if (shen.parse-failure? W4018) (shen.parse-failure) (shen.comb (shen.in-> W4018) (let W4019 (shen.rules->prolog W4016 (shen.<-out W4018)) (shen.remember-datatype W4016 (fn W4016)))))))) (shen.parse-failure)) (if (shen.parse-failure? W4015) (shen.parse-failure) W4015)))

(defun shen.<datatype-rules> (V4020) (let W4021 (let W4022 (shen.<datatype-rule> V4020) (if (shen.parse-failure? W4022) (shen.parse-failure) (let W4023 (shen.<datatype-rules> W4022) (if (shen.parse-failure? W4023) (shen.parse-failure) (shen.comb (shen.in-> W4023) (append (shen.<-out W4022) (shen.<-out W4023))))))) (if (shen.parse-failure? W4021) (let W4024 (let W4025 (<!> V4020) (if (shen.parse-failure? W4025) (shen.parse-failure) (shen.comb (shen.in-> W4025) (if (empty? (shen.<-out W4025)) () (simple-error (cn "datatype syntax error here:
 " (shen.app (shen.<-out W4025) "
 ..." shen.r))))))) (if (shen.parse-failure? W4024) (shen.parse-failure) W4024)) W4021)))

(defun shen.<datatype-rule> (V4026) (let W4027 (let W4028 (shen.<single> V4026) (if (shen.parse-failure? W4028) (shen.parse-failure) (shen.comb (shen.in-> W4028) (shen.<-out W4028)))) (if (shen.parse-failure? W4027) (let W4029 (let W4030 (shen.<double> V4026) (if (shen.parse-failure? W4030) (shen.parse-failure) (shen.comb (shen.in-> W4030) (shen.<-out W4030)))) (if (shen.parse-failure? W4029) (shen.parse-failure) W4029)) W4027)))

(defun shen.<single> (V4031) (let W4032 (let W4033 (shen.<sides> V4031) (if (shen.parse-failure? W4033) (shen.parse-failure) (let W4034 (shen.<prems> W4033) (if (shen.parse-failure? W4034) (shen.parse-failure) (let W4035 (shen.<sng> W4034) (if (shen.parse-failure? W4035) (shen.parse-failure) (let W4036 (shen.<conc> W4035) (if (shen.parse-failure? W4036) (shen.parse-failure) (let W4037 (shen.<sc> W4036) (if (shen.parse-failure? W4037) (shen.parse-failure) (shen.comb (shen.in-> W4037) (cons (cons (shen.<-out W4033) (cons (shen.<-out W4034) (cons (shen.<-out W4036) ()))) ())))))))))))) (if (shen.parse-failure? W4032) (shen.parse-failure) W4032)))

(defun shen.<double> (V4038) (let W4039 (let W4040 (shen.<sides> V4038) (if (shen.parse-failure? W4040) (shen.parse-failure) (let W4041 (shen.<formulae> W4040) (if (shen.parse-failure? W4041) (shen.parse-failure) (let W4042 (shen.<dbl> W4041) (if (shen.parse-failure? W4042) (shen.parse-failure) (let W4043 (shen.<formula> W4042) (if (shen.parse-failure? W4043) (shen.parse-failure) (let W4044 (shen.<sc> W4043) (if (shen.parse-failure? W4044) (shen.parse-failure) (shen.comb (shen.in-> W4044) (shen.lr-rule (shen.<-out W4040) (shen.<-out W4041) (cons () (cons (shen.<-out W4043) ())))))))))))))) (if (shen.parse-failure? W4039) (shen.parse-failure) W4039)))

(defun shen.<formulae> (V4045) (let W4046 (let W4047 (shen.<formula> V4045) (if (shen.parse-failure? W4047) (shen.parse-failure) (let W4048 (shen.<sc> W4047) (if (shen.parse-failure? W4048) (shen.parse-failure) (let W4049 (shen.<formulae> W4048) (if (shen.parse-failure? W4049) (shen.parse-failure) (shen.comb (shen.in-> W4049) (cons (cons () (cons (shen.<-out W4047) ())) (shen.<-out W4049))))))))) (if (shen.parse-failure? W4046) (let W4050 (let W4051 (shen.<formula> V4045) (if (shen.parse-failure? W4051) (shen.parse-failure) (let W4052 (shen.<sc> W4051) (if (shen.parse-failure? W4052) (shen.parse-failure) (shen.comb (shen.in-> W4052) (cons (cons () (cons (shen.<-out W4051) ())) ())))))) (if (shen.parse-failure? W4050) (shen.parse-failure) W4050)) W4046)))

(defun shen.<conc> (V4053) (let W4054 (let W4055 (shen.<ass> V4053) (if (shen.parse-failure? W4055) (shen.parse-failure) (if (shen.=hd? W4055 >>) (let W4056 (shen.tls W4055) (let W4057 (shen.<formula> W4056) (if (shen.parse-failure? W4057) (shen.parse-failure) (shen.comb (shen.in-> W4057) (cons (shen.<-out W4055) (cons (shen.<-out W4057) ())))))) (shen.parse-failure)))) (if (shen.parse-failure? W4054) (let W4058 (let W4059 (shen.<formula> V4053) (if (shen.parse-failure? W4059) (shen.parse-failure) (shen.comb (shen.in-> W4059) (cons () (cons (shen.<-out W4059) ()))))) (if (shen.parse-failure? W4058) (shen.parse-failure) W4058)) W4054)))

(defun shen.<prems> (V4060) (let W4061 (let W4062 (shen.<prem> V4060) (if (shen.parse-failure? W4062) (shen.parse-failure) (let W4063 (shen.<sc> W4062) (if (shen.parse-failure? W4063) (shen.parse-failure) (let W4064 (shen.<prems> W4063) (if (shen.parse-failure? W4064) (shen.parse-failure) (shen.comb (shen.in-> W4064) (cons (shen.<-out W4062) (shen.<-out W4064))))))))) (if (shen.parse-failure? W4061) (let W4065 (let W4066 (<e> V4060) (if (shen.parse-failure? W4066) (shen.parse-failure) (shen.comb (shen.in-> W4066) ()))) (if (shen.parse-failure? W4065) (shen.parse-failure) W4065)) W4061)))

(defun shen.<prem> (V4067) (let W4068 (if (shen.=hd? V4067 !) (let W4069 (shen.tls V4067) (shen.comb (shen.in-> W4069) !)) (shen.parse-failure)) (if (shen.parse-failure? W4068) (let W4070 (let W4071 (shen.<ass> V4067) (if (shen.parse-failure? W4071) (shen.parse-failure) (if (shen.=hd? W4071 >>) (let W4072 (shen.tls W4071) (let W4073 (shen.<formula> W4072) (if (shen.parse-failure? W4073) (shen.parse-failure) (shen.comb (shen.in-> W4073) (cons (shen.<-out W4071) (cons (shen.<-out W4073) ())))))) (shen.parse-failure)))) (if (shen.parse-failure? W4070) (let W4074 (let W4075 (shen.<formula> V4067) (if (shen.parse-failure? W4075) (shen.parse-failure) (shen.comb (shen.in-> W4075) (cons () (cons (shen.<-out W4075) ()))))) (if (shen.parse-failure? W4074) (shen.parse-failure) W4074)) W4070)) W4068)))

(defun shen.<ass> (V4076) (let W4077 (let W4078 (shen.<formula> V4076) (if (shen.parse-failure? W4078) (shen.parse-failure) (let W4079 (shen.<iscomma> W4078) (if (shen.parse-failure? W4079) (shen.parse-failure) (let W4080 (shen.<ass> W4079) (if (shen.parse-failure? W4080) (shen.parse-failure) (shen.comb (shen.in-> W4080) (cons (shen.<-out W4078) (shen.<-out W4080))))))))) (if (shen.parse-failure? W4077) (let W4081 (let W4082 (shen.<formula> V4076) (if (shen.parse-failure? W4082) (shen.parse-failure) (shen.comb (shen.in-> W4082) (cons (shen.<-out W4082) ())))) (if (shen.parse-failure? W4081) (let W4083 (let W4084 (<e> V4076) (if (shen.parse-failure? W4084) (shen.parse-failure) (shen.comb (shen.in-> W4084) ()))) (if (shen.parse-failure? W4083) (shen.parse-failure) W4083)) W4081)) W4077)))

(defun shen.<iscomma> (V4085) (let W4086 (if (shen.non-empty-stream? V4085) (let W4087 (shen.hds V4085) (let W4088 (shen.tls V4085) (if (= W4087 (intern ",")) (shen.comb (shen.in-> W4088) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W4086) (shen.parse-failure) W4086)))

(defun shen.<formula> (V4089) (let W4090 (let W4091 (shen.<expr> V4089) (if (shen.parse-failure? W4091) (shen.parse-failure) (let W4092 (shen.<iscolon> W4091) (if (shen.parse-failure? W4092) (shen.parse-failure) (let W4093 (shen.<type> W4092) (if (shen.parse-failure? W4093) (shen.parse-failure) (shen.comb (shen.in-> W4093) (cons (shen.curry (shen.<-out W4091)) (cons (intern ":") (cons (shen.rectify-type (shen.<-out W4093)) ())))))))))) (if (shen.parse-failure? W4090) (let W4094 (let W4095 (shen.<expr> V4089) (if (shen.parse-failure? W4095) (shen.parse-failure) (shen.comb (shen.in-> W4095) (shen.<-out W4095)))) (if (shen.parse-failure? W4094) (shen.parse-failure) W4094)) W4090)))

(defun shen.<iscolon> (V4096) (let W4097 (if (shen.non-empty-stream? V4096) (let W4098 (shen.hds V4096) (let W4099 (shen.tls V4096) (if (= W4098 (intern ":")) (shen.comb (shen.in-> W4099) shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W4097) (shen.parse-failure) W4097)))

(defun shen.<sides> (V4100) (let W4101 (let W4102 (shen.<side> V4100) (if (shen.parse-failure? W4102) (shen.parse-failure) (let W4103 (shen.<sides> W4102) (if (shen.parse-failure? W4103) (shen.parse-failure) (shen.comb (shen.in-> W4103) (cons (shen.<-out W4102) (shen.<-out W4103))))))) (if (shen.parse-failure? W4101) (let W4104 (let W4105 (<e> V4100) (if (shen.parse-failure? W4105) (shen.parse-failure) (shen.comb (shen.in-> W4105) ()))) (if (shen.parse-failure? W4104) (shen.parse-failure) W4104)) W4101)))

(defun shen.<side> (V4106) (let W4107 (if (shen.=hd? V4106 if) (let W4108 (shen.tls V4106) (if (shen.non-empty-stream? W4108) (let W4109 (shen.hds W4108) (let W4110 (shen.tls W4108) (shen.comb (shen.in-> W4110) (cons if (cons W4109 ()))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W4107) (let W4111 (if (shen.=hd? V4106 let) (let W4112 (shen.tls V4106) (if (shen.non-empty-stream? W4112) (let W4113 (shen.hds W4112) (let W4114 (shen.tls W4112) (if (shen.non-empty-stream? W4114) (let W4115 (shen.hds W4114) (let W4116 (shen.tls W4114) (shen.comb (shen.in-> W4116) (cons let (cons W4113 (cons W4115 ())))))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W4111) (let W4117 (if (shen.=hd? V4106 shen.let!) (let W4118 (shen.tls V4106) (if (shen.non-empty-stream? W4118) (let W4119 (shen.hds W4118) (let W4120 (shen.tls W4118) (if (shen.non-empty-stream? W4120) (let W4121 (shen.hds W4120) (let W4122 (shen.tls W4120) (shen.comb (shen.in-> W4122) (cons shen.let! (cons W4119 (cons W4121 ())))))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W4117) (shen.parse-failure) W4117)) W4111)) W4107)))

(defun shen.lr-rule (V4129 V4130 V4131) (cond ((and (cons? V4131) (and (= () (hd V4131)) (and (cons? (tl V4131)) (= () (tl (tl V4131)))))) (let W4132 (gensym P) (let W4133 (cons (tl V4131) (cons W4132 ())) (let W4134 (cons (shen.coll-formulae V4130) (cons W4132 ())) (let W4135 (cons V4129 (cons (cons W4134 ()) (cons W4133 ()))) (let W4136 (cons V4129 (cons V4130 (cons V4131 ()))) (cons W4136 (cons W4135 ())))))))) (true (simple-error "implementation error in shen.lr-rule"))))

(defun shen.coll-formulae (V4139) (cond ((= () V4139) ()) ((and (cons? V4139) (and (cons? (hd V4139)) (and (= () (hd (hd V4139))) (and (cons? (tl (hd V4139))) (= () (tl (tl (hd V4139)))))))) (cons (hd (tl (hd V4139))) (shen.coll-formulae (tl V4139)))) (true (simple-error "implementation error in shen.coll-formulae"))))

(defun shen.<expr> (V4140) (let W4141 (if (shen.non-empty-stream? V4140) (let W4142 (shen.hds V4140) (let W4143 (shen.tls V4140) (if (not (shen.key-in-sequent-calculus? W4142)) (shen.comb (shen.in-> W4143) (macroexpand W4142)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W4141) (shen.parse-failure) W4141)))

(defun shen.key-in-sequent-calculus? (V4144) (or (element? V4144 (cons >> (cons (intern ";") (cons (intern ",") (cons (intern ":") (cons <-- ())))))) (or (shen.sng? V4144) (shen.dbl? V4144))))

(defun shen.<type> (V4145) (let W4146 (let W4147 (shen.<expr> V4145) (if (shen.parse-failure? W4147) (shen.parse-failure) (shen.comb (shen.in-> W4147) (shen.<-out W4147)))) (if (shen.parse-failure? W4146) (shen.parse-failure) W4146)))

(defun shen.<dbl> (V4148) (let W4149 (if (shen.non-empty-stream? V4148) (let W4150 (shen.hds V4148) (let W4151 (shen.tls V4148) (if (shen.dbl? W4150) (shen.comb (shen.in-> W4151) W4150) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W4149) (shen.parse-failure) W4149)))

(defun shen.<sng> (V4152) (let W4153 (if (shen.non-empty-stream? V4152) (let W4154 (shen.hds V4152) (let W4155 (shen.tls V4152) (if (shen.sng? W4154) (shen.comb (shen.in-> W4155) W4154) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W4153) (shen.parse-failure) W4153)))

(defun shen.sng? (V4156) (and (symbol? V4156) (shen.sng-h? (str V4156))))

(defun shen.sng-h? (V4159) (cond ((= "___" V4159) true) ((and (shen.+string? V4159) (= "_" (hdstr V4159))) (shen.sng-h? (tlstr V4159))) (true false)))

(defun shen.dbl? (V4160) (and (symbol? V4160) (shen.dbl-h? (str V4160))))

(defun shen.dbl-h? (V4163) (cond ((= "===" V4163) true) ((and (shen.+string? V4163) (= "=" (hdstr V4163))) (shen.dbl-h? (tlstr V4163))) (true false)))

(defun shen.remember-datatype (V4164 V4165) (do (set shen.*datatypes* (shen.assoc-> V4164 V4165 (value shen.*datatypes*))) (do (set shen.*alldatatypes* (shen.assoc-> V4164 V4165 (value shen.*alldatatypes*))) V4164)))

(defun shen.rules->prolog (V4166 V4167) (let W4168 (mapcan (lambda Z4169 (shen.rule->clause Z4169)) V4167) (eval (cons defprolog (cons V4166 W4168)))))

(defun shen.rule->clause (V4172) (cond ((and (cons? V4172) (and (cons? (tl V4172)) (and (cons? (tl (tl V4172))) (and (cons? (hd (tl (tl V4172)))) (and (cons? (tl (hd (tl (tl V4172))))) (and (= () (tl (tl (hd (tl (tl V4172)))))) (= () (tl (tl (tl V4172)))))))))) (let W4173 (shen.extract-vars V4172) (let W4174 (append (shen.nvars (length (hd (hd (tl (tl V4172)))))) (cons Delta ())) (let W4175 (shen.extract-vars (hd (tl (hd (tl (tl V4172)))))) (let W4176 (shen.compile-consequent (hd (tl (hd (tl (tl V4172))))) W4174) (let W4177 (shen.goals W4173 (hd (hd (tl (tl V4172)))) (hd V4172) (hd (tl V4172)) W4174 W4175) (append W4176 (append (cons <-- ()) (append W4177 (cons (intern ";") ())))))))))) (true (simple-error "implementation error in shen.rule->clause"))))

(defun shen.compile-consequent (V4184 V4185) (cond ((cons? V4185) (cons (shen.optimise-typing V4184) (cons (hd V4185) ()))) (true (simple-error "implementation error in shen.compile-consequent"))))

(defun shen.nvars (V4186) (cond ((= 0 V4186) ()) (true (cons (gensym V) (shen.nvars (- V4186 1))))))

(defun shen.optimise-typing (V4187) (cond ((and (cons? V4187) (and (cons? (tl V4187)) (and (cons? (tl (tl V4187))) (and (= () (tl (tl (tl V4187)))) (= (hd (tl V4187)) (intern ":")))))) (let W4188 (shen.expand-mode-forms (cons - (cons (cons (hd V4187) (cons (hd (tl V4187)) (cons (cons + (tl (tl V4187))) ()))) ()))) (shen.cons-form-with-modes W4188))) (true (let W4189 (shen.expand-mode-forms (cons + (cons V4187 ()))) (shen.cons-form-with-modes W4189)))))

(defun shen.expand-mode-forms (V4190) (cond ((and (cons? V4190) (and (= + (hd V4190)) (and (cons? (tl V4190)) (= () (tl (tl V4190)))))) (cons mode (cons (shen.expand-mode-forms (hd (tl V4190))) (cons + ())))) ((and (cons? V4190) (and (= - (hd V4190)) (and (cons? (tl V4190)) (= () (tl (tl V4190)))))) (cons mode (cons (shen.expand-mode-forms (hd (tl V4190))) (cons - ())))) ((cons? V4190) (map (lambda Z4191 (shen.expand-mode-forms Z4191)) V4190)) (true V4190)))

(defun shen.cons-form-with-modes (V4192) (cond ((and (cons? V4192) (and (= mode (hd V4192)) (and (cons? (tl V4192)) (and (cons? (tl (tl V4192))) (= () (tl (tl (tl V4192)))))))) (cons (hd (tl (tl V4192))) (cons (shen.cons-form-with-modes (hd (tl V4192))) ()))) ((and (cons? V4192) (and (= bar! (hd V4192)) (and (cons? (tl V4192)) (= () (tl (tl V4192)))))) (hd (tl V4192))) ((cons? V4192) (cons cons (cons (shen.cons-form-with-modes (hd V4192)) (cons (shen.cons-form-with-modes (tl V4192)) ())))) (true V4192)))

(defun shen.goals (V4193 V4194 V4195 V4196 V4197 V4198) (let W4199 (shen.compile-assumptions V4194 V4193 V4197 V4198) (let W4200 (shen.compile-side-conditions V4195) (let W4201 (shen.compile-premises V4196 V4197) (append W4199 (append W4200 W4201))))))

(defun shen.compile-assumptions (V4216 V4217 V4218 V4219) (cond ((= () V4216) ()) ((and (cons? V4216) (and (cons? V4218) (cons? (tl V4218)))) (let W4220 (append (shen.extract-vars (hd V4216)) V4219) (cons (shen.compile-assumption (hd V4216) (hd V4218) (hd (tl V4218)) V4217 V4219) (shen.compile-assumptions (tl V4216) V4217 (tl V4218) W4220)))) (true (simple-error "implementation error in shen.compile-assumptions"))))

(defun shen.compile-assumption (V4221 V4222 V4223 V4224 V4225) (let W4226 (gensym shen.search) (let W4227 (shen.compile-search-procedure W4226 V4221 V4222 V4223 V4224 V4225) (cons W4226 (cons V4222 (cons () (cons V4223 V4224)))))))

(defun shen.compile-search-procedure (V4228 V4229 V4230 V4231 V4232 V4233) (let W4234 (gensym Previous) (let W4235 (shen.foundit! V4229 V4230 W4234 V4231 V4232 V4233) (let W4236 (shen.keep-looking V4228 V4230 W4234 V4231 V4232) (eval (cons defprolog (cons V4228 (append W4235 W4236))))))))

(defun shen.foundit! (V4237 V4238 V4239 V4240 V4241 V4242) (let W4243 (shen.passive V4237 V4242) (let W4244 (shen.tabulate-passive W4243) (let W4245 (shen.head-foundit! V4237 V4238 V4239 V4240 V4241 W4244) (let W4246 (shen.body-foundit! V4238 V4239 V4240 W4244) (append W4245 (append (cons <-- ()) (append W4246 (cons (intern ";") ())))))))))

(defun shen.keep-looking (V4247 V4248 V4249 V4250 V4251) (let W4252 (gensym V) (let W4253 (cons (cons - (cons (cons cons (cons W4252 (cons V4248 ()))) ())) (cons V4249 (cons V4250 V4251))) (let W4254 (cons (cons V4247 (cons V4248 (cons (cons cons (cons W4252 (cons V4249 ()))) (cons V4250 V4251)))) ()) (append W4253 (append (cons <-- ()) (append W4254 (cons (intern ";") ()))))))))

(defun shen.passive (V4259 V4260) (cond ((cons? V4259) (union (shen.passive (hd V4259) V4260) (shen.passive (tl V4259) V4260))) ((shen.passive? V4259 V4260) (cons V4259 ())) (true ())))

(defun shen.passive? (V4261 V4262) (and (not (element? V4261 V4262)) (variable? V4261)))

(defun shen.tabulate-passive (V4263) (map (lambda Z4264 (cons Z4264 (gensym V))) V4263))

(defun shen.head-foundit! (V4265 V4266 V4267 V4268 V4269 V4270) (let W4271 (shen.optimise-passive V4269 V4270) (cons (cons - (cons (cons cons (cons (shen.optimise-typing V4265) (cons V4266 ()))) ())) (cons V4267 (cons V4268 W4271)))))

(defun shen.optimise-passive (V4272 V4273) (map (lambda Z4274 (shen.optimise-passive-h Z4274 V4273)) V4272))

(defun shen.optimise-passive-h (V4275 V4276) (let W4277 (assoc V4275 V4276) (if (empty? W4277) V4275 (tl W4277))))

(defun shen.body-foundit! (V4286 V4287 V4288 V4289) (cond ((= () V4289) (cons (cons bind (cons V4288 (cons (cons append (cons (cons 1 (cons V4287 ())) (cons (cons 1 (cons V4286 ())) ()))) ()))) ())) ((and (cons? V4289) (cons? (hd V4289))) (cons (cons bind (cons (tl (hd V4289)) (cons (hd (hd V4289)) ()))) (shen.body-foundit! V4286 V4287 V4288 (tl V4289)))) (true (simple-error "implementation error in shen.body-foundit!"))))

(defun shen.compile-side-conditions (V4290) (map (lambda Z4291 (shen.compile-side-condition Z4291)) V4290))

(defun shen.compile-side-condition (V4294) (cond ((and (cons? V4294) (and (= let (hd V4294)) (and (cons? (tl V4294)) (and (cons? (tl (tl V4294))) (= () (tl (tl (tl V4294)))))))) (cons is (tl V4294))) ((and (cons? V4294) (and (= shen.let! (hd V4294)) (and (cons? (tl V4294)) (and (cons? (tl (tl V4294))) (= () (tl (tl (tl V4294)))))))) (cons is! (tl V4294))) ((and (cons? V4294) (and (= if (hd V4294)) (and (cons? (tl V4294)) (= () (tl (tl V4294)))))) (cons when (tl V4294))) (true (simple-error "implementation error in shen.compile-side-condition"))))

(defun shen.compile-premises (V4295 V4296) (let W4297 (hd (reverse V4296)) (map (lambda Z4298 (shen.compile-premise Z4298 W4297)) V4295)))

(defun shen.compile-premise (V4305 V4306) (cond ((= ! V4305) !) ((and (cons? V4305) (and (cons? (tl V4305)) (= () (tl (tl V4305))))) (shen.compile-premise-h (reverse (hd V4305)) (hd (tl V4305)) V4306)) (true (simple-error "implementation error in shen.premise"))))

(defun shen.compile-premise-h (V4313 V4314 V4315) (cond ((= () V4313) (cons shen.system-S (cons (shen.cons-form-no-modes V4314) (cons V4315 ())))) ((cons? V4313) (shen.compile-premise-h (tl V4313) V4314 (cons cons (cons (shen.cons-form-no-modes (hd V4313)) (cons V4315 ()))))) (true (simple-error "implementation error in shen.compile-premise-h"))))

(defun shen.cons-form-no-modes (V4316) (cond ((and (cons? V4316) (and (= bar! (hd V4316)) (and (cons? (tl V4316)) (= () (tl (tl V4316)))))) (hd (tl V4316))) ((cons? V4316) (cons cons (cons (shen.cons-form-no-modes (hd V4316)) (cons (shen.cons-form-no-modes (tl V4316)) ())))) (true V4316)))

(defun preclude (V4317) (let W4318 (map (lambda Z4319 (shen.intern-type Z4319)) V4317) (let W4320 (value shen.*datatypes*) (let W4321 (shen.remove-datatypes W4318 W4320) (let W4322 (set shen.*datatypes* W4321) (shen.show-datatypes W4322))))))

(defun shen.remove-datatypes (V4327 V4328) (cond ((= () V4327) V4328) ((cons? V4327) (shen.remove-datatypes (tl V4327) (shen.unassoc (hd V4327) V4328))) (true (simple-error "implementation error in shen.remove-datatypes"))))

(defun shen.unassoc (V4338 V4339) (cond ((= () V4339) ()) ((and (cons? V4339) (and (cons? (hd V4339)) (= V4338 (hd (hd V4339))))) (tl V4339)) ((cons? V4339) (cons (hd V4339) (shen.unassoc V4338 (tl V4339)))) (true (simple-error "implementation error in shen.unassoc"))))

(defun shen.show-datatypes (V4340) (map (lambda Z4341 (hd Z4341)) V4340))

(defun include (V4342) (let W4343 (map (lambda Z4344 (shen.intern-type Z4344)) V4342) (let W4345 (map (lambda Z4346 (shen.remember-datatype Z4346 (fn Z4346))) W4343) (let W4347 (value shen.*datatypes*) (shen.show-datatypes W4347)))))

(defun preclude-all-but (V4348) (let W4349 (set shen.*datatypes* ()) (let W4350 (map (lambda Z4351 (shen.intern-type Z4351)) V4348) (let W4352 (map (lambda Z4353 (shen.remember-datatype Z4353 (fn Z4353))) W4350) (shen.show-datatypes (value shen.*datatypes*))))))

(defun include-all-but (V4354) (let W4355 (map (lambda Z4356 (shen.intern-type Z4356)) V4354) (let W4357 (value shen.*alldatatypes*) (let W4358 (set shen.*datatypes* (shen.remove-datatypes W4355 W4357)) (shen.show-datatypes W4358)))))

