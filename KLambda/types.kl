(defun declare (V12098 V12099) (let W12100 (shen.rectify-type V12099) (let W12101 (((((lambda Z12102 (lambda Z12103 (lambda Z12104 (lambda Z12105 (do (shen.incinfs) (shen.variancy (receive (shen.deref V12098 Z12102)) (receive (shen.deref W12100 Z12102)) Z12102 Z12103 Z12104 Z12105)))))) (shen.reset-prolog-vector)) (@v true (@v 0 (vector 0)))) 0) (freeze true)) (let W12106 (eval-kl (shen.prolog-abstraction V12099)) (let W12107 (set shen.*sigf* (shen.assoc-> V12098 W12106 (value shen.*sigf*))) V12098)))))

(defun shen.variancy (V12108 V12109 V12110 V12111 V12112 V12113) (if (shen.unlocked? V12111) (let W12114 (shen.newpv V12110) (shen.gc V12110 (do (shen.incinfs) (shen.system-S-h V12108 W12114 () V12110 V12111 V12112 (freeze (shen.variants? V12108 W12114 V12109 V12110 V12111 V12112 V12113)))))) false))

(defun shen.variants? (V12115 V12116 V12117 V12118 V12119 V12120 V12121) (let W12122 (+ V12120 1) (let W12123 (if (shen.unlocked? V12119) (let W12124 (shen.lazyderef V12116 V12118) (let W12125 (freeze (do (shen.incinfs) (shen.cut V12118 V12119 W12122 V12121))) (if (= W12124 symbol) (thaw W12125) (if (shen.pvar? W12124) (shen.bind! W12124 symbol V12118 W12125) false)))) false) (if (= W12123 false) (let W12126 (if (shen.unlocked? V12119) (do (shen.incinfs) (is! V12116 V12117 V12118 V12119 W12122 V12121)) false) (if (= W12126 false) (let W12127 (if (shen.unlocked? V12119) (let W12128 (shen.newpv V12118) (shen.gc V12118 (do (shen.incinfs) (is W12128 (pr (cn "warning: changing the type of " (shen.app (shen.deref V12115 V12118) " may create errors
" shen.a)) (stoutput)) V12118 V12119 W12122 V12121)))) false) (if (= W12127 false) (shen.unlock V12119 W12122) W12127)) W12126)) W12123))))

(defun shen.prolog-abstraction (V12129) (let W12130 (gensym B) (let W12131 (gensym L) (let W12132 (gensym Key) (let W12133 (gensym C) (let W12134 (gensym V) (let W12135 (shen.extract-vars V12129) (cons lambda (cons W12134 (cons (cons lambda (cons W12130 (cons (cons lambda (cons W12131 (cons (cons lambda (cons W12132 (cons (cons lambda (cons W12133 (cons (shen.stpart W12135 (cons is! (cons W12134 (cons (shen.rcons_form V12129) (cons W12130 (cons W12131 (cons W12132 (cons W12133 ()))))))) W12130) ()))) ()))) ()))) ()))) ()))))))))))

(defun shen.demod (V12136) V12136)

(declare abort (cons --> (cons A ())))

(declare absvector? (cons A (cons --> (cons boolean ()))))

(declare adjoin (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))))

(declare and (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ()))))

(declare shen.app (cons A (cons --> (cons (cons string (cons --> (cons (cons symbol (cons --> (cons string ()))) ()))) ()))))

(declare append (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))))

(declare arity (cons A (cons --> (cons number ()))))

(declare assoc (cons A (cons --> (cons (cons (cons list (cons (cons list (cons A ())) ())) (cons --> (cons (cons list (cons A ())) ()))) ()))))

(declare atom? (cons A (cons --> (cons boolean ()))))

(declare boolean? (cons A (cons --> (cons boolean ()))))

(declare bootstrap (cons string (cons --> (cons string ()))))

(declare bound? (cons symbol (cons --> (cons boolean ()))))

(declare cd (cons string (cons --> (cons string ()))))

(declare close (cons (cons stream (cons A ())) (cons --> (cons (cons list (cons B ())) ()))))

(declare cn (cons string (cons --> (cons (cons string (cons --> (cons string ()))) ()))))

(declare compile (cons (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons --> (cons (cons str (cons (cons list (cons A ())) (cons C ()))) ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons C ()))) ()))))

(declare cons? (cons A (cons --> (cons boolean ()))))

(declare destroy (cons (cons A (cons --> (cons B ()))) (cons --> (cons symbol ()))))

(declare difference (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))))

(declare do (cons A (cons --> (cons (cons B (cons --> (cons B ()))) ()))))

(declare dynamic (cons symbol (cons --> (cons (cons list (cons symbol ())) ()))))

(declare <e> (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons --> (cons (cons str (cons (cons list (cons A ())) (cons (cons list (cons C ())) ()))) ()))))

(declare <!> (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons --> (cons (cons str (cons (cons list (cons A ())) (cons (cons list (cons A ())) ()))) ()))))

(declare shen.<end> (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons --> (cons (cons str (cons (cons list (cons A ())) (cons B ()))) ()))))

(declare shen.=hd? (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons --> (cons (cons A (cons --> (cons boolean ()))) ()))))

(declare shen.hds (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons --> (cons A ()))))

(declare shen.tls (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons --> (cons (cons str (cons (cons list (cons A ())) (cons B ()))) ()))))

(declare shen.parse-failure? (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons --> (cons boolean ()))))

(declare shen.parse-failure (cons --> (cons (cons str (cons (cons list (cons A ())) (cons B ()))) ())))

(declare shen.<-out (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons --> (cons B ()))))

(declare shen.in-> (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons --> (cons (cons list (cons A ())) ()))))

(declare shen.non-empty-stream? (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons --> (cons boolean ()))))

(declare shen.comb (cons (cons list (cons A ())) (cons --> (cons (cons B (cons --> (cons (cons str (cons (cons list (cons A ())) (cons B ()))) ()))) ()))))

(declare shen.headstream (cons (cons str (cons A (cons B ()))) (cons --> (cons (cons (cons str (cons C (cons D ()))) (cons --> (cons (cons str (cons A (cons (cons str (cons C (cons D ()))) ()))) ()))) ()))))

(declare shen.tlstream (cons (cons str (cons (cons list (cons A ())) (cons B ()))) (cons --> (cons (cons str (cons (cons list (cons A ())) (cons B ()))) ()))))

(declare element? (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons boolean ()))) ()))))

(declare empty? (cons A (cons --> (cons boolean ()))))

(declare enable-type-theory (cons symbol (cons --> (cons boolean ()))))

(declare external (cons symbol (cons --> (cons (cons list (cons symbol ())) ()))))

(declare error-to-string (cons exception (cons --> (cons string ()))))

(declare explode (cons A (cons --> (cons (cons list (cons string ())) ()))))

(declare factorise (cons symbol (cons --> (cons symbol ()))))

(declare fail (cons --> (cons symbol ())))

(declare fix (cons (cons A (cons --> (cons A ()))) (cons --> (cons (cons A (cons --> (cons A ()))) ()))))

(declare freeze (cons A (cons --> (cons (cons lazy (cons A ())) ()))))

(declare fst (cons (cons A (cons * (cons B ()))) (cons --> (cons A ()))))

(declare gensym (cons symbol (cons --> (cons symbol ()))))

(declare <-vector (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons A ()))) ()))))

(declare vector-> (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons (cons A (cons --> (cons (cons vector (cons A ())) ()))) ()))) ()))))

(declare vector (cons number (cons --> (cons (cons vector (cons A ())) ()))))

(declare get-time (cons symbol (cons --> (cons number ()))))

(declare hash (cons A (cons --> (cons (cons number (cons --> (cons number ()))) ()))))

(declare head (cons (cons list (cons A ())) (cons --> (cons A ()))))

(declare hdv (cons (cons vector (cons A ())) (cons --> (cons A ()))))

(declare hdstr (cons string (cons --> (cons string ()))))

(declare if (cons boolean (cons --> (cons (cons A (cons --> (cons (cons A (cons --> (cons A ()))) ()))) ()))))

(declare in-package (cons symbol (cons --> (cons symbol ()))))

(declare it (cons --> (cons string ())))

(declare implementation (cons --> (cons string ())))

(declare include (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ()))))

(declare include-all-but (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ()))))

(declare inferences (cons --> (cons number ())))

(declare shen.insert (cons A (cons --> (cons (cons string (cons --> (cons string ()))) ()))))

(declare integer? (cons A (cons --> (cons boolean ()))))

(declare internal (cons symbol (cons --> (cons (cons list (cons symbol ())) ()))))

(declare intersection (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))))

(declare language (cons --> (cons string ())))

(declare length (cons (cons list (cons A ())) (cons --> (cons number ()))))

(declare limit (cons (cons vector (cons A ())) (cons --> (cons number ()))))

(declare lineread (cons (cons stream (cons in ())) (cons --> (cons (cons list (cons unit ())) ()))))

(declare load (cons string (cons --> (cons symbol ()))))

(declare map (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ()))))

(declare mapcan (cons (cons A (cons --> (cons (cons list (cons B ())) ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ()))))

(declare maxinferences (cons number (cons --> (cons number ()))))

(declare n->string (cons number (cons --> (cons string ()))))

(declare nl (cons number (cons --> (cons number ()))))

(declare not (cons boolean (cons --> (cons boolean ()))))

(declare nth (cons number (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons A ()))) ()))))

(declare number? (cons A (cons --> (cons boolean ()))))

(declare occurrences (cons A (cons --> (cons (cons B (cons --> (cons number ()))) ()))))

(declare occurs-check (cons symbol (cons --> (cons boolean ()))))

(declare optimise (cons symbol (cons --> (cons boolean ()))))

(declare or (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ()))))

(declare os (cons --> (cons string ())))

(declare package? (cons symbol (cons --> (cons boolean ()))))

(declare port (cons --> (cons string ())))

(declare porters (cons --> (cons string ())))

(declare pos (cons string (cons --> (cons (cons number (cons --> (cons string ()))) ()))))

(declare pr (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ()))))

(declare print (cons A (cons --> (cons A ()))))

(declare profile (cons symbol (cons --> (cons symbol ()))))

(declare preclude (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ()))))

(declare shen.proc-nl (cons string (cons --> (cons string ()))))

(declare profile-results (cons symbol (cons --> (cons (cons symbol (cons * (cons number ()))) ()))))

(declare protect (cons A (cons --> (cons A ()))))

(declare preclude-all-but (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ()))))

(declare shen.prhush (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ()))))

(declare prolog-memory (cons number (cons --> (cons number ()))))

(declare ps (cons symbol (cons --> (cons (cons list (cons unit ())) ()))))

(declare read (cons (cons stream (cons in ())) (cons --> (cons unit ()))))

(declare read-byte (cons (cons stream (cons in ())) (cons --> (cons number ()))))

(declare read-file-as-bytelist (cons string (cons --> (cons (cons list (cons number ())) ()))))

(declare read-file-as-string (cons string (cons --> (cons string ()))))

(declare read-file (cons string (cons --> (cons (cons list (cons unit ())) ()))))

(declare read-from-string (cons string (cons --> (cons (cons list (cons unit ())) ()))))

(declare read-from-string-unprocessed (cons string (cons --> (cons (cons list (cons unit ())) ()))))

(declare release (cons --> (cons string ())))

(declare remove (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))))

(declare reverse (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))))

(declare simple-error (cons string (cons --> (cons A ()))))

(declare snd (cons (cons A (cons * (cons B ()))) (cons --> (cons B ()))))

(declare specialise (cons symbol (cons --> (cons (cons number (cons --> (cons symbol ()))) ()))))

(declare spy (cons symbol (cons --> (cons boolean ()))))

(declare step (cons symbol (cons --> (cons boolean ()))))

(declare stinput (cons --> (cons (cons stream (cons in ())) ())))

(declare stoutput (cons --> (cons (cons stream (cons out ())) ())))

(declare string? (cons A (cons --> (cons boolean ()))))

(declare str (cons A (cons --> (cons string ()))))

(declare string->n (cons string (cons --> (cons number ()))))

(declare string->symbol (cons string (cons --> (cons symbol ()))))

(declare sum (cons (cons list (cons number ())) (cons --> (cons number ()))))

(declare symbol? (cons A (cons --> (cons boolean ()))))

(declare systemf (cons symbol (cons --> (cons symbol ()))))

(declare tail (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))))

(declare tlstr (cons string (cons --> (cons string ()))))

(declare tlv (cons (cons vector (cons A ())) (cons --> (cons (cons vector (cons A ())) ()))))

(declare tc (cons symbol (cons --> (cons boolean ()))))

(declare tc? (cons --> (cons boolean ())))

(declare thaw (cons (cons lazy (cons A ())) (cons --> (cons A ()))))

(declare track (cons symbol (cons --> (cons symbol ()))))

(declare trap-error (cons A (cons --> (cons (cons (cons exception (cons --> (cons A ()))) (cons --> (cons A ()))) ()))))

(declare tuple? (cons A (cons --> (cons boolean ()))))

(declare undefmacro (cons symbol (cons --> (cons symbol ()))))

(declare union (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))))

(declare unprofile (cons symbol (cons --> (cons symbol ()))))

(declare untrack (cons symbol (cons --> (cons symbol ()))))

(declare variable? (cons A (cons --> (cons boolean ()))))

(declare vector? (cons A (cons --> (cons boolean ()))))

(declare version (cons --> (cons string ())))

(declare write-to-file (cons string (cons --> (cons (cons A (cons --> (cons A ()))) ()))))

(declare write-byte (cons number (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons number ()))) ()))))

(declare y-or-n? (cons string (cons --> (cons boolean ()))))

(declare > (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))))

(declare < (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))))

(declare >= (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))))

(declare <= (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))))

(declare = (cons A (cons --> (cons (cons A (cons --> (cons boolean ()))) ()))))

(declare + (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ()))))

(declare / (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ()))))

(declare - (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ()))))

(declare * (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ()))))

(declare == (cons A (cons --> (cons (cons B (cons --> (cons boolean ()))) ()))))

