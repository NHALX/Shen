(defun thaw (V10024) (V10024))

(defun eval (V10025) (eval-kl (shen.shen->kl (shen.process-applications (macroexpand V10025) (shen.find-types V10025)))))

(defun external (V10026) (cond ((= null V10026) ()) (true (trap-error (get V10026 shen.external-symbols (value *property-vector*)) (lambda Z10027 (simple-error (cn "package " (shen.app V10026 " does not exist.
;" shen.a))))))))

(defun internal (V10028) (cond ((= null V10028) ()) (true (trap-error (get V10028 shen.internal-symbols (value *property-vector*)) (lambda Z10029 (simple-error (cn "package " (shen.app V10028 " does not exist.
;" shen.a))))))))

(defun fail-if (V10030 V10031) (if (V10030 V10031) (fail) V10031))

(defun @s (V10032 V10033) (cn V10032 V10033))

(defun tc? () (value shen.*tc*))

(defun ps (V10034) (trap-error (get V10034 shen.source (value *property-vector*)) (lambda Z10035 (simple-error (shen.app V10034 " not found.
" shen.a)))))

(defun stinput () (value *stinput*))

(defun vector (V10036) (let W10037 (absvector (+ V10036 1)) (let W10038 (address-> W10037 0 V10036) (let W10039 (if (= V10036 0) W10038 (shen.fillvector W10038 1 V10036 (fail))) W10039))))

(defun shen.fillvector (V10041 V10042 V10043 V10044) (cond ((= V10042 V10043) (address-> V10041 V10043 V10044)) (true (shen.fillvector (address-> V10041 V10042 V10044) (+ 1 V10042) V10043 V10044))))

(defun vector? (V10045) (and (absvector? V10045) (trap-error (>= (<-address V10045 0) 0) (lambda Z10046 false))))

(defun vector-> (V10047 V10048 V10049) (if (= V10048 0) (simple-error "cannot access 0th element of a vector
") (address-> V10047 V10048 V10049)))

(defun <-vector (V10050 V10051) (if (= V10051 0) (simple-error "cannot access 0th element of a vector
") (let W10052 (<-address V10050 V10051) (if (= W10052 (fail)) (simple-error "vector element not found
") W10052))))

(defun shen.posint? (V10053) (and (integer? V10053) (>= V10053 0)))

(defun limit (V10054) (<-address V10054 0))

(defun symbol? (V10055) (cond ((or (boolean? V10055) (or (number? V10055) (or (string? V10055) (or (cons? V10055) (or (empty? V10055) (vector? V10055)))))) false) ((element? V10055 (cons { (cons } (cons (intern ":") (cons (intern ";") (cons (intern ",") ())))))) true) (true (trap-error (let W10056 (str V10055) (shen.analyse-symbol? W10056)) (lambda Z10057 false)))))

(defun shen.analyse-symbol? (V10060) (cond ((shen.+string? V10060) (and (shen.alpha? (string->n (hdstr V10060))) (shen.alphanums? (tlstr V10060)))) (true (simple-error "implementation error in shen.analyse-symbol?"))))

(defun shen.alphanums? (V10063) (cond ((= "" V10063) true) ((shen.+string? V10063) (let W10064 (string->n (hdstr V10063)) (and (or (shen.alpha? W10064) (shen.digit? W10064)) (shen.alphanums? (tlstr V10063))))) (true (simple-error "implementation error in shen.alphanums?"))))

(defun variable? (V10065) (cond ((or (boolean? V10065) (or (number? V10065) (string? V10065))) false) (true (trap-error (let W10066 (str V10065) (shen.analyse-variable? W10066)) (lambda Z10067 false)))))

(defun shen.analyse-variable? (V10070) (cond ((shen.+string? V10070) (and (shen.uppercase? (string->n (hdstr V10070))) (shen.alphanums? (tlstr V10070)))) (true (simple-error "implementation error in shen.analyse-variable?"))))

(defun gensym (V10071) (concat V10071 (set shen.*gensym* (+ 1 (value shen.*gensym*)))))

(defun concat (V10072 V10073) (intern (cn (str V10072) (str V10073))))

(defun @p (V10074 V10075) (let W10076 (absvector 3) (let W10077 (address-> W10076 0 shen.tuple) (let W10078 (address-> W10076 1 V10074) (let W10079 (address-> W10076 2 V10075) W10076)))))

(defun fst (V10080) (<-address V10080 1))

(defun snd (V10081) (<-address V10081 2))

(defun tuple? (V10082) (trap-error (and (absvector? V10082) (= shen.tuple (<-address V10082 0))) (lambda Z10083 false)))

(defun append (V10088 V10089) (cond ((= () V10088) V10089) ((cons? V10088) (cons (hd V10088) (append (tl V10088) V10089))) (true (simple-error "attempt to append a non-list"))))

(defun @v (V10090 V10091) (let W10092 (limit V10091) (let W10093 (vector (+ W10092 1)) (let W10094 (vector-> W10093 1 V10090) (if (= W10092 0) W10094 (shen.@v-help V10091 1 W10092 W10094))))))

(defun shen.@v-help (V10096 V10097 V10098 V10099) (cond ((= V10097 V10098) (shen.copyfromvector V10096 V10099 V10098 (+ V10098 1))) (true (shen.@v-help V10096 (+ V10097 1) V10098 (shen.copyfromvector V10096 V10099 V10097 (+ V10097 1))))))

(defun shen.copyfromvector (V10100 V10101 V10102 V10103) (trap-error (vector-> V10101 V10103 (<-vector V10100 V10102)) (lambda Z10104 V10101)))

(defun hdv (V10105) (trap-error (<-vector V10105 1) (lambda Z10106 (simple-error "hdv needs a non-empty vector as an argument
"))))

(defun tlv (V10107) (let W10108 (limit V10107) (if (= W10108 0) (simple-error "cannot take the tail of the empty vector
") (if (= W10108 1) (vector 0) (let W10109 (vector (- W10108 1)) (shen.tlv-help V10107 2 W10108 (vector (- W10108 1))))))))

(defun shen.tlv-help (V10111 V10112 V10113 V10114) (cond ((= V10112 V10113) (shen.copyfromvector V10111 V10114 V10113 (- V10113 1))) (true (shen.tlv-help V10111 (+ V10112 1) V10113 (shen.copyfromvector V10111 V10114 V10112 (- V10112 1))))))

(defun assoc (V10126 V10127) (cond ((= () V10127) ()) ((and (cons? V10127) (and (cons? (hd V10127)) (= V10126 (hd (hd V10127))))) (hd V10127)) ((cons? V10127) (assoc V10126 (tl V10127))) (true (simple-error "attempt to search a non-list with assoc
"))))

(defun boolean? (V10130) (cond ((= true V10130) true) ((= false V10130) true) (true false)))

(defun nl (V10131) (cond ((= 0 V10131) 0) (true (do (pr "
" (stoutput)) (nl (- V10131 1))))))

(defun difference (V10138 V10139) (cond ((= () V10138) ()) ((cons? V10138) (if (element? (hd V10138) V10139) (difference (tl V10138) V10139) (cons (hd V10138) (difference (tl V10138) V10139)))) (true (simple-error "attempt to find the difference with a non-list
"))))

(defun do (V10140 V10141) V10141)

(defun element? (V10153 V10154) (cond ((= () V10154) false) ((and (cons? V10154) (= V10153 (hd V10154))) true) ((cons? V10154) (element? V10153 (tl V10154))) (true (simple-error "attempt to find an element in a non-list
"))))

(defun empty? (V10157) (cond ((= () V10157) true) (true false)))

(defun fix (V10158 V10159) (shen.fix-help V10158 V10159 (V10158 V10159)))

(defun shen.fix-help (V10165 V10166 V10167) (cond ((= V10166 V10167) V10167) (true (shen.fix-help V10165 V10167 (V10165 V10167)))))

(defun put (V10168 V10169 V10170 V10171) (let W10172 (hash V10168 (limit V10171)) (let W10173 (trap-error (<-vector V10171 W10172) (lambda Z10174 ())) (let W10175 (vector-> V10171 W10172 (shen.change-pointer-value V10168 V10169 V10170 W10173)) V10170))))

(defun unput (V10176 V10177 V10178) (let W10179 (hash V10176 (limit V10178)) (let W10180 (trap-error (<-vector V10178 W10179) (lambda Z10181 ())) (let W10182 (vector-> V10178 W10179 (shen.remove-pointer V10176 V10177 W10180)) V10176))))

(defun shen.remove-pointer (V10193 V10194 V10195) (cond ((= () V10195) ()) ((and (cons? V10195) (and (cons? (hd V10195)) (and (cons? (hd (hd V10195))) (and (cons? (tl (hd (hd V10195)))) (and (= () (tl (tl (hd (hd V10195))))) (and (= V10194 (hd (tl (hd (hd V10195))))) (= V10193 (hd (hd (hd V10195)))))))))) (tl V10195)) ((cons? V10195) (cons (hd V10195) (shen.remove-pointer V10193 V10194 (tl V10195)))) (true (simple-error "implementation error in shen.remove-pointer"))))

(defun shen.change-pointer-value (V10208 V10209 V10210 V10211) (cond ((= () V10211) (cons (cons (cons V10208 (cons V10209 ())) V10210) ())) ((and (cons? V10211) (and (cons? (hd V10211)) (and (cons? (hd (hd V10211))) (and (cons? (tl (hd (hd V10211)))) (and (= () (tl (tl (hd (hd V10211))))) (and (= V10209 (hd (tl (hd (hd V10211))))) (= V10208 (hd (hd (hd V10211)))))))))) (cons (cons (hd (hd V10211)) V10210) (tl V10211))) ((cons? V10211) (cons (hd V10211) (shen.change-pointer-value V10208 V10209 V10210 (tl V10211)))) (true (simple-error "implementation error in shen.change-pointer-value"))))

(defun get (V10212 V10213 V10214) (let W10215 (hash V10212 (limit V10214)) (let W10216 (trap-error (<-vector V10214 W10215) (lambda Z10217 (simple-error (shen.app V10212 (cn " has no attributes: " (shen.app V10213 "
" shen.s)) shen.a)))) (let W10218 (assoc (cons V10212 (cons V10213 ())) W10216) (if (empty? W10218) (simple-error (cn "attribute " (shen.app V10213 (cn " not found for " (shen.app V10212 "
" shen.s)) shen.s))) (tl W10218))))))

(defun hash (V10219 V10220) (let W10221 (shen.mod (shen.hashkey V10219) V10220) (if (= W10221 0) 1 W10221)))

(defun shen.hashkey (V10222) (let W10223 (map (lambda Z10224 (string->n Z10224)) (explode V10222)) (shen.prodbutzero W10223 1)))

(defun shen.prodbutzero (V10225 V10226) (cond ((= () V10225) V10226) ((and (cons? V10225) (= 0 (hd V10225))) (shen.prodbutzero (tl V10225) V10226)) ((cons? V10225) (if (> V10226 10000000000) (shen.prodbutzero (tl V10225) (+ V10226 (hd V10225))) (shen.prodbutzero (tl V10225) (* V10226 (hd V10225))))) (true (shen.f-error shen.prodbutzero))))

(defun shen.mod (V10227 V10228) (shen.modh V10227 (shen.multiples V10227 (cons V10228 ()))))

(defun shen.multiples (V10233 V10234) (cond ((and (cons? V10234) (> (hd V10234) V10233)) (tl V10234)) ((cons? V10234) (shen.multiples V10233 (cons (* 2 (hd V10234)) V10234))) (true (simple-error "implementation error in shen.multiples"))))

(defun shen.modh (V10241 V10242) (cond ((= 0 V10241) 0) ((= () V10242) V10241) ((and (cons? V10242) (> (hd V10242) V10241)) (if (empty? (tl V10242)) V10241 (shen.modh V10241 (tl V10242)))) ((cons? V10242) (shen.modh (- V10241 (hd V10242)) V10242)) (true (simple-error "implementation error in shen.modh"))))

(defun sum (V10245) (cond ((= () V10245) 0) ((cons? V10245) (+ (hd V10245) (sum (tl V10245)))) (true (simple-error "attempt to sum a non-list
"))))

(defun head (V10250) (cond ((cons? V10250) (hd V10250)) (true (simple-error "head expects a non-empty list
"))))

(defun tail (V10255) (cond ((cons? V10255) (tl V10255)) (true (simple-error "tail expects a non-empty list
"))))

(defun hdstr (V10256) (pos V10256 0))

(defun intersection (V10263 V10264) (cond ((= () V10263) ()) ((cons? V10263) (if (element? (hd V10263) V10264) (cons (hd V10263) (intersection (tl V10263) V10264)) (intersection (tl V10263) V10264))) (true (simple-error "attempt to find the intersection with a non-list
"))))

(defun reverse (V10265) (shen.reverse-help V10265 ()))

(defun shen.reverse-help (V10270 V10271) (cond ((= () V10270) V10271) ((cons? V10270) (shen.reverse-help (tl V10270) (cons (hd V10270) V10271))) (true (simple-error "attempt to reverse a non-list
"))))

(defun union (V10276 V10277) (cond ((= () V10276) V10277) ((cons? V10276) (if (element? (hd V10276) V10277) (union (tl V10276) V10277) (cons (hd V10276) (union (tl V10276) V10277)))) (true (simple-error "attempt to find the union with a non-list
"))))

(defun y-or-n? (V10278) (let W10279 (pr (shen.proc-nl V10278) (stoutput)) (let W10280 (pr " (y/n) " (stoutput)) (let W10281 (shen.app (read (stinput)) "" shen.s) (if (= "y" W10281) true (if (= "n" W10281) false (do (pr "please answer y or n
" (stoutput)) (y-or-n? V10278))))))))

(defun not (V10282) (if V10282 false true))

(defun abort () (simple-error ""))

(defun subst (V10288 V10289 V10290) (cond ((= V10289 V10290) V10288) ((cons? V10290) (cons (subst V10288 V10289 (hd V10290)) (subst V10288 V10289 (tl V10290)))) (true V10290)))

(defun explode (V10291) (shen.explode-h (shen.app V10291 "" shen.a)))

(defun shen.explode-h (V10294) (cond ((= "" V10294) ()) ((shen.+string? V10294) (cons (hdstr V10294) (shen.explode-h (tlstr V10294)))) (true (simple-error "implementation error in explode-h"))))

(defun cd (V10295) (set *home-directory* (if (= V10295 "") "" (shen.app V10295 "/" shen.a))))

(defun map (V10296 V10297) (shen.map-h V10296 V10297 ()))

(defun shen.map-h (V10298 V10299 V10300) (cond ((= () V10299) (reverse V10300)) ((cons? V10299) (shen.map-h V10298 (tl V10299) (cons (V10298 (hd V10299)) V10300))) (true (shen.f-error shen.map-h))))

(defun length (V10301) (shen.length-h V10301 0))

(defun shen.length-h (V10306 V10307) (cond ((= () V10306) V10307) (true (shen.length-h (tl V10306) (+ V10307 1)))))

(defun occurrences (V10313 V10314) (cond ((= V10313 V10314) 1) ((cons? V10314) (+ (occurrences V10313 (hd V10314)) (occurrences V10313 (tl V10314)))) (true 0)))

(defun nth (V10319 V10320) (cond ((and (= 1 V10319) (cons? V10320)) (hd V10320)) ((cons? V10320) (nth (- V10319 1) (tl V10320))) (true (simple-error (cn "nth applied to " (shen.app V10319 (cn ", " (shen.app V10320 "
" shen.a)) shen.a))))))

(defun integer? (V10321) (and (number? V10321) (let W10322 (shen.abs V10321) (shen.integer-test? W10322 (shen.magless W10322 1)))))

(defun shen.abs (V10323) (if (> V10323 0) V10323 (- 0 V10323)))

(defun shen.magless (V10324 V10325) (let W10326 (* V10325 2) (if (> W10326 V10324) V10325 (shen.magless V10324 W10326))))

(defun shen.integer-test? (V10330 V10331) (cond ((= 0 V10330) true) ((> 1 V10330) false) (true (let W10332 (- V10330 V10331) (if (> 0 W10332) (integer? V10330) (shen.integer-test? W10332 V10331))))))

(defun mapcan (V10339 V10340) (cond ((= () V10340) ()) ((cons? V10340) (append (V10339 (hd V10340)) (mapcan V10339 (tl V10340)))) (true (simple-error "attempt to mapcan over a non-list
"))))

(defun == (V10346 V10347) (cond ((= V10346 V10347) true) (true false)))

(defun bound? (V10348) (and (symbol? V10348) (let W10349 (trap-error (value V10348) (lambda Z10350 shen.this-symbol-is-unbound)) (if (= W10349 shen.this-symbol-is-unbound) false true))))

(defun shen.string->bytes (V10351) (cond ((= "" V10351) ()) (true (cons (string->n (pos V10351 0)) (shen.string->bytes (tlstr V10351))))))

(defun maxinferences (V10352) (set shen.*maxinferences* V10352))

(defun inferences () (value shen.*infs*))

(defun protect (V10353) V10353)

(defun stoutput () (value *stoutput*))

(defun string->symbol (V10354) (let W10355 (intern V10354) (if (symbol? W10355) W10355 (simple-error (cn "cannot intern " (shen.app V10354 " to a symbol" shen.s))))))

(defun optimise (V10358) (cond ((= + V10358) (set shen.*optimise* true)) ((= - V10358) (set shen.*optimise* false)) (true (simple-error "optimise expects a + or a -.
"))))

(defun os () (value *os*))

(defun language () (value *language*))

(defun version () (value *version*))

(defun port () (value *port*))

(defun porters () (value *porters*))

(defun implementation () (value *implementation*))

(defun release () (value *release*))

(defun package? (V10359) (cond ((= null V10359) true) (true (trap-error (do (external V10359) true) (lambda Z10360 false)))))

(defun fail () shen.fail!)(defun enable-type-theory (V10363) (cond ((= + V10363) (set shen.*shen-type-theory-enabled?* true)) ((= - V10363) (set shen.*shen-type-theory-enabled?* false)) (true (simple-error "enable-type-theory expects a + or a -
"))))

(defun tc (V10366) (cond ((= + V10366) (set shen.*tc* true)) ((= - V10366) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun destroy (V10367) (do (shen.unassoc V10367 (value shen.*sigf*)) V10367))

(defun shen.unassoc (V10368 V10369) (let W10370 (assoc V10368 V10369) (let W10371 (remove W10370 V10369) (set shen.*sigf* W10371))))

(defun in-package (V10372) (if (package? V10372) (set shen.*package* V10372) (simple-error (cn "package " (shen.app V10372 " does not exist
" shen.a)))))

(defun write-to-file (V10373 V10374) (let W10375 (open V10373 out) (let W10376 (if (string? V10374) (shen.app V10374 "

" shen.a) (shen.app V10374 "

" shen.s)) (let W10377 (pr W10376 W10375) (let W10378 (close W10375) V10374)))))

(defun fresh () (shen.freshterm (gensym shen.t)))

(defun update-lambda-table (V10379 V10380) (let W10381 (put V10379 arity V10380 (value *property-vector*)) (let W10382 (shen.lambda-entry V10379) (let W10383 (set shen.*lambdatable* (cons W10382 (value shen.*lambdatable*))) V10379))))

(defun specialise (V10386 V10387) (cond ((= 0 V10387) (do (set shen.*special* (remove V10386 (value shen.*special*))) (do (set shen.*extraspecial* (remove V10386 (value shen.*extraspecial*))) V10386))) ((= 1 V10387) (do (set shen.*special* (adjoin V10386 (value shen.*special*))) (do (set shen.*extraspecial* (remove V10386 (value shen.*extraspecial*))) V10386))) ((= 2 V10387) (do (set shen.*special* (remove V10386 (value shen.*special*))) (do (set shen.*extraspecial* (adjoin V10386 (value shen.*extraspecial*))) V10386))) (true (simple-error "specialise requires values of 0, 1 or 2
"))))

