(defun shen.shen->kl (V7177) (let W7178 (shen.shen->kl-h V7177) (shen.record-and-evaluate W7178)))

(defun shen.record-and-evaluate (V7179) (cond ((and (cons? V7179) (and (= defun (hd V7179)) (and (cons? (tl V7179)) (and (cons? (tl (tl V7179))) (and (cons? (tl (tl (tl V7179)))) (= () (tl (tl (tl (tl V7179)))))))))) (let W7180 (if (shen.sysfunc? (hd (tl V7179))) (simple-error (shen.app (hd (tl V7179)) " is not a legitimate function name
" shen.a)) shen.skip) (let W7181 (shen.store-arity (hd (tl V7179)) (length (hd (tl (tl V7179))))) (let W7182 (shen.record-kl (hd (tl V7179)) V7179) (let W7183 (eval-kl V7179) (shen.fn-print (hd (tl V7179)))))))) (true V7179)))

(defun shen.shen->kl-h (V7184) (cond ((and (cons? V7184) (and (= define (hd V7184)) (cons? (tl V7184)))) (shen.shendef->kldef (hd (tl V7184)) (tl (tl V7184)))) ((and (cons? V7184) (and (= defun (hd V7184)) (and (cons? (tl V7184)) (and (cons? (tl (tl V7184))) (and (cons? (tl (tl (tl V7184)))) (= () (tl (tl (tl (tl V7184)))))))))) V7184) ((and (cons? V7184) (and (= type (hd V7184)) (and (cons? (tl V7184)) (and (cons? (tl (tl V7184))) (= () (tl (tl (tl V7184)))))))) (cons type (cons (hd (tl V7184)) (cons (shen.rcons_form (hd (tl (tl V7184)))) ())))) ((and (cons? V7184) (and (= input+ (hd V7184)) (and (cons? (tl V7184)) (and (cons? (tl (tl V7184))) (= () (tl (tl (tl V7184)))))))) (cons input+ (cons (shen.rcons_form (hd (tl V7184))) (tl (tl V7184))))) ((cons? V7184) (map (lambda Z7185 (shen.shen->kl-h Z7185)) V7184)) (true V7184)))

(defun shen.shendef->kldef (V7186 V7187) (compile (lambda Z7188 (shen.<define> Z7188)) (cons V7186 V7187)))

(defun shen.<define> (V7189) (let W7190 (let W7191 (shen.<name> V7189) (if (shen.parse-failure? W7191) (shen.parse-failure) (if (shen.=hd? W7191 {) (let W7192 (shen.tls W7191) (let W7193 (shen.<signature> W7192) (if (shen.parse-failure? W7193) (shen.parse-failure) (if (shen.=hd? W7193 }) (let W7194 (shen.tls W7193) (let W7195 (shen.<rules> W7194) (if (shen.parse-failure? W7195) (shen.parse-failure) (shen.comb (shen.in-> W7195) (shen.shendef->kldef-h (shen.<-out W7191) (shen.<-out W7195)))))) (shen.parse-failure))))) (shen.parse-failure)))) (if (shen.parse-failure? W7190) (let W7196 (let W7197 (shen.<name> V7189) (if (shen.parse-failure? W7197) (shen.parse-failure) (let W7198 (shen.<rules> W7197) (if (shen.parse-failure? W7198) (shen.parse-failure) (shen.comb (shen.in-> W7198) (shen.shendef->kldef-h (shen.<-out W7197) (shen.<-out W7198))))))) (if (shen.parse-failure? W7196) (shen.parse-failure) W7196)) W7190)))

(defun shen.shendef->kldef-h (V7199 V7200) (let W7201 (map (lambda Z7202 (fst Z7202)) V7200) (let W7203 (shen.arity-chk V7199 W7201) (let W7204 (map (lambda Z7205 (shen.free-var-chk V7199 Z7205)) V7200) (let W7206 (shen.unprotect V7200) (let W7207 (shen.factorise-code (shen.compile-to-kl V7199 W7206 W7203)) W7207))))))

(defun shen.unprotect (V7208) (cond ((tuple? V7208) (@p (shen.unprotect (fst V7208)) (shen.unprotect (snd V7208)))) ((and (cons? V7208) (and (= protect (hd V7208)) (and (cons? (tl V7208)) (= () (tl (tl V7208)))))) (shen.unprotect (hd (tl V7208)))) ((cons? V7208) (map (lambda Z7209 (shen.unprotect Z7209)) V7208)) (true V7208)))

(defun shen.<name> (V7210) (let W7211 (if (shen.non-empty-stream? V7210) (let W7212 (shen.hds V7210) (let W7213 (shen.tls V7210) (shen.comb (shen.in-> W7213) (if (and (symbol? W7212) (not (variable? W7212))) W7212 (simple-error (shen.app W7212 " is not a legitimate function name.
" shen.a)))))) (shen.parse-failure)) (if (shen.parse-failure? W7211) (shen.parse-failure) W7211)))

(defun shen.<signature> (V7214) (let W7215 (if (shen.non-empty-stream? V7214) (let W7216 (shen.hds V7214) (let W7217 (shen.tls V7214) (let W7218 (shen.<signature> W7217) (if (shen.parse-failure? W7218) (shen.parse-failure) (if (not (element? W7216 (cons { (cons } ())))) (shen.comb (shen.in-> W7218) (cons W7216 (shen.<-out W7218))) (shen.parse-failure)))))) (shen.parse-failure)) (if (shen.parse-failure? W7215) (let W7219 (let W7220 (<e> V7214) (if (shen.parse-failure? W7220) (shen.parse-failure) (shen.comb (shen.in-> W7220) ()))) (if (shen.parse-failure? W7219) (shen.parse-failure) W7219)) W7215)))

(defun shen.<rules> (V7221) (let W7222 (let W7223 (shen.<rule> V7221) (if (shen.parse-failure? W7223) (shen.parse-failure) (let W7224 (shen.<rules> W7223) (if (shen.parse-failure? W7224) (shen.parse-failure) (shen.comb (shen.in-> W7224) (cons (shen.linearise (shen.<-out W7223)) (shen.<-out W7224))))))) (if (shen.parse-failure? W7222) (let W7225 (let W7226 (<!> V7221) (if (shen.parse-failure? W7226) (shen.parse-failure) (shen.comb (shen.in-> W7226) (if (empty? (shen.<-out W7226)) () (simple-error (cn "Shen syntax error here:
 " (shen.app (shen.<-out W7226) "
 ..." shen.r))))))) (if (shen.parse-failure? W7225) (shen.parse-failure) W7225)) W7222)))

(defun shen.linearise (V7229) (cond ((tuple? V7229) (shen.linearise-h (fst V7229) (fst V7229) () (snd V7229))) (true (simple-error "implementation error in shen.linearise"))))

(defun shen.linearise-h (V7242 V7243 V7244 V7245) (cond ((= () V7242) (@p V7243 V7245)) ((and (cons? V7242) (cons? (hd V7242))) (shen.linearise-h (append (hd V7242) (tl V7242)) V7243 V7244 V7245)) ((and (cons? V7242) (variable? (hd V7242))) (if (element? (hd V7242) V7244) (let W7246 (gensym V) (shen.linearise-h (tl V7242) (shen.rep-X (hd V7242) W7246 V7243) V7244 (cons where (cons (cons = (cons W7246 (cons (hd V7242) ()))) (cons V7245 ()))))) (shen.linearise-h (tl V7242) V7243 (cons (hd V7242) V7244) V7245))) ((cons? V7242) (shen.linearise-h (tl V7242) V7243 V7244 V7245)) (true (simple-error "implementation error in shen.linearise-h"))))

(defun shen.<rule> (V7247) (let W7248 (let W7249 (shen.<patterns> V7247) (if (shen.parse-failure? W7249) (shen.parse-failure) (if (shen.=hd? W7249 ->) (let W7250 (shen.tls W7249) (if (shen.non-empty-stream? W7250) (let W7251 (shen.hds W7250) (let W7252 (shen.tls W7250) (if (shen.=hd? W7252 where) (let W7253 (shen.tls W7252) (if (shen.non-empty-stream? W7253) (let W7254 (shen.hds W7253) (let W7255 (shen.tls W7253) (shen.comb (shen.in-> W7255) (@p (shen.<-out W7249) (cons where (cons W7254 (cons W7251 ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? W7248) (let W7256 (let W7257 (shen.<patterns> V7247) (if (shen.parse-failure? W7257) (shen.parse-failure) (if (shen.=hd? W7257 ->) (let W7258 (shen.tls W7257) (if (shen.non-empty-stream? W7258) (let W7259 (shen.hds W7258) (let W7260 (shen.tls W7258) (shen.comb (shen.in-> W7260) (@p (shen.<-out W7257) W7259)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? W7256) (let W7261 (let W7262 (shen.<patterns> V7247) (if (shen.parse-failure? W7262) (shen.parse-failure) (if (shen.=hd? W7262 <-) (let W7263 (shen.tls W7262) (if (shen.non-empty-stream? W7263) (let W7264 (shen.hds W7263) (let W7265 (shen.tls W7263) (if (shen.=hd? W7265 where) (let W7266 (shen.tls W7265) (if (shen.non-empty-stream? W7266) (let W7267 (shen.hds W7266) (let W7268 (shen.tls W7266) (shen.comb (shen.in-> W7268) (@p (shen.<-out W7262) (cons where (cons W7267 (cons (cons shen.choicepoint! (cons W7264 ())) ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? W7261) (let W7269 (let W7270 (shen.<patterns> V7247) (if (shen.parse-failure? W7270) (shen.parse-failure) (if (shen.=hd? W7270 <-) (let W7271 (shen.tls W7270) (if (shen.non-empty-stream? W7271) (let W7272 (shen.hds W7271) (let W7273 (shen.tls W7271) (shen.comb (shen.in-> W7273) (@p (shen.<-out W7270) (cons shen.choicepoint! (cons W7272 ())))))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? W7269) (shen.parse-failure) W7269)) W7261)) W7256)) W7248)))

(defun shen.<patterns> (V7274) (let W7275 (let W7276 (shen.<pattern> V7274) (if (shen.parse-failure? W7276) (shen.parse-failure) (let W7277 (shen.<patterns> W7276) (if (shen.parse-failure? W7277) (shen.parse-failure) (shen.comb (shen.in-> W7277) (cons (shen.<-out W7276) (shen.<-out W7277))))))) (if (shen.parse-failure? W7275) (let W7278 (let W7279 (<e> V7274) (if (shen.parse-failure? W7279) (shen.parse-failure) (shen.comb (shen.in-> W7279) ()))) (if (shen.parse-failure? W7278) (shen.parse-failure) W7278)) W7275)))

(defun shen.<pattern> (V7280) (let W7281 (if (shen.ccons? V7280) (let W7282 (shen.comb (shen.hds V7280) (shen.<-out V7280)) (let W7283 (shen.<constructor> W7282) (if (shen.parse-failure? W7283) (shen.parse-failure) (let W7284 (shen.<pattern1> W7283) (if (shen.parse-failure? W7284) (shen.parse-failure) (let W7285 (shen.<pattern2> W7284) (if (shen.parse-failure? W7285) (shen.parse-failure) (let W7286 (shen.<end> W7285) (if (shen.parse-failure? W7286) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7280)) (cons (shen.<-out W7283) (cons (shen.<-out W7284) (cons (shen.<-out W7285) ()))))))))))))) (shen.parse-failure)) (if (shen.parse-failure? W7281) (let W7287 (if (shen.ccons? V7280) (let W7288 (shen.comb (shen.hds V7280) (shen.<-out V7280)) (if (shen.=hd? W7288 vector) (let W7289 (shen.tls W7288) (if (shen.=hd? W7289 0) (let W7290 (shen.tls W7289) (let W7291 (shen.<end> W7290) (if (shen.parse-failure? W7291) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V7280)) (cons vector (cons 0 ())))))) (shen.parse-failure))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W7287) (let W7292 (if (shen.non-empty-stream? V7280) (let W7293 (shen.hds V7280) (let W7294 (shen.tls V7280) (if (cons? W7293) (shen.comb (shen.in-> W7294) (shen.constructor-error W7293)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W7292) (let W7295 (let W7296 (shen.<simple-pattern> V7280) (if (shen.parse-failure? W7296) (shen.parse-failure) (shen.comb (shen.in-> W7296) (shen.<-out W7296)))) (if (shen.parse-failure? W7295) (shen.parse-failure) W7295)) W7292)) W7287)) W7281)))

(defun shen.<constructor> (V7297) (let W7298 (if (shen.non-empty-stream? V7297) (let W7299 (shen.hds V7297) (let W7300 (shen.tls V7297) (if (shen.constructor? W7299) (shen.comb (shen.in-> W7300) W7299) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W7298) (shen.parse-failure) W7298)))

(defun shen.constructor? (V7301) (element? V7301 (cons cons (cons @p (cons @s (cons @v ()))))))

(defun shen.constructor-error (V7302) (simple-error (shen.app V7302 " is not a legitimate constructor
" shen.r)))

(defun shen.<simple-pattern> (V7303) (let W7304 (if (shen.non-empty-stream? V7303) (let W7305 (shen.hds V7303) (let W7306 (shen.tls V7303) (if (= W7305 _) (shen.comb (shen.in-> W7306) (gensym Y)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W7304) (let W7307 (if (shen.non-empty-stream? V7303) (let W7308 (shen.hds V7303) (let W7309 (shen.tls V7303) (if (not (element? W7308 (cons -> (cons <- ())))) (shen.comb (shen.in-> W7309) W7308) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W7307) (shen.parse-failure) W7307)) W7304)))

(defun shen.<pattern1> (V7310) (let W7311 (let W7312 (shen.<pattern> V7310) (if (shen.parse-failure? W7312) (shen.parse-failure) (shen.comb (shen.in-> W7312) (shen.<-out W7312)))) (if (shen.parse-failure? W7311) (shen.parse-failure) W7311)))

(defun shen.<pattern2> (V7313) (let W7314 (let W7315 (shen.<pattern> V7313) (if (shen.parse-failure? W7315) (shen.parse-failure) (shen.comb (shen.in-> W7315) (shen.<-out W7315)))) (if (shen.parse-failure? W7314) (shen.parse-failure) W7314)))

(defun shen.fn-print (V7316) (let W7317 (absvector 2) (let W7318 (address-> W7317 0 shen.printF) (let W7319 (address-> W7318 1 (@s "(" (@s "f" (@s "n" (@s " " (@s (str V7316) ")")))))) W7319))))

(defun shen.printF (V7320) (<-address V7320 1))

(defun shen.arity-chk (V7325 V7326) (cond ((and (cons? V7326) (= () (tl V7326))) (length (hd V7326))) ((and (cons? V7326) (and (cons? (tl V7326)) (= (length (hd V7326)) (length (hd (tl V7326)))))) (shen.arity-chk V7325 (tl V7326))) (true (simple-error (cn "arity error in " (shen.app V7325 "
" shen.a))))))

(defun shen.free-var-chk (V7327 V7328) (cond ((tuple? V7328) (shen.free-variable-error-message V7327 (shen.find-free-vars (shen.extract-vars (fst V7328)) (snd V7328)))) (true (shen.f-error shen.free-var-chk))))

(defun shen.free-variable-error-message (V7329 V7330) (if (empty? V7330) shen.skip (do (pr (cn "free variables in " (shen.app V7329 ":" shen.a)) (stoutput)) (do (map (lambda Z7331 (pr (cn " " (shen.app Z7331 "" shen.a)) (stoutput))) V7330) (do (nl 1) (abort))))))

(defun shen.extract-vars (V7334) (cond ((variable? V7334) (cons V7334 ())) ((cons? V7334) (union (shen.extract-vars (hd V7334)) (shen.extract-vars (tl V7334)))) (true ())))

(defun shen.find-free-vars (V7339 V7340) (cond ((and (cons? V7340) (and (= protect (hd V7340)) (and (cons? (tl V7340)) (= () (tl (tl V7340)))))) ()) ((and (cons? V7340) (and (= let (hd V7340)) (and (cons? (tl V7340)) (and (cons? (tl (tl V7340))) (and (cons? (tl (tl (tl V7340)))) (= () (tl (tl (tl (tl V7340)))))))))) (union (shen.find-free-vars V7339 (hd (tl (tl V7340)))) (shen.find-free-vars (cons (hd (tl V7340)) V7339) (hd (tl (tl (tl V7340))))))) ((and (cons? V7340) (and (= lambda (hd V7340)) (and (cons? (tl V7340)) (and (cons? (tl (tl V7340))) (= () (tl (tl (tl V7340)))))))) (shen.find-free-vars (cons (hd (tl V7340)) V7339) (hd (tl (tl V7340))))) ((cons? V7340) (union (shen.find-free-vars V7339 (hd V7340)) (shen.find-free-vars V7339 (tl V7340)))) ((shen.free-variable? V7340 V7339) (cons V7340 ())) (true ())))

(defun shen.free-variable? (V7341 V7342) (and (variable? V7341) (not (element? V7341 V7342))))

(defun shen.record-kl (V7343 V7344) (put V7343 shen.source V7344 (value *property-vector*)))

(defun shen.compile-to-kl (V7345 V7346 V7347) (let W7348 (shen.parameters V7347) (let W7349 (shen.scan-body V7345 (shen.kl-body V7346 W7348)) (let W7350 (cons defun (cons V7345 (cons W7348 (cons (shen.cond-form W7349) ())))) W7350))))

(defun shen.parameters (V7351) (cond ((= 0 V7351) ()) (true (cons (gensym V) (shen.parameters (- V7351 1))))))

(defun shen.cond-form (V7354) (cond ((and (cons? V7354) (and (cons? (hd V7354)) (and (= true (hd (hd V7354))) (and (cons? (tl (hd V7354))) (= () (tl (tl (hd V7354)))))))) (hd (tl (hd V7354)))) (true (cons cond V7354))))

(defun shen.scan-body (V7363 V7364) (cond ((= () V7364) (cons (cons true (cons (cons shen.f-error (cons V7363 ())) ())) ())) ((and (cons? V7364) (shen.choicepoint? (hd V7364))) (shen.choicepoint V7363 (gensym Freeze) (gensym Result) (hd V7364) (tl V7364))) ((and (cons? V7364) (and (cons? (hd V7364)) (and (= true (hd (hd V7364))) (and (cons? (tl (hd V7364))) (= () (tl (tl (hd V7364)))))))) (cons (hd V7364) ())) ((cons? V7364) (cons (hd V7364) (shen.scan-body V7363 (tl V7364)))) (true (simple-error "implementation error in shen.scan-body"))))

(defun shen.choicepoint? (V7371) (cond ((and (cons? V7371) (and (cons? (tl V7371)) (and (cons? (hd (tl V7371))) (and (= shen.choicepoint! (hd (hd (tl V7371)))) (and (cons? (tl (hd (tl V7371)))) (and (= () (tl (tl (hd (tl V7371))))) (= () (tl (tl V7371))))))))) true) (true false)))

(defun shen.choicepoint (V7387 V7388 V7389 V7390 V7391) (cond ((and (cons? V7390) (and (cons? (tl V7390)) (and (cons? (hd (tl V7390))) (and (cons? (tl (hd (tl V7390)))) (and (cons? (hd (tl (hd (tl V7390))))) (and (= fail-if (hd (hd (tl (hd (tl V7390)))))) (and (cons? (tl (hd (tl (hd (tl V7390)))))) (and (cons? (tl (tl (hd (tl (hd (tl V7390))))))) (and (= () (tl (tl (tl (hd (tl (hd (tl V7390)))))))) (and (= () (tl (tl (hd (tl V7390))))) (and (= () (tl (tl V7390))) (= V7387 (hd (tl (hd (tl (hd (tl V7390)))))))))))))))))) (cons (cons true (cons (cons let (cons V7388 (cons (cons freeze (cons (cons cond (shen.scan-body (hd (tl (hd (tl (hd (tl V7390)))))) V7391)) ())) (cons (cons if (cons (hd V7390) (cons (cons let (cons V7389 (cons (hd (tl (tl (hd (tl (hd (tl V7390))))))) (cons (cons if (cons (cons (hd (tl (hd (tl (hd (tl V7390)))))) (cons V7389 ())) (cons (cons thaw (cons V7388 ())) (cons V7389 ())))) ())))) (cons (cons thaw (cons V7388 ())) ())))) ())))) ())) ())) ((and (cons? V7390) (and (cons? (tl V7390)) (and (cons? (hd (tl V7390))) (and (cons? (tl (hd (tl V7390)))) (and (= () (tl (tl (hd (tl V7390))))) (= () (tl (tl V7390)))))))) (cons (cons true (cons (cons let (cons V7388 (cons (cons freeze (cons (cons cond (shen.scan-body V7387 V7391)) ())) (cons (cons if (cons (hd V7390) (cons (cons let (cons V7389 (cons (hd (tl (hd (tl V7390)))) (cons (cons if (cons (cons = (cons V7389 (cons (cons fail ()) ()))) (cons (cons thaw (cons V7388 ())) (cons V7389 ())))) ())))) (cons (cons thaw (cons V7388 ())) ())))) ())))) ())) ())) (true (simple-error "implementation error in shen.choicepoint"))))

(defun shen.rep-X (V7393 V7394 V7395) (cond ((= V7393 V7395) V7394) ((cons? V7395) (let W7396 (shen.rep-X V7393 V7394 (hd V7395)) (if (= W7396 (hd V7395)) (cons (hd V7395) (shen.rep-X V7393 V7394 (tl V7395))) (cons W7396 (tl V7395))))) (true V7395)))

(defun shen.kl-body (V7397 V7398) (map (lambda Z7399 (shen.triple-stack () (fst Z7399) V7398 (shen.alpha-convert (snd Z7399)))) V7397))

(defun shen.alpha-convert (V7400) (cond ((and (cons? V7400) (and (= lambda (hd V7400)) (and (cons? (tl V7400)) (and (cons? (tl (tl V7400))) (= () (tl (tl (tl V7400)))))))) (let W7401 (gensym Z) (let W7402 (cons lambda (cons W7401 (cons (shen.beta (hd (tl V7400)) W7401 (hd (tl (tl V7400)))) ()))) (map (lambda Z7403 (shen.alpha-convert Z7403)) W7402)))) ((and (cons? V7400) (and (= let (hd V7400)) (and (cons? (tl V7400)) (and (cons? (tl (tl V7400))) (and (cons? (tl (tl (tl V7400)))) (= () (tl (tl (tl (tl V7400)))))))))) (let W7404 (gensym W) (let W7405 (cons let (cons W7404 (cons (hd (tl (tl V7400))) (cons (shen.beta (hd (tl V7400)) W7404 (hd (tl (tl (tl V7400))))) ())))) (map (lambda Z7406 (shen.alpha-convert Z7406)) W7405)))) ((cons? V7400) (map (lambda Z7407 (shen.alpha-convert Z7407)) V7400)) (true V7400)))

(defun shen.triple-stack (V7416 V7417 V7418 V7419) (cond ((and (= () V7417) (and (= () V7418) (and (cons? V7419) (and (= where (hd V7419)) (and (cons? (tl V7419)) (and (cons? (tl (tl V7419))) (= () (tl (tl (tl V7419)))))))))) (shen.triple-stack (cons (hd (tl V7419)) V7416) () () (hd (tl (tl V7419))))) ((and (= () V7417) (= () V7418)) (cons (shen.rectify-test (reverse V7416)) (cons V7419 ()))) ((and (cons? V7417) (and (cons? V7418) (variable? (hd V7417)))) (shen.triple-stack V7416 (tl V7417) (tl V7418) (shen.beta (hd V7417) (hd V7418) V7419))) ((and (cons? V7417) (and (cons? (hd V7417)) (and (cons? (tl (hd V7417))) (and (cons? (tl (tl (hd V7417)))) (and (= () (tl (tl (tl (hd V7417))))) (cons? V7418)))))) (shen.triple-stack (cons (cons (shen.op-test (hd (hd V7417))) (cons (hd V7418) ())) V7416) (cons (hd (tl (hd V7417))) (cons (hd (tl (tl (hd V7417)))) (tl V7417))) (cons (cons (shen.op1 (hd (hd V7417))) (cons (hd V7418) ())) (cons (cons (shen.op2 (hd (hd V7417))) (cons (hd V7418) ())) (tl V7418))) (shen.beta (hd V7417) (hd V7418) V7419))) ((and (cons? V7417) (cons? V7418)) (shen.triple-stack (cons (cons = (cons (hd V7417) (cons (hd V7418) ()))) V7416) (tl V7417) (tl V7418) V7419)) (true (simple-error "implementation error in shen.triple-stack"))))

(defun shen.rectify-test (V7422) (cond ((= () V7422) true) ((and (cons? V7422) (= () (tl V7422))) (hd V7422)) ((and (cons? V7422) (cons? (tl V7422))) (cons and (cons (hd V7422) (cons (shen.rectify-test (tl V7422)) ())))) (true (simple-error "implementation error in shen.rectify-test"))))

(defun shen.beta (V7432 V7433 V7434) (cond ((= V7432 V7434) V7433) ((and (cons? V7434) (and (= lambda (hd V7434)) (and (cons? (tl V7434)) (and (cons? (tl (tl V7434))) (and (= () (tl (tl (tl V7434)))) (= V7432 (hd (tl V7434)))))))) V7434) ((and (cons? V7434) (and (= let (hd V7434)) (and (cons? (tl V7434)) (and (cons? (tl (tl V7434))) (and (cons? (tl (tl (tl V7434)))) (and (= () (tl (tl (tl (tl V7434))))) (= V7432 (hd (tl V7434))))))))) (cons let (cons (hd (tl V7434)) (cons (shen.beta (hd (tl V7434)) V7433 (hd (tl (tl V7434)))) (tl (tl (tl V7434))))))) ((cons? V7434) (map (lambda Z7435 (shen.beta V7432 V7433 Z7435)) V7434)) (true V7434)))

(defun shen.op1 (V7438) (cond ((= cons V7438) hd) ((= @s V7438) hdstr) ((= @p V7438) fst) ((= @v V7438) hdv) (true (simple-error "implementation error in shen.op1"))))

(defun shen.op2 (V7441) (cond ((= cons V7441) tl) ((= @s V7441) tlstr) ((= @p V7441) snd) ((= @v V7441) tlv) (true (simple-error "implementation error in shen.op2"))))

(defun shen.op-test (V7444) (cond ((= cons V7444) cons?) ((= @s V7444) shen.+string?) ((= @p V7444) tuple?) ((= @v V7444) shen.+vector?) (true (simple-error "implementation error in shen.op-test"))))

(defun shen.+string? (V7445) (cond ((= "" V7445) false) (true (string? V7445))))

(defun shen.+vector? (V7446) (cond ((= V7446 (vector 0)) false) (true (vector? V7446))))

(defun factorise (V7449) (cond ((= + V7449) (set shen.*factorise?* true)) ((= - V7449) (set shen.*factorise?* false)) (true (simple-error "factorise expects a + or a -
"))))

(defun shen.factorise-code (V7450) (cond ((and (cons? V7450) (and (= defun (hd V7450)) (and (cons? (tl V7450)) (and (cons? (tl (tl V7450))) (and (cons? (tl (tl (tl V7450)))) (and (cons? (hd (tl (tl (tl V7450))))) (and (= cond (hd (hd (tl (tl (tl V7450)))))) (and (= () (tl (tl (tl (tl V7450))))) (value shen.*factorise?*))))))))) (cons defun (cons (hd (tl V7450)) (cons (hd (tl (tl V7450))) (cons (shen.vertical (hd (tl (tl V7450))) (tl (hd (tl (tl (tl V7450))))) (cons shen.f-error (cons (hd (tl V7450)) ()))) ()))))) (true V7450)))

(defun shen.vertical (V7463 V7464 V7465) (cond ((and (cons? V7464) (and (cons? (hd V7464)) (and (= true (hd (hd V7464))) (and (cons? (tl (hd V7464))) (= () (tl (tl (hd V7464)))))))) (hd (tl (hd V7464)))) ((= () V7464) V7465) ((and (cons? V7464) (and (cons? (hd V7464)) (and (cons? (hd (hd V7464))) (and (= and (hd (hd (hd V7464)))) (and (cons? (tl (hd (hd V7464)))) (and (cons? (tl (tl (hd (hd V7464))))) (and (= () (tl (tl (tl (hd (hd V7464)))))) (and (cons? (tl (hd V7464))) (= () (tl (tl (hd V7464)))))))))))) (let W7466 (shen.split-cases (hd (tl (hd (hd V7464)))) V7464 ()) (shen.branch (hd (tl (hd (hd V7464)))) V7463 W7466 V7465))) ((and (cons? V7464) (and (cons? (hd V7464)) (and (cons? (tl (hd V7464))) (= () (tl (tl (hd V7464))))))) (cons if (cons (hd (hd V7464)) (cons (hd (tl (hd V7464))) (cons (shen.vertical V7463 (tl V7464) V7465) ()))))) (true (simple-error "implementation error in shen.vertical"))))

(defun shen.split-cases (V7471 V7472 V7473) (cond ((and (cons? V7472) (and (cons? (hd V7472)) (and (cons? (hd (hd V7472))) (and (= and (hd (hd (hd V7472)))) (and (cons? (tl (hd (hd V7472)))) (and (cons? (tl (tl (hd (hd V7472))))) (and (= () (tl (tl (tl (hd (hd V7472)))))) (and (cons? (tl (hd V7472))) (and (= () (tl (tl (hd V7472)))) (= V7471 (hd (tl (hd (hd V7472)))))))))))))) (shen.split-cases (hd (tl (hd (hd V7472)))) (tl V7472) (cons (cons (hd (tl (tl (hd (hd V7472))))) (tl (hd V7472))) V7473))) ((and (cons? V7472) (and (cons? (hd V7472)) (and (cons? (tl (hd V7472))) (and (= () (tl (tl (hd V7472)))) (= V7471 (hd (hd V7472))))))) (shen.split-cases (hd (hd V7472)) (tl V7472) (cons (cons true (tl (hd V7472))) V7473))) (true (cons (reverse V7473) (cons V7472 ())))))

(defun shen.branch (V7474 V7475 V7476 V7477) (cond ((and (cons? V7476) (and (cons? (tl V7476)) (= () (tl (tl V7476))))) (let W7478 (shen.else V7475 (hd (tl V7476)) V7477) (let W7479 (shen.then V7474 V7475 (hd V7476) W7478) (cons if (cons V7474 (cons W7479 (cons W7478 ()))))))) (true (shen.f-error shen.branch))))

(defun shen.else (V7480 V7481 V7482) (let W7483 (shen.vertical V7480 V7481 V7482) (if (shen.inline? W7483) W7483 (shen.procedure-call V7480 W7483))))

(defun shen.procedure-call (V7484 V7485) (let W7486 (gensym shen.else) (let W7487 (shen.remove-if-unused V7484 V7485) (let W7488 (cons defun (cons W7486 (cons W7487 (cons V7485 ())))) (let W7489 (eval-kl W7488) (let W7490 (shen.record-kl W7486 W7488) (cons W7486 W7487)))))))

(defun shen.remove-if-unused (V7497 V7498) (cond ((= () V7497) ()) ((cons? V7497) (if (shen.occurs? (hd V7497) V7498) (cons (hd V7497) (shen.remove-if-unused (tl V7497) V7498)) (shen.remove-if-unused (tl V7497) V7498))) (true (simple-error "implementation error in shen.remove-if-unused"))))

(defun shen.then (V7499 V7500 V7501 V7502) (shen.horizontal (shen.selectors V7499 V7501) V7500 V7501 V7502))

(defun shen.horizontal (V7511 V7512 V7513 V7514) (cond ((= () V7511) (shen.vertical V7512 V7513 V7514)) ((cons? V7511) (let W7515 (gensym V) (cons let (cons W7515 (cons (hd V7511) (cons (shen.horizontal (tl V7511) (cons W7515 V7512) (subst W7515 (hd V7511) V7513) V7514) ())))))) (true (simple-error "implementation error in shen.horizontal"))))

(defun shen.selectors (V7520 V7521) (cond ((and (cons? V7520) (and (cons? (tl V7520)) (and (= () (tl (tl V7520))) (shen.constructor? (shen.op (hd V7520)))))) (let W7522 (shen.op (hd V7520)) (let W7523 (cons (shen.op1 W7522) (tl V7520)) (let W7524 (cons (shen.op2 W7522) (tl V7520)) (let W7525 (shen.rpted? W7523 V7521) (let W7526 (shen.rpted? W7524 V7521) (if (and W7525 W7526) (cons W7523 (cons W7524 ())) (if W7525 (cons W7523 ()) (if W7526 (cons W7524 ()) ()))))))))) (true ())))

(defun shen.rpted? (V7527 V7528) (> (occurrences V7527 V7528) 1))

(defun shen.inline? (V7529) (cond ((cons? V7529) (and (atom? (hd V7529)) (shen.inline? (tl V7529)))) (true (atom? V7529))))

(defun shen.op (V7532) (cond ((= cons? V7532) cons) ((= shen.+string? V7532) @s) ((= shen.+vector? V7532) @v) ((= tuple? V7532) @p) (true shen.skip)))

